// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: listener.proto

package otsimopb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventType int32

const (
	GAME_EVENT EventType = 0
	APP_EVENT  EventType = 1
)

var EventType_name = map[int32]string{
	0: "GAME_EVENT",
	1: "APP_EVENT",
}

var EventType_value = map[string]int32{
	"GAME_EVENT": 0,
	"APP_EVENT":  1,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f75aade3a9f7de9c, []int{0}
}

type DeviceInfo struct {
	VendorId             string   `protobuf:"bytes,1,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	ClientSdk            string   `protobuf:"bytes,2,opt,name=clientSdk,proto3" json:"clientSdk,omitempty"`
	BundleIdentifier     string   `protobuf:"bytes,3,opt,name=bundleIdentifier,proto3" json:"bundleIdentifier,omitempty"`
	BundleVersion        string   `protobuf:"bytes,4,opt,name=bundleVersion,proto3" json:"bundleVersion,omitempty"`
	BundleShortVersion   string   `protobuf:"bytes,5,opt,name=bundleShortVersion,proto3" json:"bundleShortVersion,omitempty"`
	DeviceType           string   `protobuf:"bytes,6,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	DeviceName           string   `protobuf:"bytes,7,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	OsName               string   `protobuf:"bytes,8,opt,name=osName,proto3" json:"osName,omitempty"`
	SystemVersion        string   `protobuf:"bytes,9,opt,name=systemVersion,proto3" json:"systemVersion,omitempty"`
	LanguageCode         string   `protobuf:"bytes,10,opt,name=languageCode,proto3" json:"languageCode,omitempty"`
	CountryCode          string   `protobuf:"bytes,11,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceInfo) Reset()         { *m = DeviceInfo{} }
func (m *DeviceInfo) String() string { return proto.CompactTextString(m) }
func (*DeviceInfo) ProtoMessage()    {}
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f75aade3a9f7de9c, []int{0}
}
func (m *DeviceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceInfo.Merge(m, src)
}
func (m *DeviceInfo) XXX_Size() int {
	return m.Size()
}
func (m *DeviceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceInfo proto.InternalMessageInfo

type GameInfo struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Language             string   `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameInfo) Reset()         { *m = GameInfo{} }
func (m *GameInfo) String() string { return proto.CompactTextString(m) }
func (*GameInfo) ProtoMessage()    {}
func (*GameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f75aade3a9f7de9c, []int{1}
}
func (m *GameInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameInfo.Merge(m, src)
}
func (m *GameInfo) XXX_Size() int {
	return m.Size()
}
func (m *GameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GameInfo proto.InternalMessageInfo

type Event struct {
	// UserId is profile id or child id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Child is secondary id
	ChildId string `protobuf:"bytes,2,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	// Event the event name
	Event string `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
	// Timestamp is seconds unix time
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Game is the game information
	Game *GameInfo `protobuf:"bytes,5,opt,name=game,proto3" json:"game,omitempty"`
	// Device is device information,
	Device *DeviceInfo `protobuf:"bytes,6,opt,name=device,proto3" json:"device,omitempty"`
	// AppId is the client app id
	AppId string `protobuf:"bytes,7,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// EventId is Client side event id in order to track whether event is
	// delivered successfully
	EventId string `protobuf:"bytes,9,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// IsResend is true if client is trying to send a failed event
	IsResend bool `protobuf:"varint,10,opt,name=is_resend,json=isResend,proto3" json:"is_resend,omitempty"`
	// Payload is a json data
	Payload []byte `protobuf:"bytes,11,opt,name=payload,proto3" json:"payload,omitempty"`
	// Type of the event. default is GAME_EVENT
	EventType            EventType `protobuf:"varint,16,opt,name=event_type,json=eventType,proto3,enum=apipb.EventType" json:"event_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_f75aade3a9f7de9c, []int{2}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type AppEventData struct {
	Event     string      `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	AppId     string      `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Device    *DeviceInfo `protobuf:"bytes,3,opt,name=device,proto3" json:"device,omitempty"`
	Timestamp int64       `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Payload   []byte      `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	// EventId is Client side event id in order to track whether event is
	// delivered successfully
	EventId string `protobuf:"bytes,7,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// IsResend is true if client is trying to send a failed event
	IsResend bool `protobuf:"varint,8,opt,name=is_resend,json=isResend,proto3" json:"is_resend,omitempty"`
	// UserId is profile id
	UserId               string   `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppEventData) Reset()         { *m = AppEventData{} }
func (m *AppEventData) String() string { return proto.CompactTextString(m) }
func (*AppEventData) ProtoMessage()    {}
func (*AppEventData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f75aade3a9f7de9c, []int{3}
}
func (m *AppEventData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppEventData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppEventData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppEventData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppEventData.Merge(m, src)
}
func (m *AppEventData) XXX_Size() int {
	return m.Size()
}
func (m *AppEventData) XXX_DiscardUnknown() {
	xxx_messageInfo_AppEventData.DiscardUnknown(m)
}

var xxx_messageInfo_AppEventData proto.InternalMessageInfo

type BatchEventData struct {
	// Event is the event name
	Event string `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	// EventId is Client side event id in order to track whether event is
	// delivered successfully
	EventId string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// Timestamp is seconds unix time
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Game is the game information
	Game *GameInfo `protobuf:"bytes,4,opt,name=game,proto3" json:"game,omitempty"`
	// Loc is the location of user
	// IsResend is true if client is trying to send a failed event
	IsResend bool `protobuf:"varint,6,opt,name=is_resend,json=isResend,proto3" json:"is_resend,omitempty"`
	// Payload is a json data
	Payload []byte `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
	// Type of the event. default is GAME_EVENT
	EventType            EventType `protobuf:"varint,10,opt,name=event_type,json=eventType,proto3,enum=apipb.EventType" json:"event_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *BatchEventData) Reset()         { *m = BatchEventData{} }
func (m *BatchEventData) String() string { return proto.CompactTextString(m) }
func (*BatchEventData) ProtoMessage()    {}
func (*BatchEventData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f75aade3a9f7de9c, []int{4}
}
func (m *BatchEventData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchEventData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchEventData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchEventData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchEventData.Merge(m, src)
}
func (m *BatchEventData) XXX_Size() int {
	return m.Size()
}
func (m *BatchEventData) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchEventData.DiscardUnknown(m)
}

var xxx_messageInfo_BatchEventData proto.InternalMessageInfo

type BatchEvent struct {
	// UserId is profile id or child id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Child is secondary id
	ChildId string `protobuf:"bytes,2,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	// AppId is the client app id
	AppId string `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// Device is device information,
	Device *DeviceInfo `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	// Data is
	Data                 []*BatchEventData `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BatchEvent) Reset()         { *m = BatchEvent{} }
func (m *BatchEvent) String() string { return proto.CompactTextString(m) }
func (*BatchEvent) ProtoMessage()    {}
func (*BatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_f75aade3a9f7de9c, []int{5}
}
func (m *BatchEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchEvent.Merge(m, src)
}
func (m *BatchEvent) XXX_Size() int {
	return m.Size()
}
func (m *BatchEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BatchEvent proto.InternalMessageInfo

type EventResponse struct {
	EventId              string   `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Success              bool     `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventResponse) Reset()         { *m = EventResponse{} }
func (m *EventResponse) String() string { return proto.CompactTextString(m) }
func (*EventResponse) ProtoMessage()    {}
func (*EventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f75aade3a9f7de9c, []int{6}
}
func (m *EventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventResponse.Merge(m, src)
}
func (m *EventResponse) XXX_Size() int {
	return m.Size()
}
func (m *EventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EventResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("apipb.EventType", EventType_name, EventType_value)
	proto.RegisterType((*DeviceInfo)(nil), "apipb.DeviceInfo")
	proto.RegisterType((*GameInfo)(nil), "apipb.GameInfo")
	proto.RegisterType((*Event)(nil), "apipb.Event")
	proto.RegisterType((*AppEventData)(nil), "apipb.AppEventData")
	proto.RegisterType((*BatchEventData)(nil), "apipb.BatchEventData")
	proto.RegisterType((*BatchEvent)(nil), "apipb.BatchEvent")
	proto.RegisterType((*EventResponse)(nil), "apipb.EventResponse")
}

func init() { proto.RegisterFile("listener.proto", fileDescriptor_f75aade3a9f7de9c) }

var fileDescriptor_f75aade3a9f7de9c = []byte{
	// 829 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4d, 0x6f, 0xdc, 0x44,
	0x18, 0xde, 0x59, 0x7f, 0x8d, 0xdf, 0xdd, 0x6c, 0xdc, 0x21, 0x05, 0x13, 0x90, 0x15, 0x19, 0x0e,
	0x69, 0x0e, 0x5b, 0xb4, 0xa8, 0x17, 0x2e, 0x28, 0x6d, 0xa2, 0x6a, 0x23, 0x28, 0x91, 0x37, 0xaa,
	0x10, 0x97, 0x68, 0x62, 0x4f, 0x37, 0x16, 0x6b, 0x8f, 0xe5, 0x99, 0x5d, 0x69, 0xff, 0x03, 0x07,
	0x8e, 0x9c, 0xf9, 0x17, 0x88, 0x3f, 0xd0, 0x63, 0x7f, 0x02, 0x4d, 0xc5, 0x4f, 0xe0, 0x8a, 0x90,
	0xc7, 0xf6, 0xda, 0xa6, 0xc9, 0x06, 0x71, 0xf3, 0xf3, 0xbe, 0xcf, 0x8c, 0xdf, 0xf7, 0x79, 0x1e,
	0xcb, 0x30, 0x5a, 0xc4, 0x42, 0xb2, 0x94, 0xe5, 0xe3, 0x2c, 0xe7, 0x92, 0x13, 0x83, 0x66, 0x71,
	0x76, 0xb5, 0xbf, 0x37, 0xe7, 0x73, 0xae, 0x2a, 0x8f, 0x8b, 0xa7, 0xb2, 0xe9, 0xff, 0xa4, 0x01,
	0x9c, 0xb0, 0x55, 0x1c, 0xb2, 0x69, 0xfa, 0x8a, 0x93, 0x7d, 0xc0, 0x2b, 0x96, 0x46, 0x3c, 0x9f,
	0x46, 0x2e, 0x3a, 0x40, 0x87, 0x76, 0xb0, 0xc1, 0xe4, 0x53, 0xb0, 0xc3, 0x45, 0xcc, 0x52, 0x39,
	0x8b, 0x7e, 0x74, 0xfb, 0xaa, 0xd9, 0x14, 0xc8, 0x11, 0x38, 0x57, 0xcb, 0x34, 0x5a, 0xb0, 0x69,
	0xc4, 0x52, 0x19, 0xbf, 0x8a, 0x59, 0xee, 0x6a, 0x8a, 0xf4, 0x5e, 0x9d, 0x7c, 0x0e, 0x3b, 0x65,
	0xed, 0x25, 0xcb, 0x45, 0xcc, 0x53, 0x57, 0x57, 0xc4, 0x6e, 0x91, 0x8c, 0x81, 0x94, 0x85, 0xd9,
	0x35, 0xcf, 0x65, 0x4d, 0x35, 0x14, 0xf5, 0x96, 0x0e, 0xf1, 0x00, 0x22, 0xb5, 0xc9, 0xc5, 0x3a,
	0x63, 0xae, 0xa9, 0x78, 0xad, 0x4a, 0xd3, 0x7f, 0x41, 0x13, 0xe6, 0x5a, 0xed, 0x7e, 0x51, 0x21,
	0x1f, 0x82, 0xc9, 0x85, 0xea, 0x61, 0xd5, 0xab, 0x50, 0x31, 0xad, 0x58, 0x0b, 0xc9, 0x92, 0x7a,
	0x04, 0xbb, 0x9c, 0xb6, 0x53, 0x24, 0x3e, 0x0c, 0x17, 0x34, 0x9d, 0x2f, 0xe9, 0x9c, 0x3d, 0xe3,
	0x11, 0x73, 0x41, 0x91, 0x3a, 0x35, 0x72, 0x00, 0x83, 0x90, 0x2f, 0x53, 0x99, 0xaf, 0x15, 0x65,
	0xa0, 0x28, 0xed, 0x92, 0x7f, 0x0e, 0xf8, 0x39, 0x4d, 0x4a, 0x2f, 0x46, 0xd0, 0x8f, 0x6b, 0x17,
	0xfa, 0x71, 0x44, 0x5c, 0xb0, 0x56, 0xd5, 0x04, 0xa5, 0xfa, 0x35, 0x2c, 0x5c, 0xab, 0xdf, 0x53,
	0x69, 0xbe, 0xc1, 0xfe, 0x9f, 0x7d, 0x30, 0x4e, 0x57, 0x2c, 0x95, 0xe4, 0x23, 0xb0, 0x96, 0x82,
	0xe5, 0x97, 0x9b, 0x4b, 0xcd, 0x02, 0x4e, 0x23, 0xf2, 0x31, 0xe0, 0xf0, 0x3a, 0x5e, 0x44, 0x45,
	0xa7, 0xba, 0x59, 0xe1, 0x69, 0x44, 0xf6, 0xc0, 0x60, 0xc5, 0xe1, 0xea, 0xda, 0x12, 0x14, 0x49,
	0x90, 0x71, 0xc2, 0x84, 0xa4, 0x49, 0xa6, 0xbc, 0xd3, 0x82, 0xa6, 0x40, 0x3e, 0x03, 0x7d, 0x5e,
	0xa8, 0x58, 0x38, 0x35, 0x98, 0xec, 0x8e, 0x55, 0xfc, 0xc6, 0xf5, 0x5a, 0x81, 0x6a, 0x92, 0x47,
	0x60, 0x96, 0xd2, 0x2b, 0xa3, 0x06, 0x93, 0x07, 0x15, 0xad, 0xc9, 0x62, 0x50, 0x11, 0xc8, 0x43,
	0x30, 0x69, 0x96, 0x15, 0xc3, 0x95, 0x9e, 0x19, 0x34, 0xcb, 0xca, 0xa9, 0xd5, 0x34, 0x45, 0xa3,
	0x74, 0xc4, 0x52, 0x78, 0x1a, 0x91, 0x4f, 0xc0, 0x8e, 0xc5, 0x65, 0xce, 0x04, 0x4b, 0x23, 0x65,
	0x04, 0x0e, 0x70, 0x2c, 0x02, 0x85, 0x0b, 0x19, 0x33, 0xba, 0x5e, 0x70, 0x1a, 0x29, 0x03, 0x86,
	0x41, 0x0d, 0xc9, 0x63, 0x80, 0xf2, 0x46, 0x59, 0x04, 0xc8, 0x39, 0x40, 0x87, 0xa3, 0x89, 0x53,
	0xcd, 0xa5, 0x24, 0x2c, 0x62, 0x14, 0xd8, 0xac, 0x7e, 0x3c, 0xd3, 0x31, 0x76, 0xec, 0x33, 0x1d,
	0x0f, 0x1d, 0xc7, 0xff, 0x0b, 0xc1, 0xf0, 0x38, 0xcb, 0x14, 0xef, 0x84, 0x4a, 0xda, 0x48, 0x87,
	0xda, 0xd2, 0x35, 0xcb, 0xf4, 0xdb, 0xcb, 0x34, 0x72, 0x68, 0xf7, 0xc9, 0xb1, 0x5d, 0xfc, 0xd6,
	0x76, 0x46, 0x77, 0xbb, 0xb6, 0x5e, 0xd6, 0x16, 0xbd, 0xf0, 0xbf, 0xf4, 0x6a, 0xc5, 0xc6, 0x6e,
	0xc7, 0xe6, 0x4c, 0xc7, 0xa6, 0x63, 0xf9, 0x7f, 0x23, 0x18, 0x3d, 0xa5, 0x32, 0xbc, 0xbe, 0x6f,
	0xf3, 0xf6, 0xfb, 0xfb, 0xdd, 0xf7, 0x77, 0x56, 0xd2, 0xee, 0xca, 0x93, 0xbe, 0x2d, 0x4f, 0x9d,
	0x15, 0xcc, 0xbb, 0x2d, 0xb7, 0xb6, 0x59, 0x0e, 0xff, 0xc5, 0x72, 0xc3, 0x31, 0x37, 0xc6, 0xdb,
	0x0e, 0xf8, 0xbf, 0x21, 0x80, 0x46, 0x80, 0xff, 0xf5, 0x95, 0x35, 0xa1, 0xd0, 0x6e, 0x0f, 0x85,
	0x7e, 0x5f, 0x28, 0x1e, 0x81, 0x1e, 0x51, 0x49, 0x5d, 0xe3, 0x40, 0x3b, 0x1c, 0x4c, 0x1e, 0x56,
	0xc4, 0xae, 0x2f, 0x81, 0xa2, 0x94, 0xb6, 0x9d, 0xe9, 0xd8, 0x72, 0xb0, 0x7f, 0x02, 0x3b, 0xaa,
	0x1d, 0x30, 0x91, 0xf1, 0x54, 0xb0, 0x8e, 0x49, 0xa8, 0x6b, 0x92, 0x0b, 0x96, 0x58, 0x86, 0x21,
	0x13, 0x42, 0x8d, 0x8f, 0x83, 0x1a, 0x1e, 0x1d, 0x81, 0xbd, 0xd1, 0x8a, 0x8c, 0x00, 0x9e, 0x1f,
	0x7f, 0x7b, 0x7a, 0x79, 0xfa, 0xf2, 0xf4, 0xc5, 0x85, 0xd3, 0x23, 0x3b, 0x60, 0x1f, 0x9f, 0x9f,
	0x57, 0x10, 0x4d, 0x7e, 0x47, 0xb0, 0xfb, 0x4d, 0xf5, 0x7f, 0x9a, 0xb1, 0x5c, 0x0d, 0xff, 0x04,
	0x70, 0xfd, 0xe5, 0x90, 0x0f, 0xaa, 0xd1, 0xdb, 0x9f, 0xd2, 0xfe, 0x5e, 0xdb, 0x91, 0xcd, 0xac,
	0x4f, 0x60, 0xf0, 0x6c, 0x29, 0x24, 0x4f, 0xca, 0x93, 0xc3, 0x36, 0xe9, 0xf6, 0x23, 0x87, 0xe8,
	0x0b, 0x44, 0xbe, 0x82, 0x81, 0xd2, 0x65, 0x26, 0x73, 0x46, 0x13, 0xf2, 0xe0, 0x3d, 0xad, 0xee,
	0x3e, 0xfb, 0xf4, 0xeb, 0xd7, 0x6f, 0xbd, 0xde, 0x9b, 0xb7, 0x5e, 0xef, 0xf5, 0x8d, 0x87, 0xde,
	0xdc, 0x78, 0xe8, 0x8f, 0x1b, 0x0f, 0xfd, 0xfc, 0xce, 0xeb, 0xfd, 0xf2, 0xce, 0xeb, 0xc1, 0x6e,
	0xc8, 0x93, 0x31, 0x97, 0x22, 0x4e, 0xf8, 0x78, 0x9e, 0x67, 0xe1, 0x39, 0xfa, 0x01, 0x97, 0x30,
	0xbb, 0xfa, 0xb5, 0xaf, 0x7d, 0x77, 0x31, 0xfb, 0xbe, 0x77, 0x65, 0xaa, 0xff, 0xee, 0x97, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xec, 0x8a, 0x07, 0x03, 0xa6, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ListenerServiceClient is the client API for ListenerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ListenerServiceClient interface {
	AppEvent(ctx context.Context, in *AppEventData, opts ...grpc.CallOption) (*EventResponse, error)
	CustomEvent(ctx context.Context, opts ...grpc.CallOption) (ListenerService_CustomEventClient, error)
	BatchStream(ctx context.Context, opts ...grpc.CallOption) (ListenerService_BatchStreamClient, error)
}

type listenerServiceClient struct {
	cc *grpc.ClientConn
}

func NewListenerServiceClient(cc *grpc.ClientConn) ListenerServiceClient {
	return &listenerServiceClient{cc}
}

func (c *listenerServiceClient) AppEvent(ctx context.Context, in *AppEventData, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/apipb.ListenerService/AppEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerServiceClient) CustomEvent(ctx context.Context, opts ...grpc.CallOption) (ListenerService_CustomEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ListenerService_serviceDesc.Streams[0], "/apipb.ListenerService/CustomEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &listenerServiceCustomEventClient{stream}
	return x, nil
}

type ListenerService_CustomEventClient interface {
	Send(*Event) error
	Recv() (*EventResponse, error)
	grpc.ClientStream
}

type listenerServiceCustomEventClient struct {
	grpc.ClientStream
}

func (x *listenerServiceCustomEventClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *listenerServiceCustomEventClient) Recv() (*EventResponse, error) {
	m := new(EventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *listenerServiceClient) BatchStream(ctx context.Context, opts ...grpc.CallOption) (ListenerService_BatchStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ListenerService_serviceDesc.Streams[1], "/apipb.ListenerService/BatchStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &listenerServiceBatchStreamClient{stream}
	return x, nil
}

type ListenerService_BatchStreamClient interface {
	Send(*BatchEvent) error
	Recv() (*EventResponse, error)
	grpc.ClientStream
}

type listenerServiceBatchStreamClient struct {
	grpc.ClientStream
}

func (x *listenerServiceBatchStreamClient) Send(m *BatchEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *listenerServiceBatchStreamClient) Recv() (*EventResponse, error) {
	m := new(EventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ListenerServiceServer is the server API for ListenerService service.
type ListenerServiceServer interface {
	AppEvent(context.Context, *AppEventData) (*EventResponse, error)
	CustomEvent(ListenerService_CustomEventServer) error
	BatchStream(ListenerService_BatchStreamServer) error
}

// UnimplementedListenerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedListenerServiceServer struct {
}

func (*UnimplementedListenerServiceServer) AppEvent(ctx context.Context, req *AppEventData) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppEvent not implemented")
}
func (*UnimplementedListenerServiceServer) CustomEvent(srv ListenerService_CustomEventServer) error {
	return status.Errorf(codes.Unimplemented, "method CustomEvent not implemented")
}
func (*UnimplementedListenerServiceServer) BatchStream(srv ListenerService_BatchStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchStream not implemented")
}

func RegisterListenerServiceServer(s *grpc.Server, srv ListenerServiceServer) {
	s.RegisterService(&_ListenerService_serviceDesc, srv)
}

func _ListenerService_AppEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppEventData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServiceServer).AppEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.ListenerService/AppEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServiceServer).AppEvent(ctx, req.(*AppEventData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListenerService_CustomEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ListenerServiceServer).CustomEvent(&listenerServiceCustomEventServer{stream})
}

type ListenerService_CustomEventServer interface {
	Send(*EventResponse) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type listenerServiceCustomEventServer struct {
	grpc.ServerStream
}

func (x *listenerServiceCustomEventServer) Send(m *EventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *listenerServiceCustomEventServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ListenerService_BatchStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ListenerServiceServer).BatchStream(&listenerServiceBatchStreamServer{stream})
}

type ListenerService_BatchStreamServer interface {
	Send(*EventResponse) error
	Recv() (*BatchEvent, error)
	grpc.ServerStream
}

type listenerServiceBatchStreamServer struct {
	grpc.ServerStream
}

func (x *listenerServiceBatchStreamServer) Send(m *EventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *listenerServiceBatchStreamServer) Recv() (*BatchEvent, error) {
	m := new(BatchEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ListenerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apipb.ListenerService",
	HandlerType: (*ListenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppEvent",
			Handler:    _ListenerService_AppEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CustomEvent",
			Handler:       _ListenerService_CustomEvent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "BatchStream",
			Handler:       _ListenerService_BatchStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "listener.proto",
}

func (m *DeviceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VendorId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.VendorId)))
		i += copy(dAtA[i:], m.VendorId)
	}
	if len(m.ClientSdk) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.ClientSdk)))
		i += copy(dAtA[i:], m.ClientSdk)
	}
	if len(m.BundleIdentifier) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.BundleIdentifier)))
		i += copy(dAtA[i:], m.BundleIdentifier)
	}
	if len(m.BundleVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.BundleVersion)))
		i += copy(dAtA[i:], m.BundleVersion)
	}
	if len(m.BundleShortVersion) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.BundleShortVersion)))
		i += copy(dAtA[i:], m.BundleShortVersion)
	}
	if len(m.DeviceType) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.DeviceType)))
		i += copy(dAtA[i:], m.DeviceType)
	}
	if len(m.DeviceName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.DeviceName)))
		i += copy(dAtA[i:], m.DeviceName)
	}
	if len(m.OsName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.OsName)))
		i += copy(dAtA[i:], m.OsName)
	}
	if len(m.SystemVersion) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.SystemVersion)))
		i += copy(dAtA[i:], m.SystemVersion)
	}
	if len(m.LanguageCode) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.LanguageCode)))
		i += copy(dAtA[i:], m.LanguageCode)
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	return i, nil
}

func (m *GameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Language) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.Language)))
		i += copy(dAtA[i:], m.Language)
	}
	return i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.ChildId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.ChildId)))
		i += copy(dAtA[i:], m.ChildId)
	}
	if len(m.Event) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.Event)))
		i += copy(dAtA[i:], m.Event)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Timestamp))
	}
	if m.Game != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Game.Size()))
		n1, err1 := m.Game.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.Device != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Device.Size()))
		n2, err2 := m.Device.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if len(m.AppId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	if len(m.EventId) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.EventId)))
		i += copy(dAtA[i:], m.EventId)
	}
	if m.IsResend {
		dAtA[i] = 0x50
		i++
		if m.IsResend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.EventType != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.EventType))
	}
	return i, nil
}

func (m *AppEventData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppEventData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Event) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.Event)))
		i += copy(dAtA[i:], m.Event)
	}
	if len(m.AppId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	if m.Device != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Device.Size()))
		n3, err3 := m.Device.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if len(m.EventId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.EventId)))
		i += copy(dAtA[i:], m.EventId)
	}
	if m.IsResend {
		dAtA[i] = 0x40
		i++
		if m.IsResend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	return i, nil
}

func (m *BatchEventData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchEventData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Event) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.Event)))
		i += copy(dAtA[i:], m.Event)
	}
	if len(m.EventId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.EventId)))
		i += copy(dAtA[i:], m.EventId)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Timestamp))
	}
	if m.Game != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Game.Size()))
		n4, err4 := m.Game.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	if m.IsResend {
		dAtA[i] = 0x30
		i++
		if m.IsResend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.EventType != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.EventType))
	}
	return i, nil
}

func (m *BatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.ChildId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.ChildId)))
		i += copy(dAtA[i:], m.ChildId)
	}
	if len(m.AppId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	if m.Device != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Device.Size()))
		n5, err5 := m.Device.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintListener(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EventId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.EventId)))
		i += copy(dAtA[i:], m.EventId)
	}
	if m.Success {
		dAtA[i] = 0x10
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintListener(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DeviceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VendorId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.ClientSdk)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.BundleIdentifier)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.BundleVersion)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.BundleShortVersion)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.DeviceType)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.DeviceName)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.OsName)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.SystemVersion)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.LanguageCode)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	return n
}

func (m *GameInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	return n
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.ChildId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovListener(uint64(m.Timestamp))
	}
	if m.Game != nil {
		l = m.Game.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	if m.IsResend {
		n += 2
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	if m.EventType != 0 {
		n += 2 + sovListener(uint64(m.EventType))
	}
	return n
}

func (m *AppEventData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovListener(uint64(m.Timestamp))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	if m.IsResend {
		n += 2
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	return n
}

func (m *BatchEventData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovListener(uint64(m.Timestamp))
	}
	if m.Game != nil {
		l = m.Game.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	if m.IsResend {
		n += 2
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	if m.EventType != 0 {
		n += 1 + sovListener(uint64(m.EventType))
	}
	return n
}

func (m *BatchEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.ChildId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovListener(uint64(l))
		}
	}
	return n
}

func (m *EventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	if m.Success {
		n += 2
	}
	return n
}

func sovListener(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozListener(x uint64) (n int) {
	return sovListener(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeviceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowListener
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VendorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSdk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSdk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleShortVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleShortVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LanguageCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LanguageCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipListener(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowListener
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipListener(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowListener
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Game == nil {
				m.Game = &GameInfo{}
			}
			if err := m.Game.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &DeviceInfo{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsResend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsResend = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipListener(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppEventData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowListener
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppEventData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppEventData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &DeviceInfo{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsResend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsResend = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipListener(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchEventData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowListener
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchEventData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchEventData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Game == nil {
				m.Game = &GameInfo{}
			}
			if err := m.Game.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsResend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsResend = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipListener(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowListener
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &DeviceInfo{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &BatchEventData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipListener(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowListener
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListener
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipListener(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipListener(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowListener
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowListener
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowListener
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthListener
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthListener
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowListener
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipListener(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthListener
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthListener = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowListener   = fmt.Errorf("proto: integer overflow")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: simplyanalysis.proto

package otsimopb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DataInterval int32

const (
	HOURLY DataInterval = 0
	DAILY  DataInterval = 1
)

var DataInterval_name = map[int32]string{
	0: "HOURLY",
	1: "DAILY",
}

var DataInterval_value = map[string]int32{
	"HOURLY": 0,
	"DAILY":  1,
}

func (x DataInterval) String() string {
	return proto.EnumName(DataInterval_name, int32(x))
}

func (DataInterval) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_010df508860d9666, []int{0}
}

type GamePlayingRequest struct {
	Games []string `protobuf:"bytes,1,rep,name=games,proto3" json:"games,omitempty"`
	// From is the unix seconds time
	From int64 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	// To is the unix seconds time
	To                   int64        `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	Interval             DataInterval `protobuf:"varint,4,opt,name=interval,proto3,enum=apipb.DataInterval" json:"interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GamePlayingRequest) Reset()         { *m = GamePlayingRequest{} }
func (m *GamePlayingRequest) String() string { return proto.CompactTextString(m) }
func (*GamePlayingRequest) ProtoMessage()    {}
func (*GamePlayingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_010df508860d9666, []int{0}
}
func (m *GamePlayingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GamePlayingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GamePlayingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GamePlayingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GamePlayingRequest.Merge(m, src)
}
func (m *GamePlayingRequest) XXX_Size() int {
	return m.Size()
}
func (m *GamePlayingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GamePlayingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GamePlayingRequest proto.InternalMessageInfo

type GamePlayingReply struct {
	Data                 *DataSet `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GamePlayingReply) Reset()         { *m = GamePlayingReply{} }
func (m *GamePlayingReply) String() string { return proto.CompactTextString(m) }
func (*GamePlayingReply) ProtoMessage()    {}
func (*GamePlayingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_010df508860d9666, []int{1}
}
func (m *GamePlayingReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GamePlayingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GamePlayingReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GamePlayingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GamePlayingReply.Merge(m, src)
}
func (m *GamePlayingReply) XXX_Size() int {
	return m.Size()
}
func (m *GamePlayingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GamePlayingReply.DiscardUnknown(m)
}

var xxx_messageInfo_GamePlayingReply proto.InternalMessageInfo

type SimplifiedReq struct {
	Analysis string `protobuf:"bytes,1,opt,name=analysis,proto3" json:"analysis,omitempty"`
	// From is the unix seconds time
	From int64 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	// To is the unix seconds time
	To       int64        `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	Games    []string     `protobuf:"bytes,4,rep,name=games,proto3" json:"games,omitempty"`
	Interval DataInterval `protobuf:"varint,5,opt,name=interval,proto3,enum=apipb.DataInterval" json:"interval,omitempty"`
	// Child Id to filter data from
	// optional
	ChildId              string   `protobuf:"bytes,6,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimplifiedReq) Reset()         { *m = SimplifiedReq{} }
func (m *SimplifiedReq) String() string { return proto.CompactTextString(m) }
func (*SimplifiedReq) ProtoMessage()    {}
func (*SimplifiedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_010df508860d9666, []int{2}
}
func (m *SimplifiedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimplifiedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimplifiedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimplifiedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimplifiedReq.Merge(m, src)
}
func (m *SimplifiedReq) XXX_Size() int {
	return m.Size()
}
func (m *SimplifiedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SimplifiedReq.DiscardUnknown(m)
}

var xxx_messageInfo_SimplifiedReq proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("apipb.DataInterval", DataInterval_name, DataInterval_value)
	proto.RegisterType((*GamePlayingRequest)(nil), "apipb.GamePlayingRequest")
	proto.RegisterType((*GamePlayingReply)(nil), "apipb.GamePlayingReply")
	proto.RegisterType((*SimplifiedReq)(nil), "apipb.SimplifiedReq")
}

func init() { proto.RegisterFile("simplyanalysis.proto", fileDescriptor_010df508860d9666) }

var fileDescriptor_010df508860d9666 = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x4d, 0x6f, 0xd3, 0x30,
	0x18, 0x8e, 0xfb, 0x45, 0xfb, 0x02, 0xa5, 0x72, 0x2b, 0x91, 0xe5, 0x10, 0x55, 0x95, 0x90, 0x2a,
	0x0e, 0x99, 0x54, 0x24, 0xae, 0x68, 0x53, 0x05, 0xab, 0x34, 0xb1, 0xc9, 0x05, 0x89, 0x71, 0x41,
	0x6e, 0xe2, 0x05, 0x4b, 0x76, 0x9d, 0xc5, 0x0e, 0x52, 0x4e, 0xfc, 0x05, 0x8e, 0x9c, 0xf9, 0x07,
	0xfc, 0x8b, 0x1d, 0x77, 0xe6, 0xc4, 0xba, 0x3f, 0x82, 0xe2, 0x84, 0x92, 0x01, 0x87, 0x6a, 0xb7,
	0xf7, 0xf1, 0x63, 0xbf, 0x7a, 0x3e, 0x0c, 0x23, 0xcd, 0x65, 0x22, 0x72, 0xba, 0xa6, 0x22, 0xd7,
	0x5c, 0x07, 0x49, 0xaa, 0x8c, 0xc2, 0x6d, 0x9a, 0xf0, 0x64, 0xe5, 0x0d, 0x23, 0x6a, 0xa8, 0x66,
	0x46, 0xaa, 0x88, 0x89, 0x8a, 0xf3, 0x46, 0xb1, 0x8a, 0x95, 0x1d, 0xf7, 0x8b, 0xa9, 0x3c, 0x9d,
	0x7c, 0x06, 0xfc, 0x8a, 0x4a, 0x76, 0x2a, 0x68, 0xce, 0xd7, 0x31, 0x61, 0x17, 0x19, 0xd3, 0x06,
	0x8f, 0xa0, 0x1d, 0x53, 0xc9, 0xb4, 0x8b, 0xc6, 0xcd, 0x69, 0x8f, 0x94, 0x00, 0x63, 0x68, 0x9d,
	0xa7, 0x4a, 0xba, 0x8d, 0x31, 0x9a, 0x36, 0x89, 0x9d, 0x71, 0x1f, 0x1a, 0x46, 0xb9, 0x4d, 0x7b,
	0xd2, 0x30, 0x0a, 0xef, 0x43, 0x97, 0xaf, 0x0d, 0x4b, 0x3f, 0x51, 0xe1, 0xb6, 0xc6, 0x68, 0xda,
	0x9f, 0x0d, 0x03, 0x2b, 0x2a, 0x98, 0x53, 0x43, 0x17, 0x15, 0x45, 0xb6, 0x97, 0x26, 0xcf, 0x61,
	0x70, 0x4b, 0x40, 0x22, 0x72, 0x3c, 0x81, 0x56, 0xe1, 0xc0, 0x45, 0x63, 0x34, 0xbd, 0x3f, 0xeb,
	0xd7, 0x16, 0x2c, 0x99, 0x21, 0x96, 0x9b, 0x7c, 0x47, 0xf0, 0x70, 0x59, 0x64, 0xc0, 0xcf, 0x39,
	0x8b, 0x08, 0xbb, 0xc0, 0x1e, 0x74, 0x7f, 0xc7, 0x61, 0x5f, 0xf6, 0xc8, 0x16, 0xef, 0x24, 0x7d,
	0x6b, 0xba, 0x55, 0x37, 0x5d, 0x37, 0xd4, 0xde, 0xc1, 0x10, 0xde, 0x83, 0x6e, 0xf8, 0x91, 0x8b,
	0xe8, 0x03, 0x8f, 0xdc, 0x8e, 0x95, 0x71, 0xcf, 0xe2, 0x45, 0xf4, 0xf4, 0x09, 0x3c, 0xa8, 0x3f,
	0xc2, 0x00, 0x9d, 0xa3, 0x93, 0xb7, 0xe4, 0xf8, 0x6c, 0xe0, 0xe0, 0x1e, 0xb4, 0xe7, 0x07, 0x8b,
	0xe3, 0xb3, 0x01, 0x9a, 0xfd, 0x40, 0x30, 0xfc, 0x63, 0xed, 0xa0, 0xf0, 0x60, 0x78, 0xa8, 0xf1,
	0x02, 0x86, 0xb5, 0xa8, 0xe6, 0x59, 0x4a, 0x0d, 0x57, 0x6b, 0xbc, 0x57, 0xe9, 0xf9, 0xb7, 0x47,
	0xef, 0xf1, 0xff, 0xa8, 0x22, 0xe1, 0xa3, 0xb2, 0xf6, 0x65, 0x16, 0x86, 0x4c, 0xeb, 0x97, 0x94,
	0x8b, 0x2c, 0x65, 0x77, 0xda, 0x14, 0x40, 0xe7, 0x30, 0x7f, 0x4d, 0x25, 0xc3, 0xa3, 0xea, 0xca,
	0xad, 0x56, 0xbc, 0xbf, 0xda, 0x3b, 0x7c, 0x71, 0x79, 0xed, 0x3b, 0x57, 0xd7, 0xbe, 0x73, 0xb9,
	0xf1, 0xd1, 0xd5, 0xc6, 0x47, 0x3f, 0x37, 0x3e, 0xfa, 0x72, 0xe3, 0x3b, 0x5f, 0x6f, 0x7c, 0x07,
	0x1e, 0x85, 0x4a, 0x06, 0xca, 0x68, 0x2e, 0x55, 0x10, 0xa7, 0x49, 0x78, 0x8a, 0xde, 0x77, 0x4b,
	0x98, 0xac, 0xbe, 0x35, 0x9a, 0x27, 0x6f, 0x96, 0xef, 0xd0, 0xaa, 0x63, 0xbf, 0xee, 0xb3, 0x5f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x2d, 0xff, 0xef, 0x04, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SimplifiedAnalyticsClient is the client API for SimplifiedAnalytics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimplifiedAnalyticsClient interface {
	GamePlayingDuration(ctx context.Context, in *GamePlayingRequest, opts ...grpc.CallOption) (*GamePlayingReply, error)
	GameSuccessFailure(ctx context.Context, in *GamePlayingRequest, opts ...grpc.CallOption) (*GamePlayingReply, error)
	ByName(ctx context.Context, in *SimplifiedReq, opts ...grpc.CallOption) (*DataSet, error)
}

type simplifiedAnalyticsClient struct {
	cc *grpc.ClientConn
}

func NewSimplifiedAnalyticsClient(cc *grpc.ClientConn) SimplifiedAnalyticsClient {
	return &simplifiedAnalyticsClient{cc}
}

func (c *simplifiedAnalyticsClient) GamePlayingDuration(ctx context.Context, in *GamePlayingRequest, opts ...grpc.CallOption) (*GamePlayingReply, error) {
	out := new(GamePlayingReply)
	err := c.cc.Invoke(ctx, "/apipb.SimplifiedAnalytics/GamePlayingDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simplifiedAnalyticsClient) GameSuccessFailure(ctx context.Context, in *GamePlayingRequest, opts ...grpc.CallOption) (*GamePlayingReply, error) {
	out := new(GamePlayingReply)
	err := c.cc.Invoke(ctx, "/apipb.SimplifiedAnalytics/GameSuccessFailure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simplifiedAnalyticsClient) ByName(ctx context.Context, in *SimplifiedReq, opts ...grpc.CallOption) (*DataSet, error) {
	out := new(DataSet)
	err := c.cc.Invoke(ctx, "/apipb.SimplifiedAnalytics/ByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimplifiedAnalyticsServer is the server API for SimplifiedAnalytics service.
type SimplifiedAnalyticsServer interface {
	GamePlayingDuration(context.Context, *GamePlayingRequest) (*GamePlayingReply, error)
	GameSuccessFailure(context.Context, *GamePlayingRequest) (*GamePlayingReply, error)
	ByName(context.Context, *SimplifiedReq) (*DataSet, error)
}

// UnimplementedSimplifiedAnalyticsServer can be embedded to have forward compatible implementations.
type UnimplementedSimplifiedAnalyticsServer struct {
}

func (*UnimplementedSimplifiedAnalyticsServer) GamePlayingDuration(ctx context.Context, req *GamePlayingRequest) (*GamePlayingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GamePlayingDuration not implemented")
}
func (*UnimplementedSimplifiedAnalyticsServer) GameSuccessFailure(ctx context.Context, req *GamePlayingRequest) (*GamePlayingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameSuccessFailure not implemented")
}
func (*UnimplementedSimplifiedAnalyticsServer) ByName(ctx context.Context, req *SimplifiedReq) (*DataSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByName not implemented")
}

func RegisterSimplifiedAnalyticsServer(s *grpc.Server, srv SimplifiedAnalyticsServer) {
	s.RegisterService(&_SimplifiedAnalytics_serviceDesc, srv)
}

func _SimplifiedAnalytics_GamePlayingDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GamePlayingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimplifiedAnalyticsServer).GamePlayingDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.SimplifiedAnalytics/GamePlayingDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimplifiedAnalyticsServer).GamePlayingDuration(ctx, req.(*GamePlayingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimplifiedAnalytics_GameSuccessFailure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GamePlayingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimplifiedAnalyticsServer).GameSuccessFailure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.SimplifiedAnalytics/GameSuccessFailure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimplifiedAnalyticsServer).GameSuccessFailure(ctx, req.(*GamePlayingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimplifiedAnalytics_ByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimplifiedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimplifiedAnalyticsServer).ByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.SimplifiedAnalytics/ByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimplifiedAnalyticsServer).ByName(ctx, req.(*SimplifiedReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimplifiedAnalytics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apipb.SimplifiedAnalytics",
	HandlerType: (*SimplifiedAnalyticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GamePlayingDuration",
			Handler:    _SimplifiedAnalytics_GamePlayingDuration_Handler,
		},
		{
			MethodName: "GameSuccessFailure",
			Handler:    _SimplifiedAnalytics_GameSuccessFailure_Handler,
		},
		{
			MethodName: "ByName",
			Handler:    _SimplifiedAnalytics_ByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simplyanalysis.proto",
}

func (m *GamePlayingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GamePlayingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Games) > 0 {
		for _, s := range m.Games {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.From != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSimplyanalysis(dAtA, i, uint64(m.From))
	}
	if m.To != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSimplyanalysis(dAtA, i, uint64(m.To))
	}
	if m.Interval != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSimplyanalysis(dAtA, i, uint64(m.Interval))
	}
	return i, nil
}

func (m *GamePlayingReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GamePlayingReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSimplyanalysis(dAtA, i, uint64(m.Data.Size()))
		n1, err1 := m.Data.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	return i, nil
}

func (m *SimplifiedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimplifiedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Analysis) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSimplyanalysis(dAtA, i, uint64(len(m.Analysis)))
		i += copy(dAtA[i:], m.Analysis)
	}
	if m.From != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSimplyanalysis(dAtA, i, uint64(m.From))
	}
	if m.To != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSimplyanalysis(dAtA, i, uint64(m.To))
	}
	if len(m.Games) > 0 {
		for _, s := range m.Games {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Interval != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSimplyanalysis(dAtA, i, uint64(m.Interval))
	}
	if len(m.ChildId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSimplyanalysis(dAtA, i, uint64(len(m.ChildId)))
		i += copy(dAtA[i:], m.ChildId)
	}
	return i, nil
}

func encodeVarintSimplyanalysis(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GamePlayingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Games) > 0 {
		for _, s := range m.Games {
			l = len(s)
			n += 1 + l + sovSimplyanalysis(uint64(l))
		}
	}
	if m.From != 0 {
		n += 1 + sovSimplyanalysis(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovSimplyanalysis(uint64(m.To))
	}
	if m.Interval != 0 {
		n += 1 + sovSimplyanalysis(uint64(m.Interval))
	}
	return n
}

func (m *GamePlayingReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovSimplyanalysis(uint64(l))
	}
	return n
}

func (m *SimplifiedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Analysis)
	if l > 0 {
		n += 1 + l + sovSimplyanalysis(uint64(l))
	}
	if m.From != 0 {
		n += 1 + sovSimplyanalysis(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovSimplyanalysis(uint64(m.To))
	}
	if len(m.Games) > 0 {
		for _, s := range m.Games {
			l = len(s)
			n += 1 + l + sovSimplyanalysis(uint64(l))
		}
	}
	if m.Interval != 0 {
		n += 1 + sovSimplyanalysis(uint64(m.Interval))
	}
	l = len(m.ChildId)
	if l > 0 {
		n += 1 + l + sovSimplyanalysis(uint64(l))
	}
	return n
}

func sovSimplyanalysis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSimplyanalysis(x uint64) (n int) {
	return sovSimplyanalysis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GamePlayingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSimplyanalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GamePlayingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GamePlayingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Games", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimplyanalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSimplyanalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSimplyanalysis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Games = append(m.Games, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimplyanalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimplyanalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimplyanalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= DataInterval(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSimplyanalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSimplyanalysis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSimplyanalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GamePlayingReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSimplyanalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GamePlayingReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GamePlayingReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimplyanalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSimplyanalysis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSimplyanalysis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DataSet{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSimplyanalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSimplyanalysis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSimplyanalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimplifiedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSimplyanalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimplifiedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimplifiedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Analysis", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimplyanalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSimplyanalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSimplyanalysis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Analysis = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimplyanalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimplyanalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Games", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimplyanalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSimplyanalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSimplyanalysis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Games = append(m.Games, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimplyanalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= DataInterval(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimplyanalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSimplyanalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSimplyanalysis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSimplyanalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSimplyanalysis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSimplyanalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSimplyanalysis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSimplyanalysis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSimplyanalysis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSimplyanalysis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSimplyanalysis
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSimplyanalysis
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSimplyanalysis
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSimplyanalysis(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSimplyanalysis
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSimplyanalysis = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSimplyanalysis   = fmt.Errorf("proto: integer overflow")
)

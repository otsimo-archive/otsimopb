// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v2/registry_v2.proto

package v2

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	otsimopb "github.com/otsimo/otsimopb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CategoryReq_Task int32

const (
	CategoryReq_ADD    CategoryReq_Task = 0
	CategoryReq_UPDATE CategoryReq_Task = 1
	CategoryReq_DELETE CategoryReq_Task = 2
)

var CategoryReq_Task_name = map[int32]string{
	0: "ADD",
	1: "UPDATE",
	2: "DELETE",
}

var CategoryReq_Task_value = map[string]int32{
	"ADD":    0,
	"UPDATE": 1,
	"DELETE": 2,
}

func (x CategoryReq_Task) String() string {
	return proto.EnumName(CategoryReq_Task_name, int32(x))
}

func (CategoryReq_Task) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{3, 0}
}

type AllGameReleases struct {
	GameId               string                         `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Releases             []*AllGameReleases_MiniRelease `protobuf:"bytes,2,rep,name=releases,proto3" json:"releases,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *AllGameReleases) Reset()         { *m = AllGameReleases{} }
func (m *AllGameReleases) String() string { return proto.CompactTextString(m) }
func (*AllGameReleases) ProtoMessage()    {}
func (*AllGameReleases) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{0}
}
func (m *AllGameReleases) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllGameReleases) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllGameReleases.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllGameReleases) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllGameReleases.Merge(m, src)
}
func (m *AllGameReleases) XXX_Size() int {
	return m.Size()
}
func (m *AllGameReleases) XXX_DiscardUnknown() {
	xxx_messageInfo_AllGameReleases.DiscardUnknown(m)
}

var xxx_messageInfo_AllGameReleases proto.InternalMessageInfo

func (m *AllGameReleases) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

func (m *AllGameReleases) GetReleases() []*AllGameReleases_MiniRelease {
	if m != nil {
		return m.Releases
	}
	return nil
}

type AllGameReleases_MiniRelease struct {
	Version              string                `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	ReleasedAt           int64                 `protobuf:"varint,2,opt,name=released_at,json=releasedAt,proto3" json:"released_at,omitempty"`
	ReleaseState         otsimopb.ReleaseState `protobuf:"varint,3,opt,name=release_state,json=releaseState,proto3,enum=apipb.ReleaseState" json:"release_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *AllGameReleases_MiniRelease) Reset()         { *m = AllGameReleases_MiniRelease{} }
func (m *AllGameReleases_MiniRelease) String() string { return proto.CompactTextString(m) }
func (*AllGameReleases_MiniRelease) ProtoMessage()    {}
func (*AllGameReleases_MiniRelease) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{0, 0}
}
func (m *AllGameReleases_MiniRelease) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllGameReleases_MiniRelease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllGameReleases_MiniRelease.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllGameReleases_MiniRelease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllGameReleases_MiniRelease.Merge(m, src)
}
func (m *AllGameReleases_MiniRelease) XXX_Size() int {
	return m.Size()
}
func (m *AllGameReleases_MiniRelease) XXX_DiscardUnknown() {
	xxx_messageInfo_AllGameReleases_MiniRelease.DiscardUnknown(m)
}

var xxx_messageInfo_AllGameReleases_MiniRelease proto.InternalMessageInfo

func (m *AllGameReleases_MiniRelease) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *AllGameReleases_MiniRelease) GetReleasedAt() int64 {
	if m != nil {
		return m.ReleasedAt
	}
	return 0
}

func (m *AllGameReleases_MiniRelease) GetReleaseState() otsimopb.ReleaseState {
	if m != nil {
		return m.ReleaseState
	}
	return otsimopb.ReleaseState_CREATED
}

type GameCategoryLocale struct {
	Language             string   `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Image                string   `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Color                string   `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	Description          string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameCategoryLocale) Reset()         { *m = GameCategoryLocale{} }
func (m *GameCategoryLocale) String() string { return proto.CompactTextString(m) }
func (*GameCategoryLocale) ProtoMessage()    {}
func (*GameCategoryLocale) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{1}
}
func (m *GameCategoryLocale) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameCategoryLocale) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameCategoryLocale.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameCategoryLocale) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameCategoryLocale.Merge(m, src)
}
func (m *GameCategoryLocale) XXX_Size() int {
	return m.Size()
}
func (m *GameCategoryLocale) XXX_DiscardUnknown() {
	xxx_messageInfo_GameCategoryLocale.DiscardUnknown(m)
}

var xxx_messageInfo_GameCategoryLocale proto.InternalMessageInfo

func (m *GameCategoryLocale) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *GameCategoryLocale) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GameCategoryLocale) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *GameCategoryLocale) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *GameCategoryLocale) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type GameCategory struct {
	Name                 string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Locales              []*GameCategoryLocale `protobuf:"bytes,2,rep,name=locales,proto3" json:"locales,omitempty"`
	Revision             int32                 `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty"`
	Labels               map[string]string     `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DefaultLocale        string                `protobuf:"bytes,5,opt,name=default_locale,json=defaultLocale,proto3" json:"default_locale,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GameCategory) Reset()         { *m = GameCategory{} }
func (m *GameCategory) String() string { return proto.CompactTextString(m) }
func (*GameCategory) ProtoMessage()    {}
func (*GameCategory) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{2}
}
func (m *GameCategory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameCategory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameCategory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameCategory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameCategory.Merge(m, src)
}
func (m *GameCategory) XXX_Size() int {
	return m.Size()
}
func (m *GameCategory) XXX_DiscardUnknown() {
	xxx_messageInfo_GameCategory.DiscardUnknown(m)
}

var xxx_messageInfo_GameCategory proto.InternalMessageInfo

func (m *GameCategory) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GameCategory) GetLocales() []*GameCategoryLocale {
	if m != nil {
		return m.Locales
	}
	return nil
}

func (m *GameCategory) GetRevision() int32 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *GameCategory) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *GameCategory) GetDefaultLocale() string {
	if m != nil {
		return m.DefaultLocale
	}
	return ""
}

type CategoryReq struct {
	Task                 CategoryReq_Task `protobuf:"varint,1,opt,name=task,proto3,enum=otsimopb.v2.CategoryReq_Task" json:"task,omitempty"`
	Category             *GameCategory    `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	KnownRevision        int32            `protobuf:"varint,3,opt,name=known_revision,json=knownRevision,proto3" json:"known_revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CategoryReq) Reset()         { *m = CategoryReq{} }
func (m *CategoryReq) String() string { return proto.CompactTextString(m) }
func (*CategoryReq) ProtoMessage()    {}
func (*CategoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{3}
}
func (m *CategoryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CategoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CategoryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CategoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CategoryReq.Merge(m, src)
}
func (m *CategoryReq) XXX_Size() int {
	return m.Size()
}
func (m *CategoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CategoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_CategoryReq proto.InternalMessageInfo

func (m *CategoryReq) GetTask() CategoryReq_Task {
	if m != nil {
		return m.Task
	}
	return CategoryReq_ADD
}

func (m *CategoryReq) GetCategory() *GameCategory {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *CategoryReq) GetKnownRevision() int32 {
	if m != nil {
		return m.KnownRevision
	}
	return 0
}

type CategoryListReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CategoryListReq) Reset()         { *m = CategoryListReq{} }
func (m *CategoryListReq) String() string { return proto.CompactTextString(m) }
func (*CategoryListReq) ProtoMessage()    {}
func (*CategoryListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{4}
}
func (m *CategoryListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CategoryListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CategoryListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CategoryListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CategoryListReq.Merge(m, src)
}
func (m *CategoryListReq) XXX_Size() int {
	return m.Size()
}
func (m *CategoryListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CategoryListReq.DiscardUnknown(m)
}

var xxx_messageInfo_CategoryListReq proto.InternalMessageInfo

type CategoryList struct {
	Categories           []*GameCategory `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CategoryList) Reset()         { *m = CategoryList{} }
func (m *CategoryList) String() string { return proto.CompactTextString(m) }
func (*CategoryList) ProtoMessage()    {}
func (*CategoryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{5}
}
func (m *CategoryList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CategoryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CategoryList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CategoryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CategoryList.Merge(m, src)
}
func (m *CategoryList) XXX_Size() int {
	return m.Size()
}
func (m *CategoryList) XXX_DiscardUnknown() {
	xxx_messageInfo_CategoryList.DiscardUnknown(m)
}

var xxx_messageInfo_CategoryList proto.InternalMessageInfo

func (m *CategoryList) GetCategories() []*GameCategory {
	if m != nil {
		return m.Categories
	}
	return nil
}

type GetAllGamesReq struct {
	// Games that user wants the data of, if it is empty returns all games
	Games []*otsimopb.GameAndVersion `protobuf:"bytes,1,rep,name=games,proto3" json:"games,omitempty"`
	// Language filters games. If language field is empty than returns games with
	// all languages.
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	// Device Capabilities
	Capabilities         []string `protobuf:"bytes,3,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllGamesReq) Reset()         { *m = GetAllGamesReq{} }
func (m *GetAllGamesReq) String() string { return proto.CompactTextString(m) }
func (*GetAllGamesReq) ProtoMessage()    {}
func (*GetAllGamesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{6}
}
func (m *GetAllGamesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllGamesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllGamesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllGamesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllGamesReq.Merge(m, src)
}
func (m *GetAllGamesReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAllGamesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllGamesReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllGamesReq proto.InternalMessageInfo

func (m *GetAllGamesReq) GetGames() []*otsimopb.GameAndVersion {
	if m != nil {
		return m.Games
	}
	return nil
}

func (m *GetAllGamesReq) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *GetAllGamesReq) GetCapabilities() []string {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

type GetAllGamesRes struct {
	Games                []*otsimopb.GameRelease `protobuf:"bytes,1,rep,name=games,proto3" json:"games,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetAllGamesRes) Reset()         { *m = GetAllGamesRes{} }
func (m *GetAllGamesRes) String() string { return proto.CompactTextString(m) }
func (*GetAllGamesRes) ProtoMessage()    {}
func (*GetAllGamesRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{7}
}
func (m *GetAllGamesRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllGamesRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllGamesRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllGamesRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllGamesRes.Merge(m, src)
}
func (m *GetAllGamesRes) XXX_Size() int {
	return m.Size()
}
func (m *GetAllGamesRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllGamesRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllGamesRes proto.InternalMessageInfo

func (m *GetAllGamesRes) GetGames() []*otsimopb.GameRelease {
	if m != nil {
		return m.Games
	}
	return nil
}

type PublishReq struct {
	Manifest             *otsimopb.GameManifest `protobuf:"bytes,1,opt,name=manifest,proto3" json:"manifest,omitempty"`
	Files                map[string]string      `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PublishReq) Reset()         { *m = PublishReq{} }
func (m *PublishReq) String() string { return proto.CompactTextString(m) }
func (*PublishReq) ProtoMessage()    {}
func (*PublishReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{8}
}
func (m *PublishReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishReq.Merge(m, src)
}
func (m *PublishReq) XXX_Size() int {
	return m.Size()
}
func (m *PublishReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishReq.DiscardUnknown(m)
}

var xxx_messageInfo_PublishReq proto.InternalMessageInfo

func (m *PublishReq) GetManifest() *otsimopb.GameManifest {
	if m != nil {
		return m.Manifest
	}
	return nil
}

func (m *PublishReq) GetFiles() map[string]string {
	if m != nil {
		return m.Files
	}
	return nil
}

type PublishRes struct {
	Token                *otsimopb.UploadToken `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	UploadUrls           map[string]string     `protobuf:"bytes,2,rep,name=upload_urls,json=uploadUrls,proto3" json:"upload_urls,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Storage              string                `protobuf:"bytes,3,opt,name=storage,proto3" json:"storage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PublishRes) Reset()         { *m = PublishRes{} }
func (m *PublishRes) String() string { return proto.CompactTextString(m) }
func (*PublishRes) ProtoMessage()    {}
func (*PublishRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{9}
}
func (m *PublishRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRes.Merge(m, src)
}
func (m *PublishRes) XXX_Size() int {
	return m.Size()
}
func (m *PublishRes) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRes.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRes proto.InternalMessageInfo

func (m *PublishRes) GetToken() *otsimopb.UploadToken {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *PublishRes) GetUploadUrls() map[string]string {
	if m != nil {
		return m.UploadUrls
	}
	return nil
}

func (m *PublishRes) GetStorage() string {
	if m != nil {
		return m.Storage
	}
	return ""
}

type TarballInfo struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Storage              string   `protobuf:"bytes,2,opt,name=storage,proto3" json:"storage,omitempty"`
	ArchiveFormat        string   `protobuf:"bytes,3,opt,name=archive_format,json=archiveFormat,proto3" json:"archive_format,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TarballInfo) Reset()         { *m = TarballInfo{} }
func (m *TarballInfo) String() string { return proto.CompactTextString(m) }
func (*TarballInfo) ProtoMessage()    {}
func (*TarballInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{10}
}
func (m *TarballInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TarballInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TarballInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TarballInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TarballInfo.Merge(m, src)
}
func (m *TarballInfo) XXX_Size() int {
	return m.Size()
}
func (m *TarballInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TarballInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TarballInfo proto.InternalMessageInfo

func (m *TarballInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *TarballInfo) GetStorage() string {
	if m != nil {
		return m.Storage
	}
	return ""
}

func (m *TarballInfo) GetArchiveFormat() string {
	if m != nil {
		return m.ArchiveFormat
	}
	return ""
}

type AddTarballReq struct {
	Token                string         `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Infos                []*TarballInfo `protobuf:"bytes,2,rep,name=infos,proto3" json:"infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AddTarballReq) Reset()         { *m = AddTarballReq{} }
func (m *AddTarballReq) String() string { return proto.CompactTextString(m) }
func (*AddTarballReq) ProtoMessage()    {}
func (*AddTarballReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{11}
}
func (m *AddTarballReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddTarballReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddTarballReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddTarballReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTarballReq.Merge(m, src)
}
func (m *AddTarballReq) XXX_Size() int {
	return m.Size()
}
func (m *AddTarballReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTarballReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddTarballReq proto.InternalMessageInfo

func (m *AddTarballReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *AddTarballReq) GetInfos() []*TarballInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type AddTarballRes struct {
	PackageUrls          map[string]string `protobuf:"bytes,1,rep,name=package_urls,json=packageUrls,proto3" json:"package_urls,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AddTarballRes) Reset()         { *m = AddTarballRes{} }
func (m *AddTarballRes) String() string { return proto.CompactTextString(m) }
func (*AddTarballRes) ProtoMessage()    {}
func (*AddTarballRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{12}
}
func (m *AddTarballRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddTarballRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddTarballRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddTarballRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTarballRes.Merge(m, src)
}
func (m *AddTarballRes) XXX_Size() int {
	return m.Size()
}
func (m *AddTarballRes) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTarballRes.DiscardUnknown(m)
}

var xxx_messageInfo_AddTarballRes proto.InternalMessageInfo

func (m *AddTarballRes) GetPackageUrls() map[string]string {
	if m != nil {
		return m.PackageUrls
	}
	return nil
}

type RegistryClient struct {
	UniqueName           string   `protobuf:"bytes,1,opt,name=unique_name,json=uniqueName,proto3" json:"unique_name,omitempty"`
	ApiKey               string   `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistryClient) Reset()         { *m = RegistryClient{} }
func (m *RegistryClient) String() string { return proto.CompactTextString(m) }
func (*RegistryClient) ProtoMessage()    {}
func (*RegistryClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{13}
}
func (m *RegistryClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistryClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistryClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistryClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryClient.Merge(m, src)
}
func (m *RegistryClient) XXX_Size() int {
	return m.Size()
}
func (m *RegistryClient) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryClient.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryClient proto.InternalMessageInfo

func (m *RegistryClient) GetUniqueName() string {
	if m != nil {
		return m.UniqueName
	}
	return ""
}

func (m *RegistryClient) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

type CreateClientReq struct {
	UniqueName           string   `protobuf:"bytes,1,opt,name=unique_name,json=uniqueName,proto3" json:"unique_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateClientReq) Reset()         { *m = CreateClientReq{} }
func (m *CreateClientReq) String() string { return proto.CompactTextString(m) }
func (*CreateClientReq) ProtoMessage()    {}
func (*CreateClientReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{14}
}
func (m *CreateClientReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateClientReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateClientReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateClientReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClientReq.Merge(m, src)
}
func (m *CreateClientReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateClientReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClientReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClientReq proto.InternalMessageInfo

func (m *CreateClientReq) GetUniqueName() string {
	if m != nil {
		return m.UniqueName
	}
	return ""
}

type RevokeClientReq struct {
	ApiKey               string   `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevokeClientReq) Reset()         { *m = RevokeClientReq{} }
func (m *RevokeClientReq) String() string { return proto.CompactTextString(m) }
func (*RevokeClientReq) ProtoMessage()    {}
func (*RevokeClientReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{15}
}
func (m *RevokeClientReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevokeClientReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevokeClientReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevokeClientReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevokeClientReq.Merge(m, src)
}
func (m *RevokeClientReq) XXX_Size() int {
	return m.Size()
}
func (m *RevokeClientReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RevokeClientReq.DiscardUnknown(m)
}

var xxx_messageInfo_RevokeClientReq proto.InternalMessageInfo

func (m *RevokeClientReq) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

type ClientList struct {
	ClientNames          []string `protobuf:"bytes,1,rep,name=client_names,json=clientNames,proto3" json:"client_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientList) Reset()         { *m = ClientList{} }
func (m *ClientList) String() string { return proto.CompactTextString(m) }
func (*ClientList) ProtoMessage()    {}
func (*ClientList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{16}
}
func (m *ClientList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientList.Merge(m, src)
}
func (m *ClientList) XXX_Size() int {
	return m.Size()
}
func (m *ClientList) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientList.DiscardUnknown(m)
}

var xxx_messageInfo_ClientList proto.InternalMessageInfo

func (m *ClientList) GetClientNames() []string {
	if m != nil {
		return m.ClientNames
	}
	return nil
}

type ListClientReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClientReq) Reset()         { *m = ListClientReq{} }
func (m *ListClientReq) String() string { return proto.CompactTextString(m) }
func (*ListClientReq) ProtoMessage()    {}
func (*ListClientReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{17}
}
func (m *ListClientReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListClientReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListClientReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListClientReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClientReq.Merge(m, src)
}
func (m *ListClientReq) XXX_Size() int {
	return m.Size()
}
func (m *ListClientReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClientReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListClientReq proto.InternalMessageInfo

type GameSummaryInfo struct {
	GameId               string   `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	UniqueName           string   `protobuf:"bytes,2,opt,name=unique_name,json=uniqueName,proto3" json:"unique_name,omitempty"`
	IsPremium            bool     `protobuf:"varint,3,opt,name=is_premium,json=isPremium,proto3" json:"is_premium,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameSummaryInfo) Reset()         { *m = GameSummaryInfo{} }
func (m *GameSummaryInfo) String() string { return proto.CompactTextString(m) }
func (*GameSummaryInfo) ProtoMessage()    {}
func (*GameSummaryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{18}
}
func (m *GameSummaryInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameSummaryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameSummaryInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameSummaryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameSummaryInfo.Merge(m, src)
}
func (m *GameSummaryInfo) XXX_Size() int {
	return m.Size()
}
func (m *GameSummaryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GameSummaryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GameSummaryInfo proto.InternalMessageInfo

func (m *GameSummaryInfo) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

func (m *GameSummaryInfo) GetUniqueName() string {
	if m != nil {
		return m.UniqueName
	}
	return ""
}

func (m *GameSummaryInfo) GetIsPremium() bool {
	if m != nil {
		return m.IsPremium
	}
	return false
}

type AllGamesSummary struct {
	Games                []*GameSummaryInfo `protobuf:"bytes,1,rep,name=games,proto3" json:"games,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AllGamesSummary) Reset()         { *m = AllGamesSummary{} }
func (m *AllGamesSummary) String() string { return proto.CompactTextString(m) }
func (*AllGamesSummary) ProtoMessage()    {}
func (*AllGamesSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{19}
}
func (m *AllGamesSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllGamesSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllGamesSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllGamesSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllGamesSummary.Merge(m, src)
}
func (m *AllGamesSummary) XXX_Size() int {
	return m.Size()
}
func (m *AllGamesSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_AllGamesSummary.DiscardUnknown(m)
}

var xxx_messageInfo_AllGamesSummary proto.InternalMessageInfo

func (m *AllGamesSummary) GetGames() []*GameSummaryInfo {
	if m != nil {
		return m.Games
	}
	return nil
}

type AllGamesSummaryReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllGamesSummaryReq) Reset()         { *m = AllGamesSummaryReq{} }
func (m *AllGamesSummaryReq) String() string { return proto.CompactTextString(m) }
func (*AllGamesSummaryReq) ProtoMessage()    {}
func (*AllGamesSummaryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1b22410eb3eeef, []int{20}
}
func (m *AllGamesSummaryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllGamesSummaryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllGamesSummaryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllGamesSummaryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllGamesSummaryReq.Merge(m, src)
}
func (m *AllGamesSummaryReq) XXX_Size() int {
	return m.Size()
}
func (m *AllGamesSummaryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AllGamesSummaryReq.DiscardUnknown(m)
}

var xxx_messageInfo_AllGamesSummaryReq proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("otsimopb.v2.CategoryReq_Task", CategoryReq_Task_name, CategoryReq_Task_value)
	proto.RegisterType((*AllGameReleases)(nil), "otsimopb.v2.AllGameReleases")
	proto.RegisterType((*AllGameReleases_MiniRelease)(nil), "otsimopb.v2.AllGameReleases.MiniRelease")
	proto.RegisterType((*GameCategoryLocale)(nil), "otsimopb.v2.GameCategoryLocale")
	proto.RegisterType((*GameCategory)(nil), "otsimopb.v2.GameCategory")
	proto.RegisterMapType((map[string]string)(nil), "otsimopb.v2.GameCategory.LabelsEntry")
	proto.RegisterType((*CategoryReq)(nil), "otsimopb.v2.CategoryReq")
	proto.RegisterType((*CategoryListReq)(nil), "otsimopb.v2.CategoryListReq")
	proto.RegisterType((*CategoryList)(nil), "otsimopb.v2.CategoryList")
	proto.RegisterType((*GetAllGamesReq)(nil), "otsimopb.v2.GetAllGamesReq")
	proto.RegisterType((*GetAllGamesRes)(nil), "otsimopb.v2.GetAllGamesRes")
	proto.RegisterType((*PublishReq)(nil), "otsimopb.v2.PublishReq")
	proto.RegisterMapType((map[string]string)(nil), "otsimopb.v2.PublishReq.FilesEntry")
	proto.RegisterType((*PublishRes)(nil), "otsimopb.v2.PublishRes")
	proto.RegisterMapType((map[string]string)(nil), "otsimopb.v2.PublishRes.UploadUrlsEntry")
	proto.RegisterType((*TarballInfo)(nil), "otsimopb.v2.TarballInfo")
	proto.RegisterType((*AddTarballReq)(nil), "otsimopb.v2.AddTarballReq")
	proto.RegisterType((*AddTarballRes)(nil), "otsimopb.v2.AddTarballRes")
	proto.RegisterMapType((map[string]string)(nil), "otsimopb.v2.AddTarballRes.PackageUrlsEntry")
	proto.RegisterType((*RegistryClient)(nil), "otsimopb.v2.RegistryClient")
	proto.RegisterType((*CreateClientReq)(nil), "otsimopb.v2.CreateClientReq")
	proto.RegisterType((*RevokeClientReq)(nil), "otsimopb.v2.RevokeClientReq")
	proto.RegisterType((*ClientList)(nil), "otsimopb.v2.ClientList")
	proto.RegisterType((*ListClientReq)(nil), "otsimopb.v2.ListClientReq")
	proto.RegisterType((*GameSummaryInfo)(nil), "otsimopb.v2.GameSummaryInfo")
	proto.RegisterType((*AllGamesSummary)(nil), "otsimopb.v2.AllGamesSummary")
	proto.RegisterType((*AllGamesSummaryReq)(nil), "otsimopb.v2.AllGamesSummaryReq")
}

func init() { proto.RegisterFile("v2/registry_v2.proto", fileDescriptor_3a1b22410eb3eeef) }

var fileDescriptor_3a1b22410eb3eeef = []byte{
	// 1486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xce, 0xda, 0xf9, 0xf2, 0xbb, 0x8e, 0x9d, 0x0e, 0x29, 0x71, 0xdd, 0x34, 0x09, 0x0b, 0x55,
	0x43, 0x2b, 0x39, 0xc5, 0x08, 0x91, 0x54, 0x6a, 0x91, 0x9b, 0xa4, 0x69, 0x4a, 0x5a, 0xa2, 0x4d,
	0x52, 0x24, 0x2e, 0x66, 0x62, 0x4f, 0x9c, 0x21, 0xfb, 0x95, 0x9d, 0xb1, 0x51, 0x0e, 0x5c, 0xfa,
	0x17, 0x8a, 0x04, 0xe2, 0x82, 0xc4, 0x3f, 0xe0, 0x57, 0xc0, 0x11, 0x89, 0x13, 0x37, 0x54, 0xf8,
	0x0b, 0xdc, 0xd1, 0x7c, 0xec, 0x7a, 0x76, 0x1b, 0x07, 0x7a, 0xf3, 0xfb, 0xfd, 0xcc, 0x3b, 0xf3,
	0x3e, 0x7e, 0x17, 0xe6, 0x06, 0xcd, 0xd5, 0x98, 0xf4, 0x28, 0xe3, 0xf1, 0x79, 0x7b, 0xd0, 0x6c,
	0x44, 0x71, 0xc8, 0x43, 0x64, 0x87, 0x9c, 0x51, 0x3f, 0x8c, 0x8e, 0x1a, 0x83, 0x66, 0xbd, 0xe2,
	0x13, 0xc6, 0x70, 0x8f, 0x30, 0x65, 0xac, 0x97, 0xfd, 0xb0, 0x4b, 0xbc, 0x44, 0x5a, 0xe8, 0x85,
	0x61, 0xcf, 0x23, 0xab, 0x38, 0xa2, 0xab, 0x38, 0x08, 0x42, 0x8e, 0x39, 0x0d, 0x03, 0x6d, 0x75,
	0xfe, 0xb1, 0xa0, 0xda, 0xf2, 0xbc, 0x6d, 0xec, 0x13, 0x97, 0x78, 0x04, 0x33, 0xc2, 0xd0, 0x3c,
	0x4c, 0xf5, 0xb0, 0x4f, 0xda, 0xb4, 0x5b, 0xb3, 0x96, 0xad, 0x95, 0x92, 0x3b, 0x29, 0xc4, 0x9d,
	0x2e, 0xda, 0x84, 0xe9, 0x58, 0x3b, 0xd5, 0x0a, 0xcb, 0xc5, 0x15, 0xbb, 0xb9, 0xd2, 0x30, 0x80,
	0x34, 0x72, 0x89, 0x1a, 0x4f, 0x69, 0x40, 0xb5, 0xe0, 0xa6, 0x91, 0xf5, 0x17, 0x16, 0xd8, 0x86,
	0x05, 0xd5, 0x60, 0x6a, 0x40, 0x62, 0x46, 0xc3, 0x40, 0x97, 0x4b, 0x44, 0xb4, 0x04, 0xb6, 0x8e,
	0xea, 0xb6, 0x31, 0xaf, 0x15, 0x96, 0xad, 0x95, 0xa2, 0x0b, 0x89, 0xaa, 0xc5, 0xd1, 0x1a, 0xcc,
	0x68, 0xa9, 0xcd, 0x38, 0xe6, 0xa4, 0x56, 0x5c, 0xb6, 0x56, 0x2a, 0xcd, 0xb7, 0x1a, 0x38, 0xa2,
	0xd1, 0x51, 0x43, 0x57, 0xd8, 0x17, 0x26, 0xb7, 0x1c, 0x1b, 0x92, 0xf3, 0xad, 0x05, 0x48, 0x60,
	0xdd, 0xc0, 0x9c, 0xf4, 0xc2, 0xf8, 0x7c, 0x37, 0xec, 0x60, 0x8f, 0xa0, 0x3a, 0x4c, 0x7b, 0x38,
	0xe8, 0xf5, 0x71, 0x8f, 0x68, 0x30, 0xa9, 0x8c, 0xe6, 0x60, 0x82, 0x53, 0xee, 0x11, 0x89, 0xa3,
	0xe4, 0x2a, 0x41, 0x68, 0xa9, 0x2f, 0xdc, 0x8b, 0x4a, 0x2b, 0x05, 0xa1, 0xed, 0x84, 0x5e, 0x18,
	0xd7, 0xc6, 0x95, 0x56, 0x0a, 0x68, 0x19, 0xec, 0x2e, 0x61, 0x9d, 0x98, 0x46, 0xe2, 0x0a, 0x6a,
	0x13, 0xd2, 0x66, 0xaa, 0x9c, 0x1f, 0x0a, 0x50, 0x36, 0x61, 0x21, 0x04, 0xe3, 0x01, 0xf6, 0x13,
	0x30, 0xf2, 0x37, 0x5a, 0x87, 0x29, 0x4f, 0xc2, 0x4d, 0x6e, 0x61, 0x29, 0x73, 0x0b, 0xaf, 0x1f,
	0xcb, 0x4d, 0xfc, 0xc5, 0xf9, 0x62, 0x32, 0xa0, 0xb2, 0xd9, 0x02, 0xf0, 0x84, 0x9b, 0xca, 0xe8,
	0x3e, 0x4c, 0x7a, 0xf8, 0x88, 0x78, 0xac, 0x36, 0x2e, 0xb3, 0xde, 0x1c, 0x99, 0xb5, 0xb1, 0x2b,
	0xfd, 0xb6, 0x02, 0x1e, 0x9f, 0xbb, 0x3a, 0x08, 0xdd, 0x84, 0x4a, 0x97, 0x1c, 0xe3, 0xbe, 0xc7,
	0xdb, 0xaa, 0x9a, 0x3e, 0xdf, 0x8c, 0xd6, 0x2a, 0x28, 0xf5, 0x75, 0xb0, 0x8d, 0x68, 0x34, 0x0b,
	0xc5, 0x53, 0x72, 0xae, 0x8f, 0x27, 0x7e, 0x8a, 0xd6, 0x0d, 0xb0, 0xd7, 0x4f, 0xdb, 0x2c, 0x85,
	0x7b, 0x85, 0x35, 0xcb, 0xf9, 0xc5, 0x02, 0x3b, 0x81, 0xe0, 0x92, 0x33, 0xf4, 0x01, 0x8c, 0x73,
	0xcc, 0x4e, 0x65, 0x70, 0xa5, 0x79, 0x23, 0x03, 0xd7, 0xf0, 0x6b, 0x1c, 0x60, 0x76, 0xea, 0x4a,
	0x57, 0xf4, 0x11, 0x4c, 0x77, 0xb4, 0x45, 0xe6, 0xb7, 0x9b, 0xd7, 0x46, 0x9e, 0xd2, 0x4d, 0x5d,
	0xc5, 0xd9, 0x4e, 0x83, 0xf0, 0xeb, 0xa0, 0x9d, 0x6b, 0xde, 0x8c, 0xd4, 0xba, 0x5a, 0xe9, 0xdc,
	0x82, 0x71, 0x51, 0x0b, 0x4d, 0x41, 0xb1, 0xb5, 0xb9, 0x39, 0x3b, 0x86, 0x00, 0x26, 0x0f, 0xf7,
	0x36, 0x5b, 0x07, 0x5b, 0xb3, 0x96, 0xf8, 0xbd, 0xb9, 0xb5, 0xbb, 0x75, 0xb0, 0x35, 0x5b, 0x70,
	0xae, 0x40, 0x35, 0xbd, 0x21, 0xca, 0xb8, 0x4b, 0xce, 0x9c, 0x1d, 0x28, 0x9b, 0x2a, 0xb4, 0x0e,
	0xa0, 0xcb, 0x53, 0xc2, 0x6a, 0x96, 0xbc, 0x91, 0x4b, 0xb0, 0x1a, 0xce, 0xce, 0x37, 0x50, 0xd9,
	0x26, 0x5c, 0x0f, 0x23, 0x13, 0x9d, 0xba, 0x03, 0x13, 0x62, 0x84, 0x93, 0x3c, 0x57, 0xf5, 0x7c,
	0x08, 0x7b, 0x2b, 0xe8, 0x3e, 0x57, 0xe3, 0xe6, 0x2a, 0x9f, 0xcc, 0x0c, 0x14, 0x72, 0x33, 0xe0,
	0x40, 0xb9, 0x83, 0x23, 0x7c, 0x44, 0x3d, 0xca, 0x05, 0xae, 0xe2, 0x72, 0x71, 0xa5, 0xe4, 0x66,
	0x74, 0xce, 0xbd, 0x5c, 0x79, 0x86, 0x56, 0xb2, 0xe5, 0x91, 0x51, 0x3e, 0xa1, 0x07, 0xe5, 0xe0,
	0xfc, 0x6c, 0x01, 0xec, 0xf5, 0x8f, 0x3c, 0xca, 0x4e, 0x04, 0xee, 0x55, 0x98, 0xf6, 0x71, 0x40,
	0x8f, 0x09, 0xe3, 0xf2, 0x96, 0xed, 0x74, 0xb4, 0x45, 0xec, 0x53, 0x6d, 0x72, 0x53, 0x27, 0xb4,
	0x06, 0x13, 0xc7, 0x74, 0x38, 0x18, 0x4e, 0xa6, 0x61, 0xc3, 0xc4, 0x8d, 0x47, 0xc2, 0x49, 0xbd,
	0x5f, 0x15, 0x50, 0x5f, 0x03, 0x18, 0x2a, 0xdf, 0xe8, 0x59, 0xfe, 0x61, 0x62, 0x96, 0x87, 0xe5,
	0xe1, 0x29, 0x09, 0x34, 0xe0, 0xe4, 0xb0, 0x87, 0x91, 0x17, 0xe2, 0xee, 0x81, 0xb0, 0xb8, 0xca,
	0x01, 0x3d, 0x06, 0xbb, 0x2f, 0xb5, 0xed, 0x7e, 0xec, 0x25, 0x90, 0x6f, 0x5d, 0x0c, 0x99, 0xe9,
	0x04, 0x87, 0x71, 0x32, 0x77, 0xd0, 0x4f, 0x15, 0x82, 0x42, 0x19, 0x0f, 0xe3, 0x21, 0x0d, 0x25,
	0x62, 0xfd, 0x3e, 0x54, 0x73, 0x81, 0x6f, 0x74, 0xb6, 0x2f, 0xc1, 0x3e, 0xc0, 0xf1, 0x11, 0xf6,
	0xbc, 0x9d, 0xe0, 0x38, 0x14, 0xa1, 0xfd, 0xd8, 0x4b, 0x42, 0xfb, 0xb1, 0x67, 0x56, 0x2e, 0x64,
	0x2a, 0x8b, 0x99, 0xc1, 0x71, 0xe7, 0x84, 0x0e, 0x48, 0xfb, 0x38, 0x8c, 0x7d, 0xcc, 0x35, 0xb4,
	0x19, 0xad, 0x7d, 0x24, 0x95, 0xce, 0x21, 0xcc, 0xb4, 0xba, 0x5d, 0x5d, 0x44, 0xdc, 0xf9, 0x9c,
	0xd9, 0xbf, 0x52, 0xd2, 0xab, 0x06, 0x4c, 0xd0, 0xe0, 0x38, 0x4c, 0xba, 0x54, 0xcb, 0x74, 0xc9,
	0x80, 0xe8, 0x2a, 0x37, 0xe7, 0x47, 0x2b, 0x9b, 0x97, 0xa1, 0x67, 0x50, 0x8e, 0x70, 0xe7, 0x14,
	0xf7, 0x88, 0x6a, 0xb7, 0x7a, 0x8b, 0x77, 0xb2, 0x7f, 0x60, 0x66, 0x44, 0x63, 0x4f, 0xb9, 0x0f,
	0x5b, 0x6e, 0x47, 0x43, 0x4d, 0xfd, 0x01, 0xcc, 0xe6, 0x1d, 0xde, 0xa8, 0xb5, 0x4f, 0xa0, 0xe2,
	0xea, 0xff, 0xf5, 0x0d, 0x8f, 0x92, 0x80, 0x8b, 0xbf, 0xbb, 0x7e, 0x40, 0xcf, 0xfa, 0xa4, 0x6d,
	0x50, 0x3e, 0x28, 0xd5, 0x33, 0x41, 0xfc, 0xf3, 0x30, 0x85, 0x23, 0xda, 0x16, 0x25, 0x54, 0xba,
	0x49, 0x1c, 0xd1, 0x4f, 0xc9, 0xb9, 0xd3, 0x84, 0xea, 0x46, 0x4c, 0x30, 0x27, 0x2a, 0x93, 0x68,
	0xe3, 0x7f, 0x25, 0x73, 0x6e, 0x43, 0xd5, 0x25, 0x83, 0xf0, 0xd4, 0x88, 0x31, 0xf2, 0x5b, 0x99,
	0xfc, 0xab, 0x00, 0xca, 0x4b, 0x52, 0xd3, 0x3b, 0x50, 0xee, 0x48, 0x49, 0xa6, 0x56, 0x9d, 0x2c,
	0xb9, 0xb6, 0xd2, 0x3d, 0x93, 0x73, 0x5c, 0x85, 0x19, 0xe1, 0x9a, 0xa6, 0x76, 0xbe, 0x82, 0xaa,
	0x18, 0xd9, 0xfd, 0xbe, 0xef, 0xe3, 0xf8, 0x5c, 0x3e, 0xa6, 0x91, 0x6b, 0x46, 0x0e, 0x7a, 0xe1,
	0xb5, 0x3e, 0xdc, 0x00, 0xa0, 0xac, 0x1d, 0xc5, 0xc4, 0xa7, 0x7d, 0x5f, 0x3e, 0xab, 0x69, 0xb7,
	0x44, 0xd9, 0x9e, 0x52, 0x38, 0x5b, 0xe9, 0x4a, 0xc3, 0x74, 0x3d, 0xd4, 0xcc, 0x32, 0xd0, 0xc2,
	0x6b, 0x44, 0x6a, 0x00, 0x4b, 0xb8, 0x68, 0x0e, 0x50, 0x2e, 0x8d, 0x4b, 0xce, 0x9a, 0xdf, 0x95,
	0x44, 0xdf, 0xd4, 0xbd, 0xed, 0x93, 0x78, 0x40, 0x3b, 0x04, 0xbd, 0x0f, 0xc5, 0x6d, 0xc2, 0x51,
	0x4a, 0xab, 0x84, 0x2b, 0x6a, 0x3b, 0xeb, 0x13, 0xc6, 0xeb, 0xb6, 0x41, 0x59, 0xe8, 0x01, 0xc0,
	0x36, 0xe1, 0xc9, 0xea, 0xb3, 0x90, 0x8f, 0x50, 0x64, 0xa8, 0x03, 0x2f, 0xe0, 0x49, 0x74, 0x1f,
	0xa6, 0x34, 0x27, 0xa0, 0xf9, 0x11, 0xe4, 0x56, 0x1f, 0x61, 0x60, 0xce, 0x18, 0x7a, 0x02, 0x95,
	0xe1, 0x1b, 0x97, 0xb7, 0x50, 0x1f, 0x39, 0x00, 0x67, 0xf5, 0xd1, 0x36, 0x91, 0xeb, 0x13, 0x40,
	0x1b, 0x27, 0x38, 0xe8, 0x11, 0x73, 0xcd, 0x42, 0x6f, 0x6b, 0xd0, 0xcf, 0xb1, 0x47, 0xbb, 0x62,
	0xef, 0xd2, 0x87, 0xa9, 0xa6, 0x3b, 0x19, 0x8b, 0xc2, 0x80, 0x11, 0x67, 0x0c, 0xed, 0xc3, 0x95,
	0x6d, 0xc2, 0x77, 0x31, 0x27, 0x8c, 0xeb, 0xff, 0x20, 0x86, 0x96, 0x86, 0x2d, 0xc9, 0x5a, 0x92,
	0x44, 0xd7, 0x8d, 0xae, 0x0c, 0x6d, 0x69, 0xd2, 0x8f, 0x61, 0x72, 0x9f, 0x08, 0x8a, 0x41, 0x73,
	0xda, 0x51, 0x89, 0x49, 0xf8, 0xd5, 0x9c, 0xd6, 0x08, 0x2c, 0x89, 0x27, 0x2b, 0xef, 0x1b, 0xcd,
	0x6b, 0xaf, 0x54, 0x93, 0x3f, 0x86, 0x30, 0xec, 0x70, 0xe2, 0xdf, 0xb5, 0xd0, 0x0e, 0xa0, 0xd4,
	0xed, 0x73, 0xca, 0x4f, 0x0e, 0x08, 0xe3, 0x97, 0x64, 0xa8, 0xe5, 0x32, 0xa4, 0x21, 0x77, 0x2d,
	0xf4, 0x10, 0xec, 0x96, 0x68, 0xaf, 0x5e, 0xc4, 0x47, 0x3c, 0xa8, 0x85, 0xcb, 0x96, 0x6e, 0x44,
	0x60, 0x3a, 0xdd, 0x1e, 0x6b, 0xa3, 0x76, 0xa2, 0xfa, 0xe8, 0x55, 0xc2, 0x79, 0xef, 0xc5, 0xef,
	0x7f, 0xbf, 0x2c, 0x2c, 0x3a, 0xd7, 0xe4, 0x27, 0x83, 0xf1, 0xf9, 0xb1, 0x9a, 0xec, 0x43, 0xf7,
	0xac, 0xdb, 0x28, 0x80, 0x8a, 0x9c, 0xf0, 0x74, 0xed, 0x40, 0x0b, 0x17, 0x16, 0xd3, 0xfb, 0x4d,
	0xae, 0xa0, 0x69, 0x75, 0xde, 0x95, 0x05, 0x6f, 0xa0, 0xeb, 0xa3, 0x0a, 0x8a, 0xec, 0xdb, 0x60,
	0x1b, 0x5b, 0x05, 0xba, 0x9e, 0xc5, 0x9f, 0x59, 0x77, 0xea, 0x97, 0x18, 0x19, 0x12, 0x8b, 0x96,
	0xc1, 0x95, 0x79, 0xd8, 0x59, 0x1a, 0xcd, 0xa5, 0xca, 0x11, 0xf6, 0x63, 0x28, 0x9b, 0x14, 0x8a,
	0x2e, 0x73, 0xbe, 0x3c, 0xd3, 0x43, 0xb0, 0x87, 0x7c, 0xc9, 0x72, 0x43, 0x99, 0x61, 0xd2, 0xdc,
	0x74, 0x0f, 0x69, 0xb9, 0xf9, 0xd2, 0x52, 0xdf, 0x0e, 0x7b, 0x71, 0x38, 0xa0, 0x5d, 0x12, 0x8b,
	0x85, 0x7e, 0x9f, 0x06, 0x3d, 0x8f, 0xfc, 0xbf, 0x87, 0x94, 0xe7, 0xe7, 0x4d, 0x28, 0xb6, 0x3c,
	0x0f, 0x2d, 0x5d, 0xf4, 0xda, 0x0c, 0x46, 0xbc, 0xf8, 0x39, 0x26, 0x0e, 0x0f, 0xd7, 0x7f, 0x7d,
	0xb5, 0x68, 0xfd, 0xf6, 0x6a, 0xd1, 0xfa, 0xf3, 0xd5, 0xa2, 0xf5, 0xfd, 0x5f, 0x8b, 0x63, 0x80,
	0x3a, 0xa1, 0xaf, 0x43, 0x1a, 0xbd, 0x38, 0xea, 0x34, 0x06, 0xcd, 0x3d, 0xeb, 0x8b, 0xf4, 0x8b,
	0x76, 0x75, 0xd0, 0xfc, 0xa9, 0x50, 0xfc, 0xec, 0x60, 0xff, 0x68, 0x52, 0x7e, 0xa2, 0x7e, 0xf8,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa6, 0xad, 0x32, 0x5c, 0x03, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistryServiceClient is the client API for RegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryServiceClient interface {
	// Get returns game
	Get(ctx context.Context, in *otsimopb.GetGameRequest, opts ...grpc.CallOption) (*otsimopb.Game, error)
	// GetRelease returns GameRelease by given game id and version
	GetRelease(ctx context.Context, in *otsimopb.GetGameReleaseRequest, opts ...grpc.CallOption) (*otsimopb.GameRelease, error)
	// Publish tries to create a new GameRelease by given manifest
	Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishRes, error)
	AddTarballInfo(ctx context.Context, in *AddTarballReq, opts ...grpc.CallOption) (*AddTarballRes, error)
	// ChangeReleaseState changes state of a release, If user is admin than s/he
	// can change from WAITING to REJECTED or VALIDATED, developers can change to
	// any except VALIDATED
	ChangeReleaseState(ctx context.Context, in *otsimopb.ValidateRequest, opts ...grpc.CallOption) (*otsimopb.Response, error)
	// GetLatestVersions returns latest versions of given game ids
	GetLatestVersions(ctx context.Context, in *otsimopb.GetLatestVersionsRequest, opts ...grpc.CallOption) (*otsimopb.GameVersionsResponse, error)
	// Search does search
	Search(ctx context.Context, in *otsimopb.SearchRequest, opts ...grpc.CallOption) (*otsimopb.SearchResponse, error)
	// ListGames returns all games with normal versions
	ListGames(ctx context.Context, in *otsimopb.ListGamesRequest, opts ...grpc.CallOption) (RegistryService_ListGamesClient, error)
	// ListGames returns all games with testing versions
	ListGamesWithTests(ctx context.Context, in *otsimopb.ListGamesRequest, opts ...grpc.CallOption) (RegistryService_ListGamesWithTestsClient, error)
	// AllReleases returns all releases of the given game
	AllReleases(ctx context.Context, in *otsimopb.GetGameRequest, opts ...grpc.CallOption) (*AllGameReleases, error)
	// Category adds, updates and removes a game category
	Category(ctx context.Context, in *CategoryReq, opts ...grpc.CallOption) (*GameCategory, error)
	// ListCategories returns all the categories
	ListCategories(ctx context.Context, in *CategoryListReq, opts ...grpc.CallOption) (*CategoryList, error)
	// GetAllGames returns all Game Releases with production state
	GetAllGames(ctx context.Context, in *GetAllGamesReq, opts ...grpc.CallOption) (*GetAllGamesRes, error)
	// Create a distribution service client
	CreateClient(ctx context.Context, in *CreateClientReq, opts ...grpc.CallOption) (*RegistryClient, error)
	// Revoke a client by it's api_key or name
	RevokeClient(ctx context.Context, in *RegistryClient, opts ...grpc.CallOption) (*RegistryClient, error)
	// List the client names
	ListClients(ctx context.Context, in *ListClientReq, opts ...grpc.CallOption) (*ClientList, error)
}

type registryServiceClient struct {
	cc *grpc.ClientConn
}

func NewRegistryServiceClient(cc *grpc.ClientConn) RegistryServiceClient {
	return &registryServiceClient{cc}
}

func (c *registryServiceClient) Get(ctx context.Context, in *otsimopb.GetGameRequest, opts ...grpc.CallOption) (*otsimopb.Game, error) {
	out := new(otsimopb.Game)
	err := c.cc.Invoke(ctx, "/otsimopb.v2.RegistryService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetRelease(ctx context.Context, in *otsimopb.GetGameReleaseRequest, opts ...grpc.CallOption) (*otsimopb.GameRelease, error) {
	out := new(otsimopb.GameRelease)
	err := c.cc.Invoke(ctx, "/otsimopb.v2.RegistryService/GetRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishRes, error) {
	out := new(PublishRes)
	err := c.cc.Invoke(ctx, "/otsimopb.v2.RegistryService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) AddTarballInfo(ctx context.Context, in *AddTarballReq, opts ...grpc.CallOption) (*AddTarballRes, error) {
	out := new(AddTarballRes)
	err := c.cc.Invoke(ctx, "/otsimopb.v2.RegistryService/AddTarballInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) ChangeReleaseState(ctx context.Context, in *otsimopb.ValidateRequest, opts ...grpc.CallOption) (*otsimopb.Response, error) {
	out := new(otsimopb.Response)
	err := c.cc.Invoke(ctx, "/otsimopb.v2.RegistryService/ChangeReleaseState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetLatestVersions(ctx context.Context, in *otsimopb.GetLatestVersionsRequest, opts ...grpc.CallOption) (*otsimopb.GameVersionsResponse, error) {
	out := new(otsimopb.GameVersionsResponse)
	err := c.cc.Invoke(ctx, "/otsimopb.v2.RegistryService/GetLatestVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) Search(ctx context.Context, in *otsimopb.SearchRequest, opts ...grpc.CallOption) (*otsimopb.SearchResponse, error) {
	out := new(otsimopb.SearchResponse)
	err := c.cc.Invoke(ctx, "/otsimopb.v2.RegistryService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) ListGames(ctx context.Context, in *otsimopb.ListGamesRequest, opts ...grpc.CallOption) (RegistryService_ListGamesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RegistryService_serviceDesc.Streams[0], "/otsimopb.v2.RegistryService/ListGames", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryServiceListGamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RegistryService_ListGamesClient interface {
	Recv() (*otsimopb.ListItem, error)
	grpc.ClientStream
}

type registryServiceListGamesClient struct {
	grpc.ClientStream
}

func (x *registryServiceListGamesClient) Recv() (*otsimopb.ListItem, error) {
	m := new(otsimopb.ListItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registryServiceClient) ListGamesWithTests(ctx context.Context, in *otsimopb.ListGamesRequest, opts ...grpc.CallOption) (RegistryService_ListGamesWithTestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RegistryService_serviceDesc.Streams[1], "/otsimopb.v2.RegistryService/ListGamesWithTests", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryServiceListGamesWithTestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RegistryService_ListGamesWithTestsClient interface {
	Recv() (*otsimopb.ListItemWithTests, error)
	grpc.ClientStream
}

type registryServiceListGamesWithTestsClient struct {
	grpc.ClientStream
}

func (x *registryServiceListGamesWithTestsClient) Recv() (*otsimopb.ListItemWithTests, error) {
	m := new(otsimopb.ListItemWithTests)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registryServiceClient) AllReleases(ctx context.Context, in *otsimopb.GetGameRequest, opts ...grpc.CallOption) (*AllGameReleases, error) {
	out := new(AllGameReleases)
	err := c.cc.Invoke(ctx, "/otsimopb.v2.RegistryService/AllReleases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) Category(ctx context.Context, in *CategoryReq, opts ...grpc.CallOption) (*GameCategory, error) {
	out := new(GameCategory)
	err := c.cc.Invoke(ctx, "/otsimopb.v2.RegistryService/Category", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) ListCategories(ctx context.Context, in *CategoryListReq, opts ...grpc.CallOption) (*CategoryList, error) {
	out := new(CategoryList)
	err := c.cc.Invoke(ctx, "/otsimopb.v2.RegistryService/ListCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetAllGames(ctx context.Context, in *GetAllGamesReq, opts ...grpc.CallOption) (*GetAllGamesRes, error) {
	out := new(GetAllGamesRes)
	err := c.cc.Invoke(ctx, "/otsimopb.v2.RegistryService/GetAllGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) CreateClient(ctx context.Context, in *CreateClientReq, opts ...grpc.CallOption) (*RegistryClient, error) {
	out := new(RegistryClient)
	err := c.cc.Invoke(ctx, "/otsimopb.v2.RegistryService/CreateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) RevokeClient(ctx context.Context, in *RegistryClient, opts ...grpc.CallOption) (*RegistryClient, error) {
	out := new(RegistryClient)
	err := c.cc.Invoke(ctx, "/otsimopb.v2.RegistryService/RevokeClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) ListClients(ctx context.Context, in *ListClientReq, opts ...grpc.CallOption) (*ClientList, error) {
	out := new(ClientList)
	err := c.cc.Invoke(ctx, "/otsimopb.v2.RegistryService/ListClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServiceServer is the server API for RegistryService service.
type RegistryServiceServer interface {
	// Get returns game
	Get(context.Context, *otsimopb.GetGameRequest) (*otsimopb.Game, error)
	// GetRelease returns GameRelease by given game id and version
	GetRelease(context.Context, *otsimopb.GetGameReleaseRequest) (*otsimopb.GameRelease, error)
	// Publish tries to create a new GameRelease by given manifest
	Publish(context.Context, *PublishReq) (*PublishRes, error)
	AddTarballInfo(context.Context, *AddTarballReq) (*AddTarballRes, error)
	// ChangeReleaseState changes state of a release, If user is admin than s/he
	// can change from WAITING to REJECTED or VALIDATED, developers can change to
	// any except VALIDATED
	ChangeReleaseState(context.Context, *otsimopb.ValidateRequest) (*otsimopb.Response, error)
	// GetLatestVersions returns latest versions of given game ids
	GetLatestVersions(context.Context, *otsimopb.GetLatestVersionsRequest) (*otsimopb.GameVersionsResponse, error)
	// Search does search
	Search(context.Context, *otsimopb.SearchRequest) (*otsimopb.SearchResponse, error)
	// ListGames returns all games with normal versions
	ListGames(*otsimopb.ListGamesRequest, RegistryService_ListGamesServer) error
	// ListGames returns all games with testing versions
	ListGamesWithTests(*otsimopb.ListGamesRequest, RegistryService_ListGamesWithTestsServer) error
	// AllReleases returns all releases of the given game
	AllReleases(context.Context, *otsimopb.GetGameRequest) (*AllGameReleases, error)
	// Category adds, updates and removes a game category
	Category(context.Context, *CategoryReq) (*GameCategory, error)
	// ListCategories returns all the categories
	ListCategories(context.Context, *CategoryListReq) (*CategoryList, error)
	// GetAllGames returns all Game Releases with production state
	GetAllGames(context.Context, *GetAllGamesReq) (*GetAllGamesRes, error)
	// Create a distribution service client
	CreateClient(context.Context, *CreateClientReq) (*RegistryClient, error)
	// Revoke a client by it's api_key or name
	RevokeClient(context.Context, *RegistryClient) (*RegistryClient, error)
	// List the client names
	ListClients(context.Context, *ListClientReq) (*ClientList, error)
}

// UnimplementedRegistryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRegistryServiceServer struct {
}

func (*UnimplementedRegistryServiceServer) Get(ctx context.Context, req *otsimopb.GetGameRequest) (*otsimopb.Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedRegistryServiceServer) GetRelease(ctx context.Context, req *otsimopb.GetGameReleaseRequest) (*otsimopb.GameRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelease not implemented")
}
func (*UnimplementedRegistryServiceServer) Publish(ctx context.Context, req *PublishReq) (*PublishRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedRegistryServiceServer) AddTarballInfo(ctx context.Context, req *AddTarballReq) (*AddTarballRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTarballInfo not implemented")
}
func (*UnimplementedRegistryServiceServer) ChangeReleaseState(ctx context.Context, req *otsimopb.ValidateRequest) (*otsimopb.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeReleaseState not implemented")
}
func (*UnimplementedRegistryServiceServer) GetLatestVersions(ctx context.Context, req *otsimopb.GetLatestVersionsRequest) (*otsimopb.GameVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestVersions not implemented")
}
func (*UnimplementedRegistryServiceServer) Search(ctx context.Context, req *otsimopb.SearchRequest) (*otsimopb.SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedRegistryServiceServer) ListGames(req *otsimopb.ListGamesRequest, srv RegistryService_ListGamesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListGames not implemented")
}
func (*UnimplementedRegistryServiceServer) ListGamesWithTests(req *otsimopb.ListGamesRequest, srv RegistryService_ListGamesWithTestsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListGamesWithTests not implemented")
}
func (*UnimplementedRegistryServiceServer) AllReleases(ctx context.Context, req *otsimopb.GetGameRequest) (*AllGameReleases, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllReleases not implemented")
}
func (*UnimplementedRegistryServiceServer) Category(ctx context.Context, req *CategoryReq) (*GameCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Category not implemented")
}
func (*UnimplementedRegistryServiceServer) ListCategories(ctx context.Context, req *CategoryListReq) (*CategoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (*UnimplementedRegistryServiceServer) GetAllGames(ctx context.Context, req *GetAllGamesReq) (*GetAllGamesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGames not implemented")
}
func (*UnimplementedRegistryServiceServer) CreateClient(ctx context.Context, req *CreateClientReq) (*RegistryClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (*UnimplementedRegistryServiceServer) RevokeClient(ctx context.Context, req *RegistryClient) (*RegistryClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeClient not implemented")
}
func (*UnimplementedRegistryServiceServer) ListClients(ctx context.Context, req *ListClientReq) (*ClientList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClients not implemented")
}

func RegisterRegistryServiceServer(s *grpc.Server, srv RegistryServiceServer) {
	s.RegisterService(&_RegistryService_serviceDesc, srv)
}

func _RegistryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(otsimopb.GetGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimopb.v2.RegistryService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).Get(ctx, req.(*otsimopb.GetGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(otsimopb.GetGameReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimopb.v2.RegistryService/GetRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetRelease(ctx, req.(*otsimopb.GetGameReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimopb.v2.RegistryService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).Publish(ctx, req.(*PublishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_AddTarballInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTarballReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).AddTarballInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimopb.v2.RegistryService/AddTarballInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).AddTarballInfo(ctx, req.(*AddTarballReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_ChangeReleaseState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(otsimopb.ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).ChangeReleaseState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimopb.v2.RegistryService/ChangeReleaseState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).ChangeReleaseState(ctx, req.(*otsimopb.ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetLatestVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(otsimopb.GetLatestVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetLatestVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimopb.v2.RegistryService/GetLatestVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetLatestVersions(ctx, req.(*otsimopb.GetLatestVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(otsimopb.SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimopb.v2.RegistryService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).Search(ctx, req.(*otsimopb.SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_ListGames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(otsimopb.ListGamesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistryServiceServer).ListGames(m, &registryServiceListGamesServer{stream})
}

type RegistryService_ListGamesServer interface {
	Send(*otsimopb.ListItem) error
	grpc.ServerStream
}

type registryServiceListGamesServer struct {
	grpc.ServerStream
}

func (x *registryServiceListGamesServer) Send(m *otsimopb.ListItem) error {
	return x.ServerStream.SendMsg(m)
}

func _RegistryService_ListGamesWithTests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(otsimopb.ListGamesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistryServiceServer).ListGamesWithTests(m, &registryServiceListGamesWithTestsServer{stream})
}

type RegistryService_ListGamesWithTestsServer interface {
	Send(*otsimopb.ListItemWithTests) error
	grpc.ServerStream
}

type registryServiceListGamesWithTestsServer struct {
	grpc.ServerStream
}

func (x *registryServiceListGamesWithTestsServer) Send(m *otsimopb.ListItemWithTests) error {
	return x.ServerStream.SendMsg(m)
}

func _RegistryService_AllReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(otsimopb.GetGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).AllReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimopb.v2.RegistryService/AllReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).AllReleases(ctx, req.(*otsimopb.GetGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_Category_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).Category(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimopb.v2.RegistryService/Category",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).Category(ctx, req.(*CategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimopb.v2.RegistryService/ListCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).ListCategories(ctx, req.(*CategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetAllGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGamesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetAllGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimopb.v2.RegistryService/GetAllGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetAllGames(ctx, req.(*GetAllGamesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimopb.v2.RegistryService/CreateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).CreateClient(ctx, req.(*CreateClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_RevokeClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).RevokeClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimopb.v2.RegistryService/RevokeClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).RevokeClient(ctx, req.(*RegistryClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimopb.v2.RegistryService/ListClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).ListClients(ctx, req.(*ListClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegistryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "otsimopb.v2.RegistryService",
	HandlerType: (*RegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RegistryService_Get_Handler,
		},
		{
			MethodName: "GetRelease",
			Handler:    _RegistryService_GetRelease_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _RegistryService_Publish_Handler,
		},
		{
			MethodName: "AddTarballInfo",
			Handler:    _RegistryService_AddTarballInfo_Handler,
		},
		{
			MethodName: "ChangeReleaseState",
			Handler:    _RegistryService_ChangeReleaseState_Handler,
		},
		{
			MethodName: "GetLatestVersions",
			Handler:    _RegistryService_GetLatestVersions_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _RegistryService_Search_Handler,
		},
		{
			MethodName: "AllReleases",
			Handler:    _RegistryService_AllReleases_Handler,
		},
		{
			MethodName: "Category",
			Handler:    _RegistryService_Category_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _RegistryService_ListCategories_Handler,
		},
		{
			MethodName: "GetAllGames",
			Handler:    _RegistryService_GetAllGames_Handler,
		},
		{
			MethodName: "CreateClient",
			Handler:    _RegistryService_CreateClient_Handler,
		},
		{
			MethodName: "RevokeClient",
			Handler:    _RegistryService_RevokeClient_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _RegistryService_ListClients_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListGames",
			Handler:       _RegistryService_ListGames_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListGamesWithTests",
			Handler:       _RegistryService_ListGamesWithTests_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v2/registry_v2.proto",
}

// GameProviderClient is the client API for GameProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameProviderClient interface {
	Single(ctx context.Context, in *otsimopb.GetGameRequest, opts ...grpc.CallOption) (*GameSummaryInfo, error)
	All(ctx context.Context, in *AllGamesSummaryReq, opts ...grpc.CallOption) (*AllGamesSummary, error)
}

type gameProviderClient struct {
	cc *grpc.ClientConn
}

func NewGameProviderClient(cc *grpc.ClientConn) GameProviderClient {
	return &gameProviderClient{cc}
}

func (c *gameProviderClient) Single(ctx context.Context, in *otsimopb.GetGameRequest, opts ...grpc.CallOption) (*GameSummaryInfo, error) {
	out := new(GameSummaryInfo)
	err := c.cc.Invoke(ctx, "/otsimopb.v2.GameProvider/Single", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameProviderClient) All(ctx context.Context, in *AllGamesSummaryReq, opts ...grpc.CallOption) (*AllGamesSummary, error) {
	out := new(AllGamesSummary)
	err := c.cc.Invoke(ctx, "/otsimopb.v2.GameProvider/All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameProviderServer is the server API for GameProvider service.
type GameProviderServer interface {
	Single(context.Context, *otsimopb.GetGameRequest) (*GameSummaryInfo, error)
	All(context.Context, *AllGamesSummaryReq) (*AllGamesSummary, error)
}

// UnimplementedGameProviderServer can be embedded to have forward compatible implementations.
type UnimplementedGameProviderServer struct {
}

func (*UnimplementedGameProviderServer) Single(ctx context.Context, req *otsimopb.GetGameRequest) (*GameSummaryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Single not implemented")
}
func (*UnimplementedGameProviderServer) All(ctx context.Context, req *AllGamesSummaryReq) (*AllGamesSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}

func RegisterGameProviderServer(s *grpc.Server, srv GameProviderServer) {
	s.RegisterService(&_GameProvider_serviceDesc, srv)
}

func _GameProvider_Single_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(otsimopb.GetGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameProviderServer).Single(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimopb.v2.GameProvider/Single",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameProviderServer).Single(ctx, req.(*otsimopb.GetGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameProvider_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllGamesSummaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameProviderServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimopb.v2.GameProvider/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameProviderServer).All(ctx, req.(*AllGamesSummaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GameProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "otsimopb.v2.GameProvider",
	HandlerType: (*GameProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Single",
			Handler:    _GameProvider_Single_Handler,
		},
		{
			MethodName: "All",
			Handler:    _GameProvider_All_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v2/registry_v2.proto",
}

func (m *AllGameReleases) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllGameReleases) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GameId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.GameId)))
		i += copy(dAtA[i:], m.GameId)
	}
	if len(m.Releases) > 0 {
		for _, msg := range m.Releases {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRegistryV2(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllGameReleases_MiniRelease) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllGameReleases_MiniRelease) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.ReleasedAt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(m.ReleasedAt))
	}
	if m.ReleaseState != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(m.ReleaseState))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameCategoryLocale) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameCategoryLocale) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Language) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.Language)))
		i += copy(dAtA[i:], m.Language)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if len(m.Color) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.Color)))
		i += copy(dAtA[i:], m.Color)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameCategory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameCategory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Locales) > 0 {
		for _, msg := range m.Locales {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRegistryV2(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Revision != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(m.Revision))
	}
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			dAtA[i] = 0x22
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovRegistryV2(uint64(len(k))) + 1 + len(v) + sovRegistryV2(uint64(len(v)))
			i = encodeVarintRegistryV2(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRegistryV2(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintRegistryV2(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.DefaultLocale) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.DefaultLocale)))
		i += copy(dAtA[i:], m.DefaultLocale)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CategoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CategoryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Task != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(m.Task))
	}
	if m.Category != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(m.Category.Size()))
		n1, err1 := m.Category.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.KnownRevision != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(m.KnownRevision))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CategoryListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CategoryListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CategoryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CategoryList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Categories) > 0 {
		for _, msg := range m.Categories {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRegistryV2(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAllGamesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllGamesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Games) > 0 {
		for _, msg := range m.Games {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRegistryV2(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Language) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.Language)))
		i += copy(dAtA[i:], m.Language)
	}
	if len(m.Capabilities) > 0 {
		for _, s := range m.Capabilities {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAllGamesRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllGamesRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Games) > 0 {
		for _, msg := range m.Games {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRegistryV2(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PublishReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Manifest != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(m.Manifest.Size()))
		n2, err2 := m.Manifest.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if len(m.Files) > 0 {
		for k, _ := range m.Files {
			dAtA[i] = 0x12
			i++
			v := m.Files[k]
			mapSize := 1 + len(k) + sovRegistryV2(uint64(len(k))) + 1 + len(v) + sovRegistryV2(uint64(len(v)))
			i = encodeVarintRegistryV2(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRegistryV2(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintRegistryV2(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PublishRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(m.Token.Size()))
		n3, err3 := m.Token.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if len(m.UploadUrls) > 0 {
		for k, _ := range m.UploadUrls {
			dAtA[i] = 0x12
			i++
			v := m.UploadUrls[k]
			mapSize := 1 + len(k) + sovRegistryV2(uint64(len(k))) + 1 + len(v) + sovRegistryV2(uint64(len(v)))
			i = encodeVarintRegistryV2(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRegistryV2(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintRegistryV2(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Storage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.Storage)))
		i += copy(dAtA[i:], m.Storage)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TarballInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TarballInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Storage) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.Storage)))
		i += copy(dAtA[i:], m.Storage)
	}
	if len(m.ArchiveFormat) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.ArchiveFormat)))
		i += copy(dAtA[i:], m.ArchiveFormat)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddTarballReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTarballReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Infos) > 0 {
		for _, msg := range m.Infos {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRegistryV2(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddTarballRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTarballRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PackageUrls) > 0 {
		for k, _ := range m.PackageUrls {
			dAtA[i] = 0xa
			i++
			v := m.PackageUrls[k]
			mapSize := 1 + len(k) + sovRegistryV2(uint64(len(k))) + 1 + len(v) + sovRegistryV2(uint64(len(v)))
			i = encodeVarintRegistryV2(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRegistryV2(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintRegistryV2(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RegistryClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryClient) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UniqueName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.UniqueName)))
		i += copy(dAtA[i:], m.UniqueName)
	}
	if len(m.ApiKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.ApiKey)))
		i += copy(dAtA[i:], m.ApiKey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateClientReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateClientReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UniqueName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.UniqueName)))
		i += copy(dAtA[i:], m.UniqueName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RevokeClientReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevokeClientReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.ApiKey)))
		i += copy(dAtA[i:], m.ApiKey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClientList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClientNames) > 0 {
		for _, s := range m.ClientNames {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListClientReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListClientReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameSummaryInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameSummaryInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GameId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.GameId)))
		i += copy(dAtA[i:], m.GameId)
	}
	if len(m.UniqueName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegistryV2(dAtA, i, uint64(len(m.UniqueName)))
		i += copy(dAtA[i:], m.UniqueName)
	}
	if m.IsPremium {
		dAtA[i] = 0x18
		i++
		if m.IsPremium {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllGamesSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllGamesSummary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Games) > 0 {
		for _, msg := range m.Games {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRegistryV2(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllGamesSummaryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllGamesSummaryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRegistryV2(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AllGameReleases) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameId)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	if len(m.Releases) > 0 {
		for _, e := range m.Releases {
			l = e.Size()
			n += 1 + l + sovRegistryV2(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllGameReleases_MiniRelease) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	if m.ReleasedAt != 0 {
		n += 1 + sovRegistryV2(uint64(m.ReleasedAt))
	}
	if m.ReleaseState != 0 {
		n += 1 + sovRegistryV2(uint64(m.ReleaseState))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameCategoryLocale) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameCategory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	if len(m.Locales) > 0 {
		for _, e := range m.Locales {
			l = e.Size()
			n += 1 + l + sovRegistryV2(uint64(l))
		}
	}
	if m.Revision != 0 {
		n += 1 + sovRegistryV2(uint64(m.Revision))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRegistryV2(uint64(len(k))) + 1 + len(v) + sovRegistryV2(uint64(len(v)))
			n += mapEntrySize + 1 + sovRegistryV2(uint64(mapEntrySize))
		}
	}
	l = len(m.DefaultLocale)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CategoryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != 0 {
		n += 1 + sovRegistryV2(uint64(m.Task))
	}
	if m.Category != nil {
		l = m.Category.Size()
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	if m.KnownRevision != 0 {
		n += 1 + sovRegistryV2(uint64(m.KnownRevision))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CategoryListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CategoryList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Categories) > 0 {
		for _, e := range m.Categories {
			l = e.Size()
			n += 1 + l + sovRegistryV2(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllGamesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Games) > 0 {
		for _, e := range m.Games {
			l = e.Size()
			n += 1 + l + sovRegistryV2(uint64(l))
		}
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	if len(m.Capabilities) > 0 {
		for _, s := range m.Capabilities {
			l = len(s)
			n += 1 + l + sovRegistryV2(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllGamesRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Games) > 0 {
		for _, e := range m.Games {
			l = e.Size()
			n += 1 + l + sovRegistryV2(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Manifest != nil {
		l = m.Manifest.Size()
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	if len(m.Files) > 0 {
		for k, v := range m.Files {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRegistryV2(uint64(len(k))) + 1 + len(v) + sovRegistryV2(uint64(len(v)))
			n += mapEntrySize + 1 + sovRegistryV2(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	if len(m.UploadUrls) > 0 {
		for k, v := range m.UploadUrls {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRegistryV2(uint64(len(k))) + 1 + len(v) + sovRegistryV2(uint64(len(v)))
			n += mapEntrySize + 1 + sovRegistryV2(uint64(mapEntrySize))
		}
	}
	l = len(m.Storage)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TarballInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	l = len(m.Storage)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	l = len(m.ArchiveFormat)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddTarballReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovRegistryV2(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddTarballRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PackageUrls) > 0 {
		for k, v := range m.PackageUrls {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRegistryV2(uint64(len(k))) + 1 + len(v) + sovRegistryV2(uint64(len(v)))
			n += mapEntrySize + 1 + sovRegistryV2(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegistryClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqueName)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateClientReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqueName)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RevokeClientReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClientNames) > 0 {
		for _, s := range m.ClientNames {
			l = len(s)
			n += 1 + l + sovRegistryV2(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListClientReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameSummaryInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameId)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	l = len(m.UniqueName)
	if l > 0 {
		n += 1 + l + sovRegistryV2(uint64(l))
	}
	if m.IsPremium {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllGamesSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Games) > 0 {
		for _, e := range m.Games {
			l = e.Size()
			n += 1 + l + sovRegistryV2(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllGamesSummaryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRegistryV2(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRegistryV2(x uint64) (n int) {
	return sovRegistryV2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllGameReleases) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllGameReleases: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllGameReleases: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Releases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Releases = append(m.Releases, &AllGameReleases_MiniRelease{})
			if err := m.Releases[len(m.Releases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllGameReleases_MiniRelease) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MiniRelease: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MiniRelease: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleasedAt", wireType)
			}
			m.ReleasedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReleasedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseState", wireType)
			}
			m.ReleaseState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReleaseState |= otsimopb.ReleaseState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameCategoryLocale) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameCategoryLocale: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameCategoryLocale: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameCategory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameCategory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameCategory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locales", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locales = append(m.Locales, &GameCategoryLocale{})
			if err := m.Locales[len(m.Locales)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegistryV2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistryV2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRegistryV2
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRegistryV2
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistryV2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRegistryV2
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRegistryV2
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRegistryV2(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRegistryV2
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLocale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultLocale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CategoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CategoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CategoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			m.Task = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Task |= CategoryReq_Task(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Category == nil {
				m.Category = &GameCategory{}
			}
			if err := m.Category.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KnownRevision", wireType)
			}
			m.KnownRevision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KnownRevision |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CategoryListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CategoryListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CategoryListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CategoryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CategoryList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CategoryList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Categories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Categories = append(m.Categories, &GameCategory{})
			if err := m.Categories[len(m.Categories)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllGamesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllGamesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllGamesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Games", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Games = append(m.Games, &otsimopb.GameAndVersion{})
			if err := m.Games[len(m.Games)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Capabilities = append(m.Capabilities, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllGamesRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllGamesRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllGamesRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Games", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Games = append(m.Games, &otsimopb.GameRelease{})
			if err := m.Games[len(m.Games)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manifest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Manifest == nil {
				m.Manifest = &otsimopb.GameManifest{}
			}
			if err := m.Manifest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Files == nil {
				m.Files = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegistryV2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistryV2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRegistryV2
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRegistryV2
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistryV2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRegistryV2
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRegistryV2
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRegistryV2(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRegistryV2
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Files[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &otsimopb.UploadToken{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadUrls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UploadUrls == nil {
				m.UploadUrls = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegistryV2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistryV2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRegistryV2
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRegistryV2
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistryV2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRegistryV2
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRegistryV2
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRegistryV2(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRegistryV2
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.UploadUrls[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Storage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TarballInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TarballInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TarballInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Storage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArchiveFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArchiveFormat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTarballReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTarballReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTarballReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &TarballInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTarballRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTarballRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTarballRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageUrls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PackageUrls == nil {
				m.PackageUrls = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegistryV2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistryV2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRegistryV2
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRegistryV2
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistryV2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRegistryV2
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRegistryV2
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRegistryV2(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRegistryV2
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PackageUrls[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistryClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateClientReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateClientReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateClientReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevokeClientReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevokeClientReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevokeClientReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientNames = append(m.ClientNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListClientReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListClientReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListClientReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameSummaryInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameSummaryInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameSummaryInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPremium", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPremium = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllGamesSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllGamesSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllGamesSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Games", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistryV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Games = append(m.Games, &GameSummaryInfo{})
			if err := m.Games[len(m.Games)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllGamesSummaryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllGamesSummaryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllGamesSummaryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegistryV2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegistryV2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistryV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRegistryV2
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthRegistryV2
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRegistryV2
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRegistryV2(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthRegistryV2
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRegistryV2 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegistryV2   = fmt.Errorf("proto: integer overflow")
)

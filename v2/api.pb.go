// Code generated by protoc-gen-gogo.
// source: v2/api.proto
// DO NOT EDIT!

/*
	Package v2 is a generated protocol buffer package.

	It is generated from these files:
		v2/api.proto
		v2/registry_v2.proto

	It has these top-level messages:
		StatisticsReq
		StatisticsRes
		SetLabelReq
		RemoveLabelReq
		UpdateLabelsRes
		UsersSelectReq
		UsersSelectRes
		UpdateProfileReq
		UpdateChildReq
		AllGameReleases
		GameCategoryLocale
		GameCategory
		CategoryReq
		CategoryListReq
		CategoryList
		GetAllGamesReq
		GetAllGamesRes
		PublishReq
		PublishRes
		TarballInfo
		AddTarballReq
		AddTarballRes
*/
package v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import apipb1 "github.com/otsimo/otsimopb"
import apipb "github.com/otsimo/otsimopb"
import google_protobuf1 "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatisticsReq struct {
	TimeFrom int64 `protobuf:"varint,1,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"`
	TimeTo   int64 `protobuf:"varint,2,opt,name=time_to,json=timeTo,proto3" json:"time_to,omitempty"`
}

func (m *StatisticsReq) Reset()                    { *m = StatisticsReq{} }
func (m *StatisticsReq) String() string            { return proto.CompactTextString(m) }
func (*StatisticsReq) ProtoMessage()               {}
func (*StatisticsReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

func (m *StatisticsReq) GetTimeFrom() int64 {
	if m != nil {
		return m.TimeFrom
	}
	return 0
}

func (m *StatisticsReq) GetTimeTo() int64 {
	if m != nil {
		return m.TimeTo
	}
	return 0
}

type StatisticsRes struct {
	Statistics map[string]int64 `protobuf:"bytes,1,rep,name=statistics" json:"statistics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *StatisticsRes) Reset()                    { *m = StatisticsRes{} }
func (m *StatisticsRes) String() string            { return proto.CompactTextString(m) }
func (*StatisticsRes) ProtoMessage()               {}
func (*StatisticsRes) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *StatisticsRes) GetStatistics() map[string]int64 {
	if m != nil {
		return m.Statistics
	}
	return nil
}

type SetLabelReq struct {
	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsChild bool   `protobuf:"varint,2,opt,name=is_child,json=isChild,proto3" json:"is_child,omitempty"`
	Key     string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value   string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SetLabelReq) Reset()                    { *m = SetLabelReq{} }
func (m *SetLabelReq) String() string            { return proto.CompactTextString(m) }
func (*SetLabelReq) ProtoMessage()               {}
func (*SetLabelReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

func (m *SetLabelReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SetLabelReq) GetIsChild() bool {
	if m != nil {
		return m.IsChild
	}
	return false
}

func (m *SetLabelReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SetLabelReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type RemoveLabelReq struct {
	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsChild bool   `protobuf:"varint,2,opt,name=is_child,json=isChild,proto3" json:"is_child,omitempty"`
	Key     string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *RemoveLabelReq) Reset()                    { *m = RemoveLabelReq{} }
func (m *RemoveLabelReq) String() string            { return proto.CompactTextString(m) }
func (*RemoveLabelReq) ProtoMessage()               {}
func (*RemoveLabelReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

func (m *RemoveLabelReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *RemoveLabelReq) GetIsChild() bool {
	if m != nil {
		return m.IsChild
	}
	return false
}

func (m *RemoveLabelReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type UpdateLabelsRes struct {
	UserId string            `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *UpdateLabelsRes) Reset()                    { *m = UpdateLabelsRes{} }
func (m *UpdateLabelsRes) String() string            { return proto.CompactTextString(m) }
func (*UpdateLabelsRes) ProtoMessage()               {}
func (*UpdateLabelsRes) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

func (m *UpdateLabelsRes) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateLabelsRes) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type UsersSelectReq struct {
	IsChild  bool                  `protobuf:"varint,1,opt,name=is_child,json=isChild,proto3" json:"is_child,omitempty"`
	Selector *apipb1.LabelSelector `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
}

func (m *UsersSelectReq) Reset()                    { *m = UsersSelectReq{} }
func (m *UsersSelectReq) String() string            { return proto.CompactTextString(m) }
func (*UsersSelectReq) ProtoMessage()               {}
func (*UsersSelectReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{5} }

func (m *UsersSelectReq) GetIsChild() bool {
	if m != nil {
		return m.IsChild
	}
	return false
}

func (m *UsersSelectReq) GetSelector() *apipb1.LabelSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

type UsersSelectRes struct {
	Profiles []*apipb.Profile `protobuf:"bytes,1,rep,name=profiles" json:"profiles,omitempty"`
	Children []*apipb.Child   `protobuf:"bytes,2,rep,name=children" json:"children,omitempty"`
}

func (m *UsersSelectRes) Reset()                    { *m = UsersSelectRes{} }
func (m *UsersSelectRes) String() string            { return proto.CompactTextString(m) }
func (*UsersSelectRes) ProtoMessage()               {}
func (*UsersSelectRes) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{6} }

func (m *UsersSelectRes) GetProfiles() []*apipb.Profile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func (m *UsersSelectRes) GetChildren() []*apipb.Child {
	if m != nil {
		return m.Children
	}
	return nil
}

type UpdateProfileReq struct {
	Fields  *google_protobuf1.FieldMask `protobuf:"bytes,1,opt,name=fields" json:"fields,omitempty"`
	Profile *apipb.Profile              `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
}

func (m *UpdateProfileReq) Reset()                    { *m = UpdateProfileReq{} }
func (m *UpdateProfileReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateProfileReq) ProtoMessage()               {}
func (*UpdateProfileReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{7} }

func (m *UpdateProfileReq) GetFields() *google_protobuf1.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *UpdateProfileReq) GetProfile() *apipb.Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type UpdateChildReq struct {
	Fields *google_protobuf1.FieldMask `protobuf:"bytes,1,opt,name=fields" json:"fields,omitempty"`
	Child  *apipb.Child                `protobuf:"bytes,2,opt,name=child" json:"child,omitempty"`
}

func (m *UpdateChildReq) Reset()                    { *m = UpdateChildReq{} }
func (m *UpdateChildReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateChildReq) ProtoMessage()               {}
func (*UpdateChildReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{8} }

func (m *UpdateChildReq) GetFields() *google_protobuf1.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *UpdateChildReq) GetChild() *apipb.Child {
	if m != nil {
		return m.Child
	}
	return nil
}

func init() {
	proto.RegisterType((*StatisticsReq)(nil), "otsimo.v2.StatisticsReq")
	proto.RegisterType((*StatisticsRes)(nil), "otsimo.v2.StatisticsRes")
	proto.RegisterType((*SetLabelReq)(nil), "otsimo.v2.SetLabelReq")
	proto.RegisterType((*RemoveLabelReq)(nil), "otsimo.v2.RemoveLabelReq")
	proto.RegisterType((*UpdateLabelsRes)(nil), "otsimo.v2.UpdateLabelsRes")
	proto.RegisterType((*UsersSelectReq)(nil), "otsimo.v2.UsersSelectReq")
	proto.RegisterType((*UsersSelectRes)(nil), "otsimo.v2.UsersSelectRes")
	proto.RegisterType((*UpdateProfileReq)(nil), "otsimo.v2.UpdateProfileReq")
	proto.RegisterType((*UpdateChildReq)(nil), "otsimo.v2.UpdateChildReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApiService service

type ApiServiceClient interface {
	// Profile
	AddProfile(ctx context.Context, in *apipb.Profile, opts ...grpc.CallOption) (*apipb.Profile, error)
	GetProfile(ctx context.Context, in *apipb1.GetProfileRequest, opts ...grpc.CallOption) (*apipb.Profile, error)
	// Child
	AddChild(ctx context.Context, in *apipb.Child, opts ...grpc.CallOption) (*apipb.Child, error)
	GetChild(ctx context.Context, in *apipb1.GetChildRequest, opts ...grpc.CallOption) (*apipb.Child, error)
	UpdateGameEntry(ctx context.Context, in *apipb1.GameEntryRequest, opts ...grpc.CallOption) (*apipb1.Response, error)
	ChangeActivation(ctx context.Context, in *apipb1.ChangeChildActivationRequest, opts ...grpc.CallOption) (*apipb1.Response, error)
	GetDisabledChildren(ctx context.Context, in *apipb1.GetChildrenFromProfileRequest, opts ...grpc.CallOption) (*apipb1.GetChildrenFromProfileResponse, error)
	SoundEnable(ctx context.Context, in *apipb1.SoundEnableRequest, opts ...grpc.CallOption) (*apipb1.Response, error)
	UpdateGameIndices(ctx context.Context, in *apipb1.UpdateIndecesRequest, opts ...grpc.CallOption) (*apipb.Child, error)
	Statistics(ctx context.Context, in *StatisticsReq, opts ...grpc.CallOption) (*StatisticsRes, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileReq, opts ...grpc.CallOption) (*apipb.Profile, error)
	UpdateChild(ctx context.Context, in *UpdateChildReq, opts ...grpc.CallOption) (*apipb.Child, error)
}

type apiServiceClient struct {
	cc *grpc.ClientConn
}

func NewApiServiceClient(cc *grpc.ClientConn) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) AddProfile(ctx context.Context, in *apipb.Profile, opts ...grpc.CallOption) (*apipb.Profile, error) {
	out := new(apipb.Profile)
	err := grpc.Invoke(ctx, "/otsimo.v2.ApiService/AddProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetProfile(ctx context.Context, in *apipb1.GetProfileRequest, opts ...grpc.CallOption) (*apipb.Profile, error) {
	out := new(apipb.Profile)
	err := grpc.Invoke(ctx, "/otsimo.v2.ApiService/GetProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AddChild(ctx context.Context, in *apipb.Child, opts ...grpc.CallOption) (*apipb.Child, error) {
	out := new(apipb.Child)
	err := grpc.Invoke(ctx, "/otsimo.v2.ApiService/AddChild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetChild(ctx context.Context, in *apipb1.GetChildRequest, opts ...grpc.CallOption) (*apipb.Child, error) {
	out := new(apipb.Child)
	err := grpc.Invoke(ctx, "/otsimo.v2.ApiService/GetChild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateGameEntry(ctx context.Context, in *apipb1.GameEntryRequest, opts ...grpc.CallOption) (*apipb1.Response, error) {
	out := new(apipb1.Response)
	err := grpc.Invoke(ctx, "/otsimo.v2.ApiService/UpdateGameEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ChangeActivation(ctx context.Context, in *apipb1.ChangeChildActivationRequest, opts ...grpc.CallOption) (*apipb1.Response, error) {
	out := new(apipb1.Response)
	err := grpc.Invoke(ctx, "/otsimo.v2.ApiService/ChangeActivation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDisabledChildren(ctx context.Context, in *apipb1.GetChildrenFromProfileRequest, opts ...grpc.CallOption) (*apipb1.GetChildrenFromProfileResponse, error) {
	out := new(apipb1.GetChildrenFromProfileResponse)
	err := grpc.Invoke(ctx, "/otsimo.v2.ApiService/GetDisabledChildren", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SoundEnable(ctx context.Context, in *apipb1.SoundEnableRequest, opts ...grpc.CallOption) (*apipb1.Response, error) {
	out := new(apipb1.Response)
	err := grpc.Invoke(ctx, "/otsimo.v2.ApiService/SoundEnable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateGameIndices(ctx context.Context, in *apipb1.UpdateIndecesRequest, opts ...grpc.CallOption) (*apipb.Child, error) {
	out := new(apipb.Child)
	err := grpc.Invoke(ctx, "/otsimo.v2.ApiService/UpdateGameIndices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Statistics(ctx context.Context, in *StatisticsReq, opts ...grpc.CallOption) (*StatisticsRes, error) {
	out := new(StatisticsRes)
	err := grpc.Invoke(ctx, "/otsimo.v2.ApiService/Statistics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileReq, opts ...grpc.CallOption) (*apipb.Profile, error) {
	out := new(apipb.Profile)
	err := grpc.Invoke(ctx, "/otsimo.v2.ApiService/UpdateProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateChild(ctx context.Context, in *UpdateChildReq, opts ...grpc.CallOption) (*apipb.Child, error) {
	out := new(apipb.Child)
	err := grpc.Invoke(ctx, "/otsimo.v2.ApiService/UpdateChild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApiService service

type ApiServiceServer interface {
	// Profile
	AddProfile(context.Context, *apipb.Profile) (*apipb.Profile, error)
	GetProfile(context.Context, *apipb1.GetProfileRequest) (*apipb.Profile, error)
	// Child
	AddChild(context.Context, *apipb.Child) (*apipb.Child, error)
	GetChild(context.Context, *apipb1.GetChildRequest) (*apipb.Child, error)
	UpdateGameEntry(context.Context, *apipb1.GameEntryRequest) (*apipb1.Response, error)
	ChangeActivation(context.Context, *apipb1.ChangeChildActivationRequest) (*apipb1.Response, error)
	GetDisabledChildren(context.Context, *apipb1.GetChildrenFromProfileRequest) (*apipb1.GetChildrenFromProfileResponse, error)
	SoundEnable(context.Context, *apipb1.SoundEnableRequest) (*apipb1.Response, error)
	UpdateGameIndices(context.Context, *apipb1.UpdateIndecesRequest) (*apipb.Child, error)
	Statistics(context.Context, *StatisticsReq) (*StatisticsRes, error)
	UpdateProfile(context.Context, *UpdateProfileReq) (*apipb.Profile, error)
	UpdateChild(context.Context, *UpdateChildReq) (*apipb.Child, error)
}

func RegisterApiServiceServer(s *grpc.Server, srv ApiServiceServer) {
	s.RegisterService(&_ApiService_serviceDesc, srv)
}

func _ApiService_AddProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(apipb.Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AddProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/AddProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AddProfile(ctx, req.(*apipb.Profile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(apipb1.GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetProfile(ctx, req.(*apipb1.GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AddChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(apipb.Child)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AddChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/AddChild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AddChild(ctx, req.(*apipb.Child))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(apipb1.GetChildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/GetChild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetChild(ctx, req.(*apipb1.GetChildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateGameEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(apipb1.GameEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateGameEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/UpdateGameEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateGameEntry(ctx, req.(*apipb1.GameEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ChangeActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(apipb1.ChangeChildActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ChangeActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/ChangeActivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ChangeActivation(ctx, req.(*apipb1.ChangeChildActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDisabledChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(apipb1.GetChildrenFromProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDisabledChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/GetDisabledChildren",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDisabledChildren(ctx, req.(*apipb1.GetChildrenFromProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SoundEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(apipb1.SoundEnableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SoundEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/SoundEnable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SoundEnable(ctx, req.(*apipb1.SoundEnableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateGameIndices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(apipb1.UpdateIndecesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateGameIndices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/UpdateGameIndices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateGameIndices(ctx, req.(*apipb1.UpdateIndecesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Statistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Statistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/Statistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Statistics(ctx, req.(*StatisticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateProfile(ctx, req.(*UpdateProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/UpdateChild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateChild(ctx, req.(*UpdateChildReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "otsimo.v2.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProfile",
			Handler:    _ApiService_AddProfile_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _ApiService_GetProfile_Handler,
		},
		{
			MethodName: "AddChild",
			Handler:    _ApiService_AddChild_Handler,
		},
		{
			MethodName: "GetChild",
			Handler:    _ApiService_GetChild_Handler,
		},
		{
			MethodName: "UpdateGameEntry",
			Handler:    _ApiService_UpdateGameEntry_Handler,
		},
		{
			MethodName: "ChangeActivation",
			Handler:    _ApiService_ChangeActivation_Handler,
		},
		{
			MethodName: "GetDisabledChildren",
			Handler:    _ApiService_GetDisabledChildren_Handler,
		},
		{
			MethodName: "SoundEnable",
			Handler:    _ApiService_SoundEnable_Handler,
		},
		{
			MethodName: "UpdateGameIndices",
			Handler:    _ApiService_UpdateGameIndices_Handler,
		},
		{
			MethodName: "Statistics",
			Handler:    _ApiService_Statistics_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _ApiService_UpdateProfile_Handler,
		},
		{
			MethodName: "UpdateChild",
			Handler:    _ApiService_UpdateChild_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v2/api.proto",
}

// Client API for LabelApiService service

type LabelApiServiceClient interface {
	SetLabel(ctx context.Context, in *SetLabelReq, opts ...grpc.CallOption) (*UpdateLabelsRes, error)
	RemoveLabel(ctx context.Context, in *RemoveLabelReq, opts ...grpc.CallOption) (*UpdateLabelsRes, error)
	Select(ctx context.Context, in *UsersSelectReq, opts ...grpc.CallOption) (*UsersSelectRes, error)
}

type labelApiServiceClient struct {
	cc *grpc.ClientConn
}

func NewLabelApiServiceClient(cc *grpc.ClientConn) LabelApiServiceClient {
	return &labelApiServiceClient{cc}
}

func (c *labelApiServiceClient) SetLabel(ctx context.Context, in *SetLabelReq, opts ...grpc.CallOption) (*UpdateLabelsRes, error) {
	out := new(UpdateLabelsRes)
	err := grpc.Invoke(ctx, "/otsimo.v2.LabelApiService/SetLabel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelApiServiceClient) RemoveLabel(ctx context.Context, in *RemoveLabelReq, opts ...grpc.CallOption) (*UpdateLabelsRes, error) {
	out := new(UpdateLabelsRes)
	err := grpc.Invoke(ctx, "/otsimo.v2.LabelApiService/RemoveLabel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelApiServiceClient) Select(ctx context.Context, in *UsersSelectReq, opts ...grpc.CallOption) (*UsersSelectRes, error) {
	out := new(UsersSelectRes)
	err := grpc.Invoke(ctx, "/otsimo.v2.LabelApiService/Select", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LabelApiService service

type LabelApiServiceServer interface {
	SetLabel(context.Context, *SetLabelReq) (*UpdateLabelsRes, error)
	RemoveLabel(context.Context, *RemoveLabelReq) (*UpdateLabelsRes, error)
	Select(context.Context, *UsersSelectReq) (*UsersSelectRes, error)
}

func RegisterLabelApiServiceServer(s *grpc.Server, srv LabelApiServiceServer) {
	s.RegisterService(&_LabelApiService_serviceDesc, srv)
}

func _LabelApiService_SetLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelApiServiceServer).SetLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.LabelApiService/SetLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelApiServiceServer).SetLabel(ctx, req.(*SetLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelApiService_RemoveLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelApiServiceServer).RemoveLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.LabelApiService/RemoveLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelApiServiceServer).RemoveLabel(ctx, req.(*RemoveLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelApiService_Select_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersSelectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelApiServiceServer).Select(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.LabelApiService/Select",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelApiServiceServer).Select(ctx, req.(*UsersSelectReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _LabelApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "otsimo.v2.LabelApiService",
	HandlerType: (*LabelApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLabel",
			Handler:    _LabelApiService_SetLabel_Handler,
		},
		{
			MethodName: "RemoveLabel",
			Handler:    _LabelApiService_RemoveLabel_Handler,
		},
		{
			MethodName: "Select",
			Handler:    _LabelApiService_Select_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v2/api.proto",
}

func (m *StatisticsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatisticsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TimeFrom != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TimeFrom))
	}
	if m.TimeTo != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TimeTo))
	}
	return i, nil
}

func (m *StatisticsRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatisticsRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Statistics) > 0 {
		for k, _ := range m.Statistics {
			dAtA[i] = 0xa
			i++
			v := m.Statistics[k]
			mapSize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + sovApi(uint64(v))
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintApi(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *SetLabelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetLabelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if m.IsChild {
		dAtA[i] = 0x10
		i++
		if m.IsChild {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *RemoveLabelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveLabelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if m.IsChild {
		dAtA[i] = 0x10
		i++
		if m.IsChild {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *UpdateLabelsRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateLabelsRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			dAtA[i] = 0x12
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *UsersSelectReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsersSelectReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsChild {
		dAtA[i] = 0x8
		i++
		if m.IsChild {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Selector != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Selector.Size()))
		n1, err := m.Selector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *UsersSelectRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsersSelectRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Profiles) > 0 {
		for _, msg := range m.Profiles {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Children) > 0 {
		for _, msg := range m.Children {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateProfileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateProfileReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fields != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Fields.Size()))
		n2, err := m.Fields.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Profile != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Profile.Size()))
		n3, err := m.Profile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *UpdateChildReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChildReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fields != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Fields.Size()))
		n4, err := m.Fields.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Child != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Child.Size()))
		n5, err := m.Child.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeFixed64Api(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Api(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StatisticsReq) Size() (n int) {
	var l int
	_ = l
	if m.TimeFrom != 0 {
		n += 1 + sovApi(uint64(m.TimeFrom))
	}
	if m.TimeTo != 0 {
		n += 1 + sovApi(uint64(m.TimeTo))
	}
	return n
}

func (m *StatisticsRes) Size() (n int) {
	var l int
	_ = l
	if len(m.Statistics) > 0 {
		for k, v := range m.Statistics {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SetLabelReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsChild {
		n += 2
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RemoveLabelReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsChild {
		n += 2
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *UpdateLabelsRes) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *UsersSelectReq) Size() (n int) {
	var l int
	_ = l
	if m.IsChild {
		n += 2
	}
	if m.Selector != nil {
		l = m.Selector.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *UsersSelectRes) Size() (n int) {
	var l int
	_ = l
	if len(m.Profiles) > 0 {
		for _, e := range m.Profiles {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *UpdateProfileReq) Size() (n int) {
	var l int
	_ = l
	if m.Fields != nil {
		l = m.Fields.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *UpdateChildReq) Size() (n int) {
	var l int
	_ = l
	if m.Fields != nil {
		l = m.Fields.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StatisticsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatisticsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatisticsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeFrom", wireType)
			}
			m.TimeFrom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeFrom |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeTo", wireType)
			}
			m.TimeTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeTo |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatisticsRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatisticsRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatisticsRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthApi
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Statistics == nil {
				m.Statistics = make(map[string]int64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvalue |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Statistics[mapkey] = mapvalue
			} else {
				var mapvalue int64
				m.Statistics[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetLabelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetLabelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetLabelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsChild", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsChild = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveLabelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveLabelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveLabelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsChild", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsChild = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateLabelsRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateLabelsRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateLabelsRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthApi
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthApi
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Labels[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Labels[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsersSelectReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsersSelectReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsersSelectReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsChild", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsChild = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Selector == nil {
				m.Selector = &apipb1.LabelSelector{}
			}
			if err := m.Selector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsersSelectRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsersSelectRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsersSelectRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profiles = append(m.Profiles, &apipb.Profile{})
			if err := m.Profiles[len(m.Profiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &apipb.Child{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateProfileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateProfileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateProfileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = &google_protobuf1.FieldMask{}
			}
			if err := m.Fields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &apipb.Profile{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChildReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChildReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChildReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = &google_protobuf1.FieldMask{}
			}
			if err := m.Fields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &apipb.Child{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v2/api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 835 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x55, 0x5f, 0x6f, 0xe3, 0x44,
	0x10, 0xc7, 0x0d, 0x4d, 0xdd, 0x71, 0x2f, 0x2d, 0xcb, 0xe9, 0x9a, 0xba, 0x52, 0x55, 0x19, 0x38,
	0x45, 0x08, 0xb9, 0xc8, 0x48, 0x88, 0xf2, 0xa7, 0xa2, 0xdc, 0xf5, 0x7a, 0x95, 0x40, 0x9c, 0x9c,
	0x3b, 0x1e, 0x90, 0x50, 0xe5, 0xd8, 0x93, 0x74, 0x55, 0xdb, 0xeb, 0x78, 0x37, 0x96, 0xee, 0x9b,
	0xdc, 0x33, 0x12, 0xdf, 0x85, 0x47, 0xde, 0x78, 0x45, 0xe5, 0x8d, 0x4f, 0x81, 0xbc, 0xbb, 0x8e,
	0xff, 0xb4, 0xa1, 0x12, 0xba, 0x37, 0xcf, 0xfc, 0x66, 0x7e, 0xf3, 0x9b, 0xc9, 0xec, 0x04, 0xb6,
	0x0a, 0xef, 0x28, 0xc8, 0xa8, 0x9b, 0xe5, 0x4c, 0x30, 0xb2, 0xc9, 0x04, 0xa7, 0x09, 0x73, 0x0b,
	0xcf, 0x1e, 0x24, 0xc8, 0x79, 0x30, 0x43, 0xae, 0x20, 0x7b, 0x2b, 0x61, 0x11, 0xc6, 0x95, 0x75,
	0x38, 0x63, 0x6c, 0x16, 0xe3, 0x91, 0xb4, 0x26, 0x8b, 0xe9, 0xd1, 0x94, 0x62, 0x1c, 0x5d, 0x26,
	0x01, 0xbf, 0x56, 0x11, 0xce, 0x19, 0x3c, 0x18, 0x8b, 0x40, 0x50, 0x2e, 0x68, 0xc8, 0x7d, 0x9c,
	0x93, 0x7d, 0xd8, 0x14, 0x34, 0xc1, 0xcb, 0x69, 0xce, 0x92, 0xa1, 0x71, 0x68, 0x8c, 0x7a, 0xbe,
	0x59, 0x3a, 0x9e, 0xe5, 0x2c, 0x21, 0xbb, 0xb0, 0x21, 0x41, 0xc1, 0x86, 0x6b, 0x12, 0xea, 0x97,
	0xe6, 0x4b, 0xe6, 0xbc, 0x31, 0xda, 0x3c, 0x9c, 0x3c, 0x07, 0xe0, 0x4b, 0xc7, 0xd0, 0x38, 0xec,
	0x8d, 0x2c, 0x6f, 0xe4, 0x2e, 0x85, 0xbb, 0xad, 0xe8, 0x86, 0x75, 0x96, 0x8a, 0xfc, 0xb5, 0xdf,
	0xc8, 0xb5, 0xbf, 0x81, 0xed, 0x0e, 0x4c, 0x76, 0xa0, 0x77, 0x8d, 0xaf, 0xa5, 0xbc, 0x4d, 0xbf,
	0xfc, 0x24, 0x0f, 0x61, 0xbd, 0x08, 0xe2, 0x05, 0x6a, 0x5d, 0xca, 0xf8, 0x72, 0xed, 0x0b, 0xc3,
	0xa1, 0x60, 0x8d, 0x51, 0x7c, 0x1f, 0x4c, 0x30, 0x2e, 0xfb, 0xdb, 0x85, 0x8d, 0x05, 0xc7, 0xfc,
	0x92, 0x46, 0x3a, 0xbd, 0x5f, 0x9a, 0x17, 0x11, 0xd9, 0x03, 0x93, 0xf2, 0xcb, 0xf0, 0x8a, 0xc6,
	0x91, 0x24, 0x31, 0xfd, 0x0d, 0xca, 0x9f, 0x94, 0x66, 0x55, 0xae, 0x77, 0x47, 0xb9, 0x77, 0xa5,
	0x4f, 0x19, 0xce, 0x4f, 0x30, 0xf0, 0x31, 0x61, 0x05, 0xbe, 0xdd, 0x6a, 0xce, 0x6f, 0x06, 0x6c,
	0xbf, 0xca, 0xa2, 0x40, 0x28, 0x62, 0x39, 0xdf, 0x95, 0xcc, 0x27, 0xd0, 0x8f, 0x65, 0xd4, 0x70,
	0x4d, 0x0e, 0xfd, 0x71, 0x63, 0xe8, 0x1d, 0x12, 0x57, 0x7d, 0xa9, 0x91, 0xeb, 0x2c, 0xfb, 0x18,
	0xac, 0x86, 0xfb, 0xbe, 0x51, 0x6f, 0x36, 0x47, 0xfd, 0x0b, 0x0c, 0x5e, 0x71, 0xcc, 0xf9, 0x18,
	0x63, 0x0c, 0x45, 0xd9, 0x7f, 0xb3, 0x4d, 0xa3, 0xdd, 0xe6, 0xa7, 0x60, 0x72, 0x19, 0xc7, 0x72,
	0xc9, 0x64, 0x79, 0x0f, 0xdd, 0x20, 0xa3, 0xd9, 0x44, 0xa9, 0x1a, 0x6b, 0xcc, 0x5f, 0x46, 0x39,
	0xd3, 0x0e, 0x3d, 0x27, 0x1f, 0x83, 0x99, 0xe5, 0x6c, 0x4a, 0x63, 0xac, 0x56, 0x6c, 0xa0, 0x39,
	0x5e, 0x28, 0xb7, 0xbf, 0xc4, 0xc9, 0x08, 0x4c, 0xa9, 0x23, 0xc7, 0x54, 0x4f, 0x66, 0x4b, 0xc7,
	0x4a, 0x3d, 0xfe, 0x12, 0x75, 0x32, 0xd8, 0x51, 0x83, 0xaa, 0x48, 0x70, 0x4e, 0x3c, 0xe8, 0xcb,
	0xb7, 0xc3, 0x65, 0x1b, 0x96, 0x67, 0xbb, 0xea, 0x69, 0xb9, 0xd5, 0xd3, 0x72, 0x9f, 0x95, 0xf0,
	0x0f, 0x01, 0xbf, 0xf6, 0x75, 0x24, 0x19, 0xc1, 0x86, 0xae, 0xae, 0x1b, 0xec, 0x8a, 0xab, 0x60,
	0xe7, 0x0a, 0x06, 0xaa, 0xa2, 0x92, 0xf2, 0x3f, 0xeb, 0x39, 0xb0, 0x5e, 0x2f, 0x54, 0xb7, 0x3d,
	0x05, 0x79, 0xff, 0xac, 0x03, 0x9c, 0x66, 0x74, 0x8c, 0x79, 0x41, 0x43, 0x24, 0x9f, 0x00, 0x9c,
	0x46, 0x91, 0xd6, 0x43, 0x3a, 0xfa, 0xec, 0x8e, 0x4d, 0x3e, 0x07, 0x38, 0x47, 0x51, 0x59, 0x43,
	0x8d, 0xd6, 0x2e, 0x1f, 0xe7, 0x0b, 0xe4, 0xe2, 0x56, 0xde, 0x63, 0x30, 0x4f, 0xa3, 0x48, 0xfd,
	0xec, 0x2d, 0x55, 0x76, 0xcb, 0x2a, 0x57, 0xe2, 0x1c, 0x85, 0xfa, 0x7e, 0x54, 0xb3, 0x57, 0x43,
	0x91, 0xdc, 0xed, 0x8c, 0xaf, 0xaa, 0x87, 0x71, 0x1e, 0x24, 0xa8, 0x16, 0x76, 0xb7, 0x4a, 0xac,
	0x3c, 0x55, 0xe6, 0xb6, 0x06, 0x7c, 0xe4, 0x19, 0x4b, 0x39, 0x92, 0xe7, 0xb0, 0xf3, 0xe4, 0x2a,
	0x48, 0x67, 0x78, 0x1a, 0x0a, 0x5a, 0x04, 0x82, 0xb2, 0x94, 0x7c, 0xb0, 0xa4, 0x2f, 0x01, 0x59,
	0xa4, 0x46, 0x57, 0x32, 0x4d, 0xe0, 0xfd, 0x73, 0x14, 0x4f, 0x29, 0x0f, 0x26, 0x31, 0xaa, 0x46,
	0x73, 0x4c, 0xc9, 0x87, 0x9d, 0x1e, 0x72, 0x4c, 0xcb, 0x33, 0xda, 0x99, 0xd6, 0x47, 0xf7, 0x44,
	0xe9, 0x1a, 0xc7, 0x60, 0x8d, 0xd9, 0x22, 0x8d, 0xce, 0xd2, 0xb2, 0x08, 0xd9, 0xd3, 0x59, 0x0d,
	0xdf, 0x4a, 0x79, 0x27, 0xf0, 0x5e, 0x3d, 0xa5, 0x8b, 0x34, 0xa2, 0x21, 0x72, 0xb2, 0xaf, 0xa3,
	0x14, 0x72, 0x91, 0x46, 0x18, 0x22, 0xbf, 0x7b, 0xca, 0xdf, 0x02, 0xd4, 0x17, 0x98, 0x0c, 0x57,
	0x5c, 0xf1, 0xb9, 0xbd, 0x0a, 0xe1, 0xe4, 0x6b, 0x78, 0xd0, 0x7a, 0x52, 0x64, 0xff, 0xd6, 0x55,
	0xaa, 0xa7, 0x72, 0xc7, 0xde, 0x59, 0x8d, 0xe7, 0x41, 0xf6, 0x6e, 0xe5, 0x56, 0x1b, 0xd2, 0xd6,
	0xed, 0xfd, 0x69, 0xc0, 0xb6, 0x3c, 0x26, 0x8d, 0x8d, 0x3f, 0x01, 0xb3, 0xfa, 0x3b, 0x20, 0x8f,
	0x9a, 0x7a, 0xeb, 0xff, 0x08, 0xdb, 0x5e, 0x7d, 0x32, 0xc9, 0x53, 0xb0, 0x1a, 0x37, 0xbe, 0xa5,
	0xa5, 0x7d, 0xfb, 0xff, 0x93, 0xe5, 0x04, 0xfa, 0xea, 0x8a, 0xb5, 0x9b, 0x69, 0x1d, 0x4f, 0x7b,
	0x25, 0xc4, 0xbf, 0x3b, 0xfe, 0xfd, 0xe6, 0xc0, 0xf8, 0xe3, 0xe6, 0xc0, 0xf8, 0xeb, 0xe6, 0xc0,
	0x78, 0xf3, 0xf7, 0xc1, 0x3b, 0x40, 0x42, 0x96, 0x54, 0xf1, 0xb3, 0x3c, 0x0b, 0xdd, 0xc2, 0x7b,
	0x61, 0xfc, 0x6c, 0x29, 0x4f, 0x36, 0x39, 0x2a, 0xbc, 0x5f, 0xd7, 0x7a, 0x3f, 0xbe, 0x1c, 0x4f,
	0xfa, 0xf2, 0x82, 0x7c, 0xf6, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf9, 0xea, 0x4f, 0x73, 0x53,
	0x08, 0x00, 0x00,
}

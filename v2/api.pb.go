// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v2/api.proto

package v2

import (
	context "context"
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	otsimopb "github.com/otsimo/otsimopb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatisticsReq struct {
	TimeFrom             int64    `protobuf:"varint,1,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"`
	TimeTo               int64    `protobuf:"varint,2,opt,name=time_to,json=timeTo,proto3" json:"time_to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatisticsReq) Reset()         { *m = StatisticsReq{} }
func (m *StatisticsReq) String() string { return proto.CompactTextString(m) }
func (*StatisticsReq) ProtoMessage()    {}
func (*StatisticsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd8ffb46251f1c6, []int{0}
}
func (m *StatisticsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatisticsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatisticsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatisticsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatisticsReq.Merge(m, src)
}
func (m *StatisticsReq) XXX_Size() int {
	return m.Size()
}
func (m *StatisticsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StatisticsReq.DiscardUnknown(m)
}

var xxx_messageInfo_StatisticsReq proto.InternalMessageInfo

func (m *StatisticsReq) GetTimeFrom() int64 {
	if m != nil {
		return m.TimeFrom
	}
	return 0
}

func (m *StatisticsReq) GetTimeTo() int64 {
	if m != nil {
		return m.TimeTo
	}
	return 0
}

type StatisticsRes struct {
	Statistics           map[string]int64 `protobuf:"bytes,1,rep,name=statistics,proto3" json:"statistics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StatisticsRes) Reset()         { *m = StatisticsRes{} }
func (m *StatisticsRes) String() string { return proto.CompactTextString(m) }
func (*StatisticsRes) ProtoMessage()    {}
func (*StatisticsRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd8ffb46251f1c6, []int{1}
}
func (m *StatisticsRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatisticsRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatisticsRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatisticsRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatisticsRes.Merge(m, src)
}
func (m *StatisticsRes) XXX_Size() int {
	return m.Size()
}
func (m *StatisticsRes) XXX_DiscardUnknown() {
	xxx_messageInfo_StatisticsRes.DiscardUnknown(m)
}

var xxx_messageInfo_StatisticsRes proto.InternalMessageInfo

func (m *StatisticsRes) GetStatistics() map[string]int64 {
	if m != nil {
		return m.Statistics
	}
	return nil
}

type UpdateProfileReq struct {
	Fields               *types.FieldMask  `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Profile              *otsimopb.Profile `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateProfileReq) Reset()         { *m = UpdateProfileReq{} }
func (m *UpdateProfileReq) String() string { return proto.CompactTextString(m) }
func (*UpdateProfileReq) ProtoMessage()    {}
func (*UpdateProfileReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd8ffb46251f1c6, []int{2}
}
func (m *UpdateProfileReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateProfileReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateProfileReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateProfileReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProfileReq.Merge(m, src)
}
func (m *UpdateProfileReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateProfileReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProfileReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProfileReq proto.InternalMessageInfo

func (m *UpdateProfileReq) GetFields() *types.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *UpdateProfileReq) GetProfile() *otsimopb.Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type UpdateChildReq struct {
	Fields               *types.FieldMask `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Child                *otsimopb.Child  `protobuf:"bytes,2,opt,name=child,proto3" json:"child,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UpdateChildReq) Reset()         { *m = UpdateChildReq{} }
func (m *UpdateChildReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChildReq) ProtoMessage()    {}
func (*UpdateChildReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd8ffb46251f1c6, []int{3}
}
func (m *UpdateChildReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateChildReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateChildReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateChildReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateChildReq.Merge(m, src)
}
func (m *UpdateChildReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateChildReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateChildReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateChildReq proto.InternalMessageInfo

func (m *UpdateChildReq) GetFields() *types.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *UpdateChildReq) GetChild() *otsimopb.Child {
	if m != nil {
		return m.Child
	}
	return nil
}

type UpdateProgressReq struct {
	// number of stars earned by user
	StarsEarned int32 `protobuf:"varint,1,opt,name=stars_earned,json=starsEarned,proto3" json:"stars_earned,omitempty"`
	// put -1 to not update
	NewLevel int32 `protobuf:"varint,2,opt,name=new_level,json=newLevel,proto3" json:"new_level,omitempty"`
	// put -1 in order not to update
	LevelStarCount int32 `protobuf:"varint,3,opt,name=level_star_count,json=levelStarCount,proto3" json:"level_star_count,omitempty"`
	// Badges earned by user
	BadgesEarned         []*otsimopb.Badge `protobuf:"bytes,4,rep,name=badges_earned,json=badgesEarned,proto3" json:"badges_earned,omitempty"`
	ChildId              string            `protobuf:"bytes,5,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateProgressReq) Reset()         { *m = UpdateProgressReq{} }
func (m *UpdateProgressReq) String() string { return proto.CompactTextString(m) }
func (*UpdateProgressReq) ProtoMessage()    {}
func (*UpdateProgressReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd8ffb46251f1c6, []int{4}
}
func (m *UpdateProgressReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateProgressReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateProgressReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateProgressReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProgressReq.Merge(m, src)
}
func (m *UpdateProgressReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateProgressReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProgressReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProgressReq proto.InternalMessageInfo

func (m *UpdateProgressReq) GetStarsEarned() int32 {
	if m != nil {
		return m.StarsEarned
	}
	return 0
}

func (m *UpdateProgressReq) GetNewLevel() int32 {
	if m != nil {
		return m.NewLevel
	}
	return 0
}

func (m *UpdateProgressReq) GetLevelStarCount() int32 {
	if m != nil {
		return m.LevelStarCount
	}
	return 0
}

func (m *UpdateProgressReq) GetBadgesEarned() []*otsimopb.Badge {
	if m != nil {
		return m.BadgesEarned
	}
	return nil
}

func (m *UpdateProgressReq) GetChildId() string {
	if m != nil {
		return m.ChildId
	}
	return ""
}

type BatchUpdateChildrenReq struct {
	Fields               *types.FieldMask `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Child                *otsimopb.Child  `protobuf:"bytes,2,opt,name=child,proto3" json:"child,omitempty"`
	Ids                  []string         `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BatchUpdateChildrenReq) Reset()         { *m = BatchUpdateChildrenReq{} }
func (m *BatchUpdateChildrenReq) String() string { return proto.CompactTextString(m) }
func (*BatchUpdateChildrenReq) ProtoMessage()    {}
func (*BatchUpdateChildrenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd8ffb46251f1c6, []int{5}
}
func (m *BatchUpdateChildrenReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchUpdateChildrenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchUpdateChildrenReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchUpdateChildrenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchUpdateChildrenReq.Merge(m, src)
}
func (m *BatchUpdateChildrenReq) XXX_Size() int {
	return m.Size()
}
func (m *BatchUpdateChildrenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchUpdateChildrenReq.DiscardUnknown(m)
}

var xxx_messageInfo_BatchUpdateChildrenReq proto.InternalMessageInfo

func (m *BatchUpdateChildrenReq) GetFields() *types.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *BatchUpdateChildrenReq) GetChild() *otsimopb.Child {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *BatchUpdateChildrenReq) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type BatchUpdateChildrenRes struct {
	Child                []*otsimopb.Child `protobuf:"bytes,2,rep,name=child,proto3" json:"child,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BatchUpdateChildrenRes) Reset()         { *m = BatchUpdateChildrenRes{} }
func (m *BatchUpdateChildrenRes) String() string { return proto.CompactTextString(m) }
func (*BatchUpdateChildrenRes) ProtoMessage()    {}
func (*BatchUpdateChildrenRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd8ffb46251f1c6, []int{6}
}
func (m *BatchUpdateChildrenRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchUpdateChildrenRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchUpdateChildrenRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchUpdateChildrenRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchUpdateChildrenRes.Merge(m, src)
}
func (m *BatchUpdateChildrenRes) XXX_Size() int {
	return m.Size()
}
func (m *BatchUpdateChildrenRes) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchUpdateChildrenRes.DiscardUnknown(m)
}

var xxx_messageInfo_BatchUpdateChildrenRes proto.InternalMessageInfo

func (m *BatchUpdateChildrenRes) GetChild() []*otsimopb.Child {
	if m != nil {
		return m.Child
	}
	return nil
}

func init() {
	proto.RegisterType((*StatisticsReq)(nil), "otsimo.v2.StatisticsReq")
	proto.RegisterType((*StatisticsRes)(nil), "otsimo.v2.StatisticsRes")
	proto.RegisterMapType((map[string]int64)(nil), "otsimo.v2.StatisticsRes.StatisticsEntry")
	proto.RegisterType((*UpdateProfileReq)(nil), "otsimo.v2.UpdateProfileReq")
	proto.RegisterType((*UpdateChildReq)(nil), "otsimo.v2.UpdateChildReq")
	proto.RegisterType((*UpdateProgressReq)(nil), "otsimo.v2.UpdateProgressReq")
	proto.RegisterType((*BatchUpdateChildrenReq)(nil), "otsimo.v2.BatchUpdateChildrenReq")
	proto.RegisterType((*BatchUpdateChildrenRes)(nil), "otsimo.v2.BatchUpdateChildrenRes")
}

func init() { proto.RegisterFile("v2/api.proto", fileDescriptor_9dd8ffb46251f1c6) }

var fileDescriptor_9dd8ffb46251f1c6 = []byte{
	// 803 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x5f, 0x6f, 0xe3, 0x44,
	0x10, 0xc7, 0x0d, 0x69, 0xd3, 0x49, 0xda, 0x2b, 0x7b, 0xe8, 0xce, 0x75, 0x51, 0xd5, 0x33, 0x7f,
	0x94, 0x07, 0xe4, 0x82, 0x91, 0xaa, 0x03, 0x15, 0x44, 0x5b, 0x72, 0xa5, 0x12, 0x88, 0x93, 0x73,
	0xbc, 0x1c, 0x0f, 0xd1, 0xc6, 0x3b, 0x4d, 0x57, 0xb5, 0xbd, 0xae, 0x77, 0xe3, 0xd3, 0xbd, 0xf2,
	0x29, 0xee, 0x99, 0x4f, 0x83, 0xc4, 0x0b, 0x8f, 0x3c, 0xa2, 0xf2, 0x45, 0xd0, 0xae, 0xbd, 0x69,
	0x9c, 0xa6, 0x3a, 0xe9, 0xa4, 0xbe, 0x65, 0xe6, 0xf7, 0x9b, 0xf9, 0xcd, 0xcc, 0x4e, 0xc6, 0xd0,
	0x2b, 0xc3, 0x7d, 0x9a, 0xf3, 0x20, 0x2f, 0x84, 0x12, 0x64, 0x5d, 0x28, 0xc9, 0x53, 0x11, 0x94,
	0xa1, 0xb7, 0x99, 0xa2, 0x94, 0x74, 0x82, 0xb2, 0x82, 0xbc, 0x5e, 0x2a, 0x18, 0x26, 0xd6, 0xda,
	0x9b, 0x08, 0x31, 0x49, 0x70, 0xdf, 0x58, 0xe3, 0xe9, 0xf9, 0xfe, 0x39, 0xc7, 0x84, 0x8d, 0x52,
	0x2a, 0x2f, 0x2b, 0x86, 0x3f, 0x80, 0x8d, 0xa1, 0xa2, 0x8a, 0x4b, 0xc5, 0x63, 0x19, 0xe1, 0x15,
	0xd9, 0x81, 0x75, 0xc5, 0x53, 0x1c, 0x9d, 0x17, 0x22, 0x75, 0x9d, 0x3d, 0xa7, 0xdf, 0x8a, 0x3a,
	0xda, 0xf1, 0xac, 0x10, 0x29, 0x79, 0x0c, 0x6b, 0x06, 0x54, 0xc2, 0x5d, 0x31, 0xd0, 0xaa, 0x36,
	0x5f, 0x08, 0xff, 0x8d, 0xd3, 0xcc, 0x23, 0xc9, 0x8f, 0x00, 0x72, 0xe6, 0x70, 0x9d, 0xbd, 0x56,
	0xbf, 0x1b, 0xf6, 0x83, 0x59, 0xe1, 0x41, 0x83, 0x3d, 0x67, 0x0d, 0x32, 0x55, 0xbc, 0x8e, 0xe6,
	0x62, 0xbd, 0x6f, 0xe1, 0xc1, 0x02, 0x4c, 0xb6, 0xa0, 0x75, 0x89, 0xaf, 0x4d, 0x79, 0xeb, 0x91,
	0xfe, 0x49, 0x3e, 0x84, 0x76, 0x49, 0x93, 0x29, 0xd6, 0x75, 0x55, 0xc6, 0x37, 0x2b, 0x4f, 0x1d,
	0x3f, 0x87, 0xad, 0x5f, 0x73, 0x46, 0x15, 0x3e, 0x2f, 0xc4, 0x39, 0x4f, 0x50, 0x37, 0x19, 0xc2,
	0xaa, 0x99, 0x84, 0x34, 0x29, 0xba, 0xa1, 0x17, 0x54, 0x83, 0x0a, 0xec, 0xa0, 0x82, 0x67, 0x1a,
	0xfe, 0x99, 0xca, 0xcb, 0xa8, 0x66, 0x92, 0x3e, 0xac, 0xe5, 0x55, 0x06, 0xa3, 0xd1, 0x0d, 0x37,
	0x03, 0x9a, 0xf3, 0x7c, 0x1c, 0xd8, 0xbc, 0x16, 0xf6, 0x2f, 0x60, 0xb3, 0x52, 0x3c, 0xb9, 0xe0,
	0x09, 0x7b, 0x57, 0x3d, 0x1f, 0xda, 0xb1, 0x8e, 0xaf, 0xd5, 0x7a, 0xb5, 0x5a, 0x95, 0xb3, 0x82,
	0xfc, 0xbf, 0x1c, 0xf8, 0x60, 0xd6, 0xdc, 0xa4, 0x40, 0x69, 0x9e, 0xf0, 0x09, 0xf4, 0xa4, 0xa2,
	0x85, 0x1c, 0x21, 0x2d, 0x32, 0x64, 0x46, 0xb3, 0x1d, 0x75, 0x8d, 0x6f, 0x60, 0x5c, 0xfa, 0x95,
	0x33, 0x7c, 0x35, 0x4a, 0xb0, 0xc4, 0xc4, 0x08, 0xb4, 0xa3, 0x4e, 0x86, 0xaf, 0x7e, 0xd2, 0x36,
	0xe9, 0xc3, 0x96, 0x01, 0x46, 0x3a, 0x62, 0x14, 0x8b, 0x69, 0xa6, 0xdc, 0x96, 0xe1, 0x6c, 0x1a,
	0xff, 0x50, 0xd1, 0xe2, 0x44, 0x7b, 0xc9, 0x97, 0xb0, 0x31, 0xa6, 0x6c, 0x82, 0x33, 0xa9, 0xf7,
	0xcd, 0x3b, 0xdb, 0x5a, 0x8f, 0x35, 0x16, 0xf5, 0x2a, 0x4a, 0xad, 0xbc, 0x0d, 0x1d, 0x53, 0xfb,
	0x88, 0x33, 0xb7, 0x6d, 0xde, 0x6f, 0xcd, 0xd8, 0x67, 0xcc, 0xff, 0xdd, 0x81, 0x47, 0xc7, 0x54,
	0xc5, 0x17, 0x73, 0xd3, 0x2b, 0x30, 0xbb, 0xc7, 0x01, 0xea, 0x45, 0xe2, 0x4c, 0xba, 0xad, 0xbd,
	0x96, 0x5e, 0x24, 0xce, 0xa4, 0x7f, 0x78, 0x47, 0x0d, 0x8d, 0x7c, 0xad, 0x3b, 0xf2, 0x85, 0xff,
	0xac, 0x01, 0x1c, 0xe5, 0x7c, 0x88, 0x45, 0xc9, 0x63, 0x24, 0x9f, 0x03, 0x1c, 0x31, 0x56, 0x2f,
	0x08, 0x59, 0x58, 0x18, 0x6f, 0xc1, 0x26, 0x07, 0x00, 0xa7, 0xa8, 0xac, 0xe5, 0xd6, 0xe8, 0x8d,
	0x2b, 0xc2, 0xab, 0x29, 0x4a, 0x75, 0x2b, 0xee, 0x10, 0x36, 0x1a, 0x1b, 0x4e, 0x76, 0xe6, 0xfe,
	0x67, 0x8b, 0xbb, 0x7f, 0x2b, 0xfa, 0x33, 0xe8, 0x1c, 0x31, 0x66, 0xba, 0x20, 0x8d, 0x9e, 0xbc,
	0x86, 0x45, 0xbe, 0x80, 0xce, 0x29, 0xaa, 0xea, 0xf7, 0xa3, 0x9b, 0xda, 0xec, 0x8e, 0x9b, 0xca,
	0x9a, 0x11, 0x2f, 0xa1, 0x6b, 0x09, 0x05, 0x66, 0xe4, 0x93, 0x85, 0xa0, 0x02, 0x33, 0x7d, 0x54,
	0x16, 0x9a, 0xfb, 0xf4, 0x2d, 0x2c, 0x99, 0x8b, 0x4c, 0x22, 0x19, 0xc3, 0xc3, 0x53, 0x54, 0x3f,
	0x70, 0x49, 0xc7, 0x09, 0xb2, 0xfb, 0xd1, 0x38, 0x80, 0xee, 0xdc, 0x16, 0x90, 0xed, 0x5b, 0x53,
	0xb5, 0xbd, 0x2f, 0xf4, 0xfd, 0x1b, 0x3c, 0x5c, 0xb2, 0x42, 0xe4, 0xc9, 0x5c, 0xfc, 0xf2, 0x35,
	0xf7, 0xde, 0x4a, 0x91, 0xe4, 0x29, 0x3c, 0xa8, 0x9c, 0xa7, 0x34, 0xc5, 0xea, 0x1a, 0x3e, 0xb6,
	0xed, 0x58, 0xcf, 0xf2, 0xe7, 0x18, 0xc0, 0xd6, 0xc9, 0x05, 0xcd, 0x26, 0x78, 0x14, 0x2b, 0x5e,
	0x52, 0xc5, 0x45, 0x46, 0x3e, 0x9e, 0x31, 0x34, 0x60, 0x78, 0x37, 0xe8, 0xf2, 0x34, 0x07, 0xd0,
	0x1d, 0x8a, 0x69, 0xc6, 0x06, 0x99, 0x1e, 0x3d, 0xd9, 0xae, 0xc1, 0x39, 0xdf, 0xf2, 0xb8, 0xef,
	0xec, 0xa9, 0xd2, 0x65, 0x9e, 0x65, 0x8c, 0xc7, 0x28, 0xc9, 0x4e, 0x4d, 0xa9, 0x90, 0xb3, 0x8c,
	0x61, 0x8c, 0x72, 0x79, 0xfc, 0xf7, 0x00, 0x37, 0x9f, 0x01, 0xe2, 0xde, 0xf1, 0x29, 0xb9, 0xf2,
	0xee, 0x42, 0x24, 0x39, 0xb4, 0x77, 0xd9, 0x1e, 0x4b, 0xf2, 0xd1, 0xb2, 0x3f, 0x8a, 0xbd, 0xa3,
	0x4d, 0xfd, 0xe3, 0xaf, 0xff, 0xbc, 0xde, 0x75, 0xfe, 0xbe, 0xde, 0x75, 0xfe, 0xbd, 0xde, 0x75,
	0xde, 0xfc, 0xb7, 0xfb, 0x1e, 0x90, 0x58, 0xa4, 0x36, 0xc1, 0xa4, 0xc8, 0xe3, 0xa0, 0x0c, 0x9f,
	0x3b, 0x2f, 0xbb, 0x95, 0x27, 0x1f, 0xef, 0x97, 0xe1, 0x1f, 0x2b, 0xad, 0x5f, 0x5e, 0x0c, 0xc7,
	0xab, 0xe6, 0x4a, 0x7d, 0xf5, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x51, 0x3f, 0xf1, 0xb5, 0xc6,
	0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiServiceClient interface {
	// Profile
	AddProfile(ctx context.Context, in *otsimopb.Profile, opts ...grpc.CallOption) (*otsimopb.Profile, error)
	GetProfile(ctx context.Context, in *otsimopb.GetProfileRequest, opts ...grpc.CallOption) (*otsimopb.Profile, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileReq, opts ...grpc.CallOption) (*otsimopb.Profile, error)
	// Child
	AddChild(ctx context.Context, in *otsimopb.Child, opts ...grpc.CallOption) (*otsimopb.Child, error)
	GetChild(ctx context.Context, in *otsimopb.GetChildRequest, opts ...grpc.CallOption) (*otsimopb.Child, error)
	GetChildren(ctx context.Context, in *otsimopb.GetChildrenFromProfileRequest, opts ...grpc.CallOption) (*otsimopb.GetChildrenFromProfileResponse, error)
	GetDisabledChildren(ctx context.Context, in *otsimopb.GetChildrenFromProfileRequest, opts ...grpc.CallOption) (*otsimopb.GetChildrenFromProfileResponse, error)
	UpdateChild(ctx context.Context, in *UpdateChildReq, opts ...grpc.CallOption) (*otsimopb.Child, error)
	BatchUpdateChildren(ctx context.Context, in *BatchUpdateChildrenReq, opts ...grpc.CallOption) (*BatchUpdateChildrenRes, error)
	UpdateGameEntry(ctx context.Context, in *otsimopb.GameEntryRequest, opts ...grpc.CallOption) (*otsimopb.Child, error)
	ChangeActivation(ctx context.Context, in *otsimopb.ChangeChildActivationRequest, opts ...grpc.CallOption) (*otsimopb.Child, error)
	SoundEnable(ctx context.Context, in *otsimopb.SoundEnableRequest, opts ...grpc.CallOption) (*otsimopb.Child, error)
	UpdateGameIndices(ctx context.Context, in *otsimopb.UpdateIndecesRequest, opts ...grpc.CallOption) (*otsimopb.Child, error)
	Statistics(ctx context.Context, in *StatisticsReq, opts ...grpc.CallOption) (*StatisticsRes, error)
	UpdateProgress(ctx context.Context, in *UpdateProgressReq, opts ...grpc.CallOption) (*otsimopb.Child, error)
}

type apiServiceClient struct {
	cc *grpc.ClientConn
}

func NewApiServiceClient(cc *grpc.ClientConn) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) AddProfile(ctx context.Context, in *otsimopb.Profile, opts ...grpc.CallOption) (*otsimopb.Profile, error) {
	out := new(otsimopb.Profile)
	err := c.cc.Invoke(ctx, "/otsimo.v2.ApiService/AddProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetProfile(ctx context.Context, in *otsimopb.GetProfileRequest, opts ...grpc.CallOption) (*otsimopb.Profile, error) {
	out := new(otsimopb.Profile)
	err := c.cc.Invoke(ctx, "/otsimo.v2.ApiService/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileReq, opts ...grpc.CallOption) (*otsimopb.Profile, error) {
	out := new(otsimopb.Profile)
	err := c.cc.Invoke(ctx, "/otsimo.v2.ApiService/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AddChild(ctx context.Context, in *otsimopb.Child, opts ...grpc.CallOption) (*otsimopb.Child, error) {
	out := new(otsimopb.Child)
	err := c.cc.Invoke(ctx, "/otsimo.v2.ApiService/AddChild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetChild(ctx context.Context, in *otsimopb.GetChildRequest, opts ...grpc.CallOption) (*otsimopb.Child, error) {
	out := new(otsimopb.Child)
	err := c.cc.Invoke(ctx, "/otsimo.v2.ApiService/GetChild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetChildren(ctx context.Context, in *otsimopb.GetChildrenFromProfileRequest, opts ...grpc.CallOption) (*otsimopb.GetChildrenFromProfileResponse, error) {
	out := new(otsimopb.GetChildrenFromProfileResponse)
	err := c.cc.Invoke(ctx, "/otsimo.v2.ApiService/GetChildren", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDisabledChildren(ctx context.Context, in *otsimopb.GetChildrenFromProfileRequest, opts ...grpc.CallOption) (*otsimopb.GetChildrenFromProfileResponse, error) {
	out := new(otsimopb.GetChildrenFromProfileResponse)
	err := c.cc.Invoke(ctx, "/otsimo.v2.ApiService/GetDisabledChildren", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateChild(ctx context.Context, in *UpdateChildReq, opts ...grpc.CallOption) (*otsimopb.Child, error) {
	out := new(otsimopb.Child)
	err := c.cc.Invoke(ctx, "/otsimo.v2.ApiService/UpdateChild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BatchUpdateChildren(ctx context.Context, in *BatchUpdateChildrenReq, opts ...grpc.CallOption) (*BatchUpdateChildrenRes, error) {
	out := new(BatchUpdateChildrenRes)
	err := c.cc.Invoke(ctx, "/otsimo.v2.ApiService/BatchUpdateChildren", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateGameEntry(ctx context.Context, in *otsimopb.GameEntryRequest, opts ...grpc.CallOption) (*otsimopb.Child, error) {
	out := new(otsimopb.Child)
	err := c.cc.Invoke(ctx, "/otsimo.v2.ApiService/UpdateGameEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ChangeActivation(ctx context.Context, in *otsimopb.ChangeChildActivationRequest, opts ...grpc.CallOption) (*otsimopb.Child, error) {
	out := new(otsimopb.Child)
	err := c.cc.Invoke(ctx, "/otsimo.v2.ApiService/ChangeActivation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SoundEnable(ctx context.Context, in *otsimopb.SoundEnableRequest, opts ...grpc.CallOption) (*otsimopb.Child, error) {
	out := new(otsimopb.Child)
	err := c.cc.Invoke(ctx, "/otsimo.v2.ApiService/SoundEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateGameIndices(ctx context.Context, in *otsimopb.UpdateIndecesRequest, opts ...grpc.CallOption) (*otsimopb.Child, error) {
	out := new(otsimopb.Child)
	err := c.cc.Invoke(ctx, "/otsimo.v2.ApiService/UpdateGameIndices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Statistics(ctx context.Context, in *StatisticsReq, opts ...grpc.CallOption) (*StatisticsRes, error) {
	out := new(StatisticsRes)
	err := c.cc.Invoke(ctx, "/otsimo.v2.ApiService/Statistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateProgress(ctx context.Context, in *UpdateProgressReq, opts ...grpc.CallOption) (*otsimopb.Child, error) {
	out := new(otsimopb.Child)
	err := c.cc.Invoke(ctx, "/otsimo.v2.ApiService/UpdateProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
type ApiServiceServer interface {
	// Profile
	AddProfile(context.Context, *otsimopb.Profile) (*otsimopb.Profile, error)
	GetProfile(context.Context, *otsimopb.GetProfileRequest) (*otsimopb.Profile, error)
	UpdateProfile(context.Context, *UpdateProfileReq) (*otsimopb.Profile, error)
	// Child
	AddChild(context.Context, *otsimopb.Child) (*otsimopb.Child, error)
	GetChild(context.Context, *otsimopb.GetChildRequest) (*otsimopb.Child, error)
	GetChildren(context.Context, *otsimopb.GetChildrenFromProfileRequest) (*otsimopb.GetChildrenFromProfileResponse, error)
	GetDisabledChildren(context.Context, *otsimopb.GetChildrenFromProfileRequest) (*otsimopb.GetChildrenFromProfileResponse, error)
	UpdateChild(context.Context, *UpdateChildReq) (*otsimopb.Child, error)
	BatchUpdateChildren(context.Context, *BatchUpdateChildrenReq) (*BatchUpdateChildrenRes, error)
	UpdateGameEntry(context.Context, *otsimopb.GameEntryRequest) (*otsimopb.Child, error)
	ChangeActivation(context.Context, *otsimopb.ChangeChildActivationRequest) (*otsimopb.Child, error)
	SoundEnable(context.Context, *otsimopb.SoundEnableRequest) (*otsimopb.Child, error)
	UpdateGameIndices(context.Context, *otsimopb.UpdateIndecesRequest) (*otsimopb.Child, error)
	Statistics(context.Context, *StatisticsReq) (*StatisticsRes, error)
	UpdateProgress(context.Context, *UpdateProgressReq) (*otsimopb.Child, error)
}

// UnimplementedApiServiceServer can be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (*UnimplementedApiServiceServer) AddProfile(ctx context.Context, req *otsimopb.Profile) (*otsimopb.Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProfile not implemented")
}
func (*UnimplementedApiServiceServer) GetProfile(ctx context.Context, req *otsimopb.GetProfileRequest) (*otsimopb.Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (*UnimplementedApiServiceServer) UpdateProfile(ctx context.Context, req *UpdateProfileReq) (*otsimopb.Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (*UnimplementedApiServiceServer) AddChild(ctx context.Context, req *otsimopb.Child) (*otsimopb.Child, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChild not implemented")
}
func (*UnimplementedApiServiceServer) GetChild(ctx context.Context, req *otsimopb.GetChildRequest) (*otsimopb.Child, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChild not implemented")
}
func (*UnimplementedApiServiceServer) GetChildren(ctx context.Context, req *otsimopb.GetChildrenFromProfileRequest) (*otsimopb.GetChildrenFromProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildren not implemented")
}
func (*UnimplementedApiServiceServer) GetDisabledChildren(ctx context.Context, req *otsimopb.GetChildrenFromProfileRequest) (*otsimopb.GetChildrenFromProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisabledChildren not implemented")
}
func (*UnimplementedApiServiceServer) UpdateChild(ctx context.Context, req *UpdateChildReq) (*otsimopb.Child, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChild not implemented")
}
func (*UnimplementedApiServiceServer) BatchUpdateChildren(ctx context.Context, req *BatchUpdateChildrenReq) (*BatchUpdateChildrenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateChildren not implemented")
}
func (*UnimplementedApiServiceServer) UpdateGameEntry(ctx context.Context, req *otsimopb.GameEntryRequest) (*otsimopb.Child, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameEntry not implemented")
}
func (*UnimplementedApiServiceServer) ChangeActivation(ctx context.Context, req *otsimopb.ChangeChildActivationRequest) (*otsimopb.Child, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeActivation not implemented")
}
func (*UnimplementedApiServiceServer) SoundEnable(ctx context.Context, req *otsimopb.SoundEnableRequest) (*otsimopb.Child, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoundEnable not implemented")
}
func (*UnimplementedApiServiceServer) UpdateGameIndices(ctx context.Context, req *otsimopb.UpdateIndecesRequest) (*otsimopb.Child, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameIndices not implemented")
}
func (*UnimplementedApiServiceServer) Statistics(ctx context.Context, req *StatisticsReq) (*StatisticsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Statistics not implemented")
}
func (*UnimplementedApiServiceServer) UpdateProgress(ctx context.Context, req *UpdateProgressReq) (*otsimopb.Child, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProgress not implemented")
}

func RegisterApiServiceServer(s *grpc.Server, srv ApiServiceServer) {
	s.RegisterService(&_ApiService_serviceDesc, srv)
}

func _ApiService_AddProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(otsimopb.Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AddProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/AddProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AddProfile(ctx, req.(*otsimopb.Profile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(otsimopb.GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetProfile(ctx, req.(*otsimopb.GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateProfile(ctx, req.(*UpdateProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AddChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(otsimopb.Child)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AddChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/AddChild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AddChild(ctx, req.(*otsimopb.Child))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(otsimopb.GetChildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/GetChild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetChild(ctx, req.(*otsimopb.GetChildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(otsimopb.GetChildrenFromProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/GetChildren",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetChildren(ctx, req.(*otsimopb.GetChildrenFromProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDisabledChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(otsimopb.GetChildrenFromProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDisabledChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/GetDisabledChildren",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDisabledChildren(ctx, req.(*otsimopb.GetChildrenFromProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/UpdateChild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateChild(ctx, req.(*UpdateChildReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BatchUpdateChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateChildrenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BatchUpdateChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/BatchUpdateChildren",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BatchUpdateChildren(ctx, req.(*BatchUpdateChildrenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateGameEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(otsimopb.GameEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateGameEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/UpdateGameEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateGameEntry(ctx, req.(*otsimopb.GameEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ChangeActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(otsimopb.ChangeChildActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ChangeActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/ChangeActivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ChangeActivation(ctx, req.(*otsimopb.ChangeChildActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SoundEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(otsimopb.SoundEnableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SoundEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/SoundEnable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SoundEnable(ctx, req.(*otsimopb.SoundEnableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateGameIndices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(otsimopb.UpdateIndecesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateGameIndices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/UpdateGameIndices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateGameIndices(ctx, req.(*otsimopb.UpdateIndecesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Statistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Statistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/Statistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Statistics(ctx, req.(*StatisticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProgressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.v2.ApiService/UpdateProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateProgress(ctx, req.(*UpdateProgressReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "otsimo.v2.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProfile",
			Handler:    _ApiService_AddProfile_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _ApiService_GetProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _ApiService_UpdateProfile_Handler,
		},
		{
			MethodName: "AddChild",
			Handler:    _ApiService_AddChild_Handler,
		},
		{
			MethodName: "GetChild",
			Handler:    _ApiService_GetChild_Handler,
		},
		{
			MethodName: "GetChildren",
			Handler:    _ApiService_GetChildren_Handler,
		},
		{
			MethodName: "GetDisabledChildren",
			Handler:    _ApiService_GetDisabledChildren_Handler,
		},
		{
			MethodName: "UpdateChild",
			Handler:    _ApiService_UpdateChild_Handler,
		},
		{
			MethodName: "BatchUpdateChildren",
			Handler:    _ApiService_BatchUpdateChildren_Handler,
		},
		{
			MethodName: "UpdateGameEntry",
			Handler:    _ApiService_UpdateGameEntry_Handler,
		},
		{
			MethodName: "ChangeActivation",
			Handler:    _ApiService_ChangeActivation_Handler,
		},
		{
			MethodName: "SoundEnable",
			Handler:    _ApiService_SoundEnable_Handler,
		},
		{
			MethodName: "UpdateGameIndices",
			Handler:    _ApiService_UpdateGameIndices_Handler,
		},
		{
			MethodName: "Statistics",
			Handler:    _ApiService_Statistics_Handler,
		},
		{
			MethodName: "UpdateProgress",
			Handler:    _ApiService_UpdateProgress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v2/api.proto",
}

func (m *StatisticsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatisticsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TimeFrom != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TimeFrom))
	}
	if m.TimeTo != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TimeTo))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StatisticsRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatisticsRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Statistics) > 0 {
		for k, _ := range m.Statistics {
			dAtA[i] = 0xa
			i++
			v := m.Statistics[k]
			mapSize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + sovApi(uint64(v))
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintApi(dAtA, i, uint64(v))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateProfileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateProfileReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fields != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Fields.Size()))
		n1, err1 := m.Fields.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.Profile != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Profile.Size()))
		n2, err2 := m.Profile.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateChildReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChildReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fields != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Fields.Size()))
		n3, err3 := m.Fields.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if m.Child != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Child.Size()))
		n4, err4 := m.Child.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateProgressReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateProgressReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StarsEarned != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.StarsEarned))
	}
	if m.NewLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.NewLevel))
	}
	if m.LevelStarCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LevelStarCount))
	}
	if len(m.BadgesEarned) > 0 {
		for _, msg := range m.BadgesEarned {
			dAtA[i] = 0x22
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ChildId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ChildId)))
		i += copy(dAtA[i:], m.ChildId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchUpdateChildrenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchUpdateChildrenReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fields != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Fields.Size()))
		n5, err5 := m.Fields.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	if m.Child != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Child.Size()))
		n6, err6 := m.Child.MarshalTo(dAtA[i:])
		if err6 != nil {
			return 0, err6
		}
		i += n6
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchUpdateChildrenRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchUpdateChildrenRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Child) > 0 {
		for _, msg := range m.Child {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StatisticsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeFrom != 0 {
		n += 1 + sovApi(uint64(m.TimeFrom))
	}
	if m.TimeTo != 0 {
		n += 1 + sovApi(uint64(m.TimeTo))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatisticsRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Statistics) > 0 {
		for k, v := range m.Statistics {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateProfileReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fields != nil {
		l = m.Fields.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateChildReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fields != nil {
		l = m.Fields.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateProgressReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StarsEarned != 0 {
		n += 1 + sovApi(uint64(m.StarsEarned))
	}
	if m.NewLevel != 0 {
		n += 1 + sovApi(uint64(m.NewLevel))
	}
	if m.LevelStarCount != 0 {
		n += 1 + sovApi(uint64(m.LevelStarCount))
	}
	if len(m.BadgesEarned) > 0 {
		for _, e := range m.BadgesEarned {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.ChildId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchUpdateChildrenReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fields != nil {
		l = m.Fields.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchUpdateChildrenRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Child) > 0 {
		for _, e := range m.Child {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StatisticsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatisticsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatisticsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeFrom", wireType)
			}
			m.TimeFrom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeFrom |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeTo", wireType)
			}
			m.TimeTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatisticsRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatisticsRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatisticsRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Statistics == nil {
				m.Statistics = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Statistics[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateProfileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateProfileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateProfileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = &types.FieldMask{}
			}
			if err := m.Fields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &otsimopb.Profile{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChildReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChildReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChildReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = &types.FieldMask{}
			}
			if err := m.Fields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &otsimopb.Child{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateProgressReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateProgressReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateProgressReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarsEarned", wireType)
			}
			m.StarsEarned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StarsEarned |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLevel", wireType)
			}
			m.NewLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelStarCount", wireType)
			}
			m.LevelStarCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelStarCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgesEarned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadgesEarned = append(m.BadgesEarned, &otsimopb.Badge{})
			if err := m.BadgesEarned[len(m.BadgesEarned)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchUpdateChildrenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchUpdateChildrenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchUpdateChildrenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = &types.FieldMask{}
			}
			if err := m.Fields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &otsimopb.Child{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchUpdateChildrenRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchUpdateChildrenRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchUpdateChildrenRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Child = append(m.Child, &otsimopb.Child{})
			if err := m.Child[len(m.Child)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthApi
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

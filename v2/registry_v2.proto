syntax = "proto3";
package otsimopb.v2;

import "messages.proto";
import "models.proto";
import "google/api/annotations.proto";

option objc_class_prefix = "OTS";
option go_package = "otsimopb/v2";
option java_package = "com.otsimo.grpc.v2";
option java_multiple_files = true;

message AllGameReleases {
  message MiniRelease {
    string version = 1;
    int64 released_at = 2;
    apipb.ReleaseState release_state = 3;
  }
  string game_id = 1;
  repeated MiniRelease releases = 2;
}

message GameCategoryLocale {
  string language = 1;
  string title = 2;
  string image = 3;
  string color = 4;
  string description = 5;
}

message GameCategory {
  string name = 1;
  repeated GameCategoryLocale locales = 2;
  int32 revision = 3;
  map<string, string> labels = 4;
  string default_locale = 5;
}

message CategoryReq {
  enum Task {
    ADD = 0;
    UPDATE = 1;
    DELETE = 2;
  }
  Task task = 1;
  GameCategory category = 2;
  int32 known_revision = 3;
}

message CategoryListReq {}

message CategoryList { repeated GameCategory categories = 1; }

message GetAllGamesReq {
  // Games that user wants the data of, if it is empty returns all games
  repeated apipb.GameAndVersion games = 1;
  // Language filters games. If language field is empty than returns games with
  // all languages.
  string language = 2;
  // Device Capabilities
  repeated string capabilities = 3;
  // Device Country
  string device_country = 4;
  // Device OS name
  string device_os = 5;
  // App edition
  string app_edition = 6;
}

message GetAllGamesRes { repeated apipb.GameRelease games = 1; }

message PublishReq {
  apipb.GameManifest manifest = 1;
  map<string, string> files = 2;
}

message PublishRes {
  apipb.UploadToken token = 1;
  map<string, string> upload_urls = 2;
  string storage = 3;
}

message TarballInfo {
  string url = 1;
  string storage = 2;
  string archive_format = 3;
  string locale = 4;
}

message AddTarballReq {
  string token = 1;
  repeated TarballInfo infos = 2;
}

message AddTarballRes { map<string, string> package_urls = 1; }

message RegistryClient {
  string unique_name = 1;
  string api_key = 2;
}

message CreateClientReq { string unique_name = 1; }

message RevokeClientReq { string api_key = 1; }

message ClientList { repeated string client_names = 1; }

message ListClientReq {}

// Registry Service
service RegistryService {
  // Get returns game
  rpc Get(apipb.GetGameRequest) returns (apipb.Game);
  // GetRelease returns GameRelease by given game id and version
  rpc GetRelease(apipb.GetGameReleaseRequest) returns (apipb.GameRelease);
  // Publish tries to create a new GameRelease by given manifest
  rpc Publish(PublishReq) returns (PublishRes) {}

  rpc AddTarballInfo(AddTarballReq) returns (AddTarballRes) {}
  // ChangeReleaseState changes state of a release, If user is admin than s/he
  // can change from WAITING to REJECTED or VALIDATED, developers can change to
  // any except VALIDATED
  rpc ChangeReleaseState(apipb.ValidateRequest) returns (apipb.Response) {}
  // GetLatestVersions returns latest versions of given game ids
  rpc GetLatestVersions(apipb.GetLatestVersionsRequest)
      returns (apipb.GameVersionsResponse) {}
  // Search does search
  rpc Search(apipb.SearchRequest) returns (apipb.SearchResponse) {}
  // ListGames returns all games with normal versions
  rpc ListGames(apipb.ListGamesRequest) returns (stream apipb.ListItem);
  // ListGames returns all games with testing versions
  rpc ListGamesWithTests(apipb.ListGamesRequest)
      returns (stream apipb.ListItemWithTests);
  // AllReleases returns all releases of the given game
  rpc AllReleases(apipb.GetGameRequest) returns (AllGameReleases);
  // Category adds, updates and removes a game category
  rpc Category(CategoryReq) returns (GameCategory) {
    option (google.api.http) = {
      post : "/api/v2/registry/category"
      body : "*"
    };
  }
  // ListCategories returns all the categories
  rpc ListCategories(CategoryListReq) returns (CategoryList) {
    option (google.api.http) = {
      get : "/api/v2/registry/categories"
    };
  }

  // GetAllGames returns all Game Releases with production state
  rpc GetAllGames(GetAllGamesReq) returns (GetAllGamesRes);

  // Create a distribution service client
  rpc CreateClient(CreateClientReq) returns (RegistryClient);
  // Revoke a client by it's api_key or name
  rpc RevokeClient(RegistryClient) returns (RegistryClient);
  // List the client names
  rpc ListClients(ListClientReq) returns (ClientList);
}

message GameSummaryInfo {
  string game_id = 1;
  string unique_name = 2;
  bool is_premium = 3;
}

message AllGamesSummary { repeated GameSummaryInfo games = 1; }

message AllGamesSummaryReq {}

service GameProvider {
  rpc Single(apipb.GetGameRequest) returns (GameSummaryInfo);
  rpc All(AllGamesSummaryReq) returns (AllGamesSummary);
}
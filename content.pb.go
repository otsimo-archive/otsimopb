// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: content.proto

package otsimopb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// skipping weak import gogoproto "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ContentListRequest_ListStatus int32

const (
	ContentListRequest_BOTH          ContentListRequest_ListStatus = 0
	ContentListRequest_ONLY_DRAFT    ContentListRequest_ListStatus = 1
	ContentListRequest_ONLY_APPROVED ContentListRequest_ListStatus = 2
)

var ContentListRequest_ListStatus_name = map[int32]string{
	0: "BOTH",
	1: "ONLY_DRAFT",
	2: "ONLY_APPROVED",
}
var ContentListRequest_ListStatus_value = map[string]int32{
	"BOTH":          0,
	"ONLY_DRAFT":    1,
	"ONLY_APPROVED": 2,
}

func (x ContentListRequest_ListStatus) String() string {
	return proto.EnumName(ContentListRequest_ListStatus_name, int32(x))
}
func (ContentListRequest_ListStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_content_3ed96300a0b79c54, []int{1, 0}
}

type ContentListRequest_SortBy int32

const (
	ContentListRequest_WEIGHT ContentListRequest_SortBy = 0
	ContentListRequest_TIME   ContentListRequest_SortBy = 1
)

var ContentListRequest_SortBy_name = map[int32]string{
	0: "WEIGHT",
	1: "TIME",
}
var ContentListRequest_SortBy_value = map[string]int32{
	"WEIGHT": 0,
	"TIME":   1,
}

func (x ContentListRequest_SortBy) String() string {
	return proto.EnumName(ContentListRequest_SortBy_name, int32(x))
}
func (ContentListRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_content_3ed96300a0b79c54, []int{1, 1}
}

type ContentListRequest_SortOrder int32

const (
	ContentListRequest_DSC ContentListRequest_SortOrder = 0
	ContentListRequest_ASC ContentListRequest_SortOrder = 1
)

var ContentListRequest_SortOrder_name = map[int32]string{
	0: "DSC",
	1: "ASC",
}
var ContentListRequest_SortOrder_value = map[string]int32{
	"DSC": 0,
	"ASC": 1,
}

func (x ContentListRequest_SortOrder) String() string {
	return proto.EnumName(ContentListRequest_SortOrder_name, int32(x))
}
func (ContentListRequest_SortOrder) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_content_3ed96300a0b79c54, []int{1, 2}
}

type Content struct {
	Slug                 string            `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Title                string            `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Language             string            `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	Date                 int64             `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	Draft                bool              `protobuf:"varint,5,opt,name=draft,proto3" json:"draft,omitempty"`
	WrittenAt            string            `protobuf:"bytes,6,opt,name=written_at,json=writtenAt,proto3" json:"written_at,omitempty"`
	Author               string            `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	Category             string            `protobuf:"bytes,8,opt,name=category,proto3" json:"category,omitempty"`
	Url                  string            `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	Weight               int32             `protobuf:"varint,10,opt,name=weight,proto3" json:"weight,omitempty"`
	Keywords             []string          `protobuf:"bytes,11,rep,name=keywords" json:"keywords,omitempty"`
	CategoryWeight       int32             `protobuf:"varint,12,opt,name=category_weight,json=categoryWeight,proto3" json:"category_weight,omitempty"`
	Markdown             []byte            `protobuf:"bytes,13,opt,name=markdown,proto3" json:"markdown,omitempty"`
	Params               map[string]string `protobuf:"bytes,14,rep,name=params" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}
func (*Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_3ed96300a0b79c54, []int{0}
}
func (m *Content) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Content.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Content.Merge(dst, src)
}
func (m *Content) XXX_Size() int {
	return m.Size()
}
func (m *Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Content proto.InternalMessageInfo

type ContentListRequest struct {
	Status               ContentListRequest_ListStatus `protobuf:"varint,1,opt,name=status,proto3,enum=apipb.ContentListRequest_ListStatus" json:"status,omitempty"`
	Limit                int32                         `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Category             string                        `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Offset               int32                         `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Language             string                        `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`
	OnlyHtmlUrl          bool                          `protobuf:"varint,6,opt,name=only_html_url,json=onlyHtmlUrl,proto3" json:"only_html_url,omitempty"`
	Sort                 ContentListRequest_SortBy     `protobuf:"varint,7,opt,name=sort,proto3,enum=apipb.ContentListRequest_SortBy" json:"sort,omitempty"`
	Order                ContentListRequest_SortOrder  `protobuf:"varint,8,opt,name=order,proto3,enum=apipb.ContentListRequest_SortOrder" json:"order,omitempty"`
	ProfileId            string                        `protobuf:"bytes,10,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	ClientVersion        string                        `protobuf:"bytes,11,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	Categories           []string                      `protobuf:"bytes,12,rep,name=categories" json:"categories,omitempty"`
	ExceptCategories     []string                      `protobuf:"bytes,13,rep,name=except_categories,json=exceptCategories" json:"except_categories,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ContentListRequest) Reset()         { *m = ContentListRequest{} }
func (m *ContentListRequest) String() string { return proto.CompactTextString(m) }
func (*ContentListRequest) ProtoMessage()    {}
func (*ContentListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_3ed96300a0b79c54, []int{1}
}
func (m *ContentListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContentListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContentListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ContentListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentListRequest.Merge(dst, src)
}
func (m *ContentListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ContentListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContentListRequest proto.InternalMessageInfo

type ContentListResponse struct {
	Contents             []*Content `protobuf:"bytes,1,rep,name=contents" json:"contents,omitempty"`
	AssetVersion         int32      `protobuf:"varint,2,opt,name=asset_version,json=assetVersion,proto3" json:"asset_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ContentListResponse) Reset()         { *m = ContentListResponse{} }
func (m *ContentListResponse) String() string { return proto.CompactTextString(m) }
func (*ContentListResponse) ProtoMessage()    {}
func (*ContentListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_3ed96300a0b79c54, []int{2}
}
func (m *ContentListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContentListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContentListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ContentListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentListResponse.Merge(dst, src)
}
func (m *ContentListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ContentListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ContentListResponse proto.InternalMessageInfo

type ContentGetRequest struct {
	Slug                 string   `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContentGetRequest) Reset()         { *m = ContentGetRequest{} }
func (m *ContentGetRequest) String() string { return proto.CompactTextString(m) }
func (*ContentGetRequest) ProtoMessage()    {}
func (*ContentGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_3ed96300a0b79c54, []int{3}
}
func (m *ContentGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContentGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContentGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ContentGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentGetRequest.Merge(dst, src)
}
func (m *ContentGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *ContentGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContentGetRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Content)(nil), "apipb.Content")
	proto.RegisterMapType((map[string]string)(nil), "apipb.Content.ParamsEntry")
	proto.RegisterType((*ContentListRequest)(nil), "apipb.ContentListRequest")
	proto.RegisterType((*ContentListResponse)(nil), "apipb.ContentListResponse")
	proto.RegisterType((*ContentGetRequest)(nil), "apipb.ContentGetRequest")
	proto.RegisterEnum("apipb.ContentListRequest_ListStatus", ContentListRequest_ListStatus_name, ContentListRequest_ListStatus_value)
	proto.RegisterEnum("apipb.ContentListRequest_SortBy", ContentListRequest_SortBy_name, ContentListRequest_SortBy_value)
	proto.RegisterEnum("apipb.ContentListRequest_SortOrder", ContentListRequest_SortOrder_name, ContentListRequest_SortOrder_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContentServiceClient interface {
	List(ctx context.Context, in *ContentListRequest, opts ...grpc.CallOption) (*ContentListResponse, error)
	Get(ctx context.Context, in *ContentGetRequest, opts ...grpc.CallOption) (*Content, error)
}

type contentServiceClient struct {
	cc *grpc.ClientConn
}

func NewContentServiceClient(cc *grpc.ClientConn) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) List(ctx context.Context, in *ContentListRequest, opts ...grpc.CallOption) (*ContentListResponse, error) {
	out := new(ContentListResponse)
	err := c.cc.Invoke(ctx, "/apipb.ContentService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Get(ctx context.Context, in *ContentGetRequest, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/apipb.ContentService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
type ContentServiceServer interface {
	List(context.Context, *ContentListRequest) (*ContentListResponse, error)
	Get(context.Context, *ContentGetRequest) (*Content, error)
}

func RegisterContentServiceServer(s *grpc.Server, srv ContentServiceServer) {
	s.RegisterService(&_ContentService_serviceDesc, srv)
}

func _ContentService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.ContentService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).List(ctx, req.(*ContentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.ContentService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Get(ctx, req.(*ContentGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apipb.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ContentService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ContentService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content.proto",
}

func (m *Content) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Content) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Slug) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintContent(dAtA, i, uint64(len(m.Slug)))
		i += copy(dAtA[i:], m.Slug)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintContent(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Language) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintContent(dAtA, i, uint64(len(m.Language)))
		i += copy(dAtA[i:], m.Language)
	}
	if m.Date != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintContent(dAtA, i, uint64(m.Date))
	}
	if m.Draft {
		dAtA[i] = 0x28
		i++
		if m.Draft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.WrittenAt) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintContent(dAtA, i, uint64(len(m.WrittenAt)))
		i += copy(dAtA[i:], m.WrittenAt)
	}
	if len(m.Author) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintContent(dAtA, i, uint64(len(m.Author)))
		i += copy(dAtA[i:], m.Author)
	}
	if len(m.Category) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintContent(dAtA, i, uint64(len(m.Category)))
		i += copy(dAtA[i:], m.Category)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintContent(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintContent(dAtA, i, uint64(m.Weight))
	}
	if len(m.Keywords) > 0 {
		for _, s := range m.Keywords {
			dAtA[i] = 0x5a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.CategoryWeight != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintContent(dAtA, i, uint64(m.CategoryWeight))
	}
	if len(m.Markdown) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintContent(dAtA, i, uint64(len(m.Markdown)))
		i += copy(dAtA[i:], m.Markdown)
	}
	if len(m.Params) > 0 {
		for k, _ := range m.Params {
			dAtA[i] = 0x72
			i++
			v := m.Params[k]
			mapSize := 1 + len(k) + sovContent(uint64(len(k))) + 1 + len(v) + sovContent(uint64(len(v)))
			i = encodeVarintContent(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintContent(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintContent(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *ContentListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContentListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintContent(dAtA, i, uint64(m.Status))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintContent(dAtA, i, uint64(m.Limit))
	}
	if len(m.Category) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintContent(dAtA, i, uint64(len(m.Category)))
		i += copy(dAtA[i:], m.Category)
	}
	if m.Offset != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintContent(dAtA, i, uint64(m.Offset))
	}
	if len(m.Language) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintContent(dAtA, i, uint64(len(m.Language)))
		i += copy(dAtA[i:], m.Language)
	}
	if m.OnlyHtmlUrl {
		dAtA[i] = 0x30
		i++
		if m.OnlyHtmlUrl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Sort != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintContent(dAtA, i, uint64(m.Sort))
	}
	if m.Order != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintContent(dAtA, i, uint64(m.Order))
	}
	if len(m.ProfileId) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintContent(dAtA, i, uint64(len(m.ProfileId)))
		i += copy(dAtA[i:], m.ProfileId)
	}
	if len(m.ClientVersion) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintContent(dAtA, i, uint64(len(m.ClientVersion)))
		i += copy(dAtA[i:], m.ClientVersion)
	}
	if len(m.Categories) > 0 {
		for _, s := range m.Categories {
			dAtA[i] = 0x62
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ExceptCategories) > 0 {
		for _, s := range m.ExceptCategories {
			dAtA[i] = 0x6a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ContentListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContentListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Contents) > 0 {
		for _, msg := range m.Contents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintContent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AssetVersion != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintContent(dAtA, i, uint64(m.AssetVersion))
	}
	return i, nil
}

func (m *ContentGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContentGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Slug) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintContent(dAtA, i, uint64(len(m.Slug)))
		i += copy(dAtA[i:], m.Slug)
	}
	return i, nil
}

func encodeVarintContent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Content) Size() (n int) {
	var l int
	_ = l
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovContent(uint64(m.Date))
	}
	if m.Draft {
		n += 2
	}
	l = len(m.WrittenAt)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovContent(uint64(m.Weight))
	}
	if len(m.Keywords) > 0 {
		for _, s := range m.Keywords {
			l = len(s)
			n += 1 + l + sovContent(uint64(l))
		}
	}
	if m.CategoryWeight != 0 {
		n += 1 + sovContent(uint64(m.CategoryWeight))
	}
	l = len(m.Markdown)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovContent(uint64(len(k))) + 1 + len(v) + sovContent(uint64(len(v)))
			n += mapEntrySize + 1 + sovContent(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ContentListRequest) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovContent(uint64(m.Status))
	}
	if m.Limit != 0 {
		n += 1 + sovContent(uint64(m.Limit))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovContent(uint64(m.Offset))
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	if m.OnlyHtmlUrl {
		n += 2
	}
	if m.Sort != 0 {
		n += 1 + sovContent(uint64(m.Sort))
	}
	if m.Order != 0 {
		n += 1 + sovContent(uint64(m.Order))
	}
	l = len(m.ProfileId)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	l = len(m.ClientVersion)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	if len(m.Categories) > 0 {
		for _, s := range m.Categories {
			l = len(s)
			n += 1 + l + sovContent(uint64(l))
		}
	}
	if len(m.ExceptCategories) > 0 {
		for _, s := range m.ExceptCategories {
			l = len(s)
			n += 1 + l + sovContent(uint64(l))
		}
	}
	return n
}

func (m *ContentListResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Contents) > 0 {
		for _, e := range m.Contents {
			l = e.Size()
			n += 1 + l + sovContent(uint64(l))
		}
	}
	if m.AssetVersion != 0 {
		n += 1 + sovContent(uint64(m.AssetVersion))
	}
	return n
}

func (m *ContentGetRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	return n
}

func sovContent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozContent(x uint64) (n int) {
	return sovContent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Content) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Draft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Draft = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrittenAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WrittenAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keywords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keywords = append(m.Keywords, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryWeight", wireType)
			}
			m.CategoryWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryWeight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markdown", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markdown = append(m.Markdown[:0], dAtA[iNdEx:postIndex]...)
			if m.Markdown == nil {
				m.Markdown = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowContent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowContent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthContent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowContent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthContent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipContent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthContent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContentListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContentListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContentListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (ContentListRequest_ListStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyHtmlUrl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnlyHtmlUrl = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= (ContentListRequest_SortBy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= (ContentListRequest_SortOrder(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Categories", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Categories = append(m.Categories, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExceptCategories", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExceptCategories = append(m.ExceptCategories, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContentListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContentListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContentListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = append(m.Contents, &Content{})
			if err := m.Contents[len(m.Contents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetVersion", wireType)
			}
			m.AssetVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContentGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContentGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContentGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthContent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowContent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipContent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthContent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("content.proto", fileDescriptor_content_3ed96300a0b79c54) }

var fileDescriptor_content_3ed96300a0b79c54 = []byte{
	// 791 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x4d, 0x6f, 0xe3, 0x36,
	0x10, 0xb5, 0x22, 0x4b, 0xb1, 0xc7, 0xb1, 0x56, 0x61, 0x17, 0x0b, 0xd6, 0xc0, 0x0a, 0x82, 0xb6,
	0xc5, 0x1a, 0x2d, 0xe0, 0x05, 0xdc, 0x1e, 0x9a, 0x7e, 0x1c, 0xf2, 0xd5, 0x24, 0xc0, 0xb6, 0x0e,
	0x68, 0x77, 0xb7, 0xed, 0x45, 0x50, 0x6c, 0x5a, 0x11, 0x22, 0x8b, 0x2a, 0x49, 0x27, 0xf5, 0xad,
	0x3f, 0xa1, 0xc7, 0x9e, 0xfb, 0x63, 0x8a, 0x3d, 0xf6, 0xdc, 0x53, 0x9b, 0xfd, 0x23, 0x05, 0x29,
	0x46, 0x89, 0x83, 0xcd, 0xde, 0xe6, 0xbd, 0x99, 0x79, 0x24, 0x67, 0x1e, 0x08, 0xdd, 0x29, 0x2b,
	0x24, 0x2d, 0xe4, 0xa0, 0xe4, 0x4c, 0x32, 0xe4, 0x24, 0x65, 0x56, 0x9e, 0xf5, 0x1e, 0xa7, 0x2c,
	0x65, 0x9a, 0x79, 0xa1, 0xa2, 0x2a, 0x19, 0xfd, 0x65, 0xc3, 0xe6, 0x7e, 0x55, 0x8e, 0x10, 0x34,
	0x45, 0xbe, 0x4c, 0xb1, 0x15, 0x5a, 0xfd, 0x36, 0xd1, 0x31, 0x7a, 0x0c, 0x8e, 0xcc, 0x64, 0x4e,
	0xf1, 0x86, 0x26, 0x2b, 0x80, 0x7a, 0xd0, 0xca, 0x93, 0x22, 0x5d, 0x26, 0x29, 0xc5, 0xb6, 0x4e,
	0xd4, 0x58, 0xa9, 0xcc, 0x12, 0x49, 0x71, 0x33, 0xb4, 0xfa, 0x36, 0xd1, 0xb1, 0x52, 0x99, 0xf1,
	0x64, 0x2e, 0xb1, 0x13, 0x5a, 0xfd, 0x16, 0xa9, 0x00, 0x7a, 0x0a, 0x70, 0xc5, 0x33, 0x29, 0x69,
	0x11, 0x27, 0x12, 0xbb, 0x5a, 0xa7, 0x6d, 0x98, 0x5d, 0x89, 0x9e, 0x80, 0x9b, 0x2c, 0xe5, 0x39,
	0xe3, 0x78, 0x53, 0xa7, 0x0c, 0x52, 0x87, 0x4f, 0x13, 0x49, 0x53, 0xc6, 0x57, 0xb8, 0x55, 0x1d,
	0x7e, 0x83, 0x91, 0x0f, 0xf6, 0x92, 0xe7, 0xb8, 0xad, 0x69, 0x15, 0x2a, 0x95, 0x2b, 0x9a, 0xa5,
	0xe7, 0x12, 0x43, 0x68, 0xf5, 0x1d, 0x62, 0x90, 0x52, 0xb9, 0xa0, 0xab, 0x2b, 0xc6, 0x67, 0x02,
	0x77, 0x42, 0x5b, 0xa9, 0xdc, 0x60, 0xf4, 0x1c, 0x1e, 0xdd, 0x28, 0xc6, 0xa6, 0x79, 0x4b, 0x37,
	0x7b, 0x37, 0xf4, 0xeb, 0x5a, 0x64, 0x91, 0xf0, 0x8b, 0x19, 0xbb, 0x2a, 0x70, 0x37, 0xb4, 0xfa,
	0x5b, 0xa4, 0xc6, 0x68, 0x08, 0x6e, 0x99, 0xf0, 0x64, 0x21, 0xb0, 0x17, 0xda, 0xfd, 0xce, 0xb0,
	0x37, 0xd0, 0x7b, 0x18, 0x98, 0x69, 0x0f, 0x4e, 0x75, 0xf2, 0xb0, 0x90, 0x7c, 0x45, 0x4c, 0x65,
	0x6f, 0x07, 0x3a, 0x77, 0x68, 0xf5, 0x9a, 0x0b, 0xba, 0x32, 0xfb, 0x50, 0xa1, 0x1a, 0xe4, 0x65,
	0x92, 0x2f, 0xeb, 0x75, 0x68, 0xf0, 0xe5, 0xc6, 0x17, 0x56, 0xf4, 0x4f, 0x13, 0x90, 0x91, 0x7e,
	0x99, 0x09, 0x49, 0xe8, 0x2f, 0x4b, 0x2a, 0x24, 0xfa, 0x1a, 0x5c, 0x21, 0x13, 0xb9, 0x14, 0x5a,
	0xc5, 0x1b, 0x7e, 0xb4, 0x7e, 0x8b, 0x3b, 0xa5, 0x03, 0x15, 0x8f, 0x75, 0x2d, 0x31, 0x3d, 0xea,
	0xb8, 0x3c, 0x5b, 0x64, 0x52, 0x1f, 0xe7, 0x90, 0x0a, 0xac, 0x2d, 0xc0, 0xbe, 0xb7, 0x80, 0x27,
	0xe0, 0xb2, 0xf9, 0x5c, 0x50, 0xa9, 0xf7, 0xef, 0x10, 0x83, 0xd6, 0x1c, 0xe3, 0xdc, 0x73, 0x4c,
	0x04, 0x5d, 0x56, 0xe4, 0xab, 0xf8, 0x5c, 0x2e, 0xf2, 0x58, 0xad, 0xcf, 0xd5, 0x2e, 0xe9, 0x28,
	0xf2, 0x58, 0x2e, 0xf2, 0x1f, 0x78, 0x8e, 0x3e, 0x87, 0xa6, 0x60, 0x5c, 0x6a, 0x2b, 0x78, 0xc3,
	0xf0, 0xe1, 0x57, 0x8c, 0x19, 0x97, 0x7b, 0x2b, 0xa2, 0xab, 0xd1, 0x0e, 0x38, 0x8c, 0xcf, 0x28,
	0xd7, 0x3e, 0xf1, 0x86, 0xcf, 0xde, 0xdf, 0x36, 0x52, 0xa5, 0xa4, 0xea, 0x50, 0xe6, 0x2c, 0x39,
	0x9b, 0x67, 0x39, 0x8d, 0xb3, 0x99, 0xf6, 0x4e, 0x9b, 0xb4, 0x0d, 0x73, 0x32, 0x43, 0x1f, 0x83,
	0x37, 0xcd, 0x33, 0x5a, 0xc8, 0xf8, 0x92, 0x72, 0x91, 0xb1, 0x02, 0x77, 0x74, 0x49, 0xb7, 0x62,
	0x5f, 0x55, 0x24, 0x0a, 0x00, 0xcc, 0x68, 0x32, 0x2a, 0xf0, 0x96, 0xf6, 0xd9, 0x1d, 0x06, 0x7d,
	0x0a, 0xdb, 0xf4, 0xd7, 0x29, 0x2d, 0x65, 0x7c, 0xa7, 0xac, 0xab, 0xcb, 0xfc, 0x2a, 0xb1, 0x5f,
	0xf3, 0xd1, 0x0e, 0xc0, 0xed, 0x8e, 0x50, 0x0b, 0x9a, 0x7b, 0xa3, 0xc9, 0xb1, 0xdf, 0x40, 0x1e,
	0xc0, 0xe8, 0xfb, 0x97, 0x3f, 0xc5, 0x07, 0x64, 0xf7, 0xdb, 0x89, 0x6f, 0xa1, 0x6d, 0xe8, 0x6a,
	0xbc, 0x7b, 0x7a, 0x4a, 0x46, 0xaf, 0x0e, 0x0f, 0xfc, 0x8d, 0x28, 0x00, 0xb7, 0x1a, 0x0c, 0x02,
	0x70, 0x5f, 0x1f, 0x9e, 0x1c, 0x1d, 0x4f, 0xfc, 0x86, 0x92, 0x98, 0x9c, 0x7c, 0x77, 0xe8, 0x5b,
	0xd1, 0x53, 0x68, 0xd7, 0x13, 0x40, 0x9b, 0x60, 0x1f, 0x8c, 0xf7, 0xfd, 0x86, 0x0a, 0x76, 0xc7,
	0xfb, 0xbe, 0x15, 0xcd, 0xe1, 0x83, 0xb5, 0x99, 0x89, 0x92, 0x15, 0x82, 0xa2, 0x4f, 0xa0, 0x65,
	0xbe, 0x1a, 0x65, 0x2f, 0x65, 0x72, 0x6f, 0x7d, 0xc2, 0xa4, 0xce, 0xa3, 0x67, 0xd0, 0x4d, 0x84,
	0xa0, 0xb7, 0xf3, 0xaa, 0x2c, 0xb5, 0xa5, 0x49, 0x33, 0xae, 0xe8, 0x39, 0x6c, 0x9b, 0xce, 0x23,
	0x5a, 0x5b, 0xf8, 0x1d, 0xdf, 0xd2, 0xf0, 0x37, 0x0b, 0x3c, 0x53, 0x39, 0xa6, 0xfc, 0x32, 0x9b,
	0x52, 0xf4, 0x0d, 0x34, 0xd5, 0xe5, 0xd0, 0x87, 0x0f, 0x2e, 0xb9, 0xd7, 0x7b, 0x57, 0xca, 0xbc,
	0xe5, 0x05, 0xd8, 0x47, 0x54, 0x22, 0xbc, 0x5e, 0x72, 0x7b, 0x8d, 0xde, 0xbd, 0xa7, 0xed, 0x7d,
	0xf5, 0xe6, 0xbf, 0xa0, 0xf1, 0xe6, 0x3a, 0xb0, 0xfe, 0xbe, 0x0e, 0xac, 0x7f, 0xaf, 0x03, 0xeb,
	0xf7, 0xb7, 0x41, 0xe3, 0x8f, 0xb7, 0x41, 0x03, 0x1e, 0x4d, 0xd9, 0x62, 0xc0, 0xa4, 0xc8, 0x16,
	0x6c, 0x90, 0xf2, 0x72, 0x7a, 0x6a, 0xfd, 0xdc, 0xaa, 0x60, 0x79, 0xf6, 0xe7, 0x86, 0x3d, 0x9a,
	0x8c, 0x7f, 0x6c, 0x9c, 0xb9, 0xfa, 0xff, 0xfd, 0xec, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf4,
	0xb1, 0xc8, 0x49, 0xad, 0x05, 0x00, 0x00,
}

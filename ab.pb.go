// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ab.proto

package otsimopb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// skipping weak import gogoproto "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ABTestGroup struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AppId                string   `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Weight               int32    `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	Active               bool     `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ABTestGroup) Reset()         { *m = ABTestGroup{} }
func (m *ABTestGroup) String() string { return proto.CompactTextString(m) }
func (*ABTestGroup) ProtoMessage()    {}
func (*ABTestGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab_3702268ee43a7ae3, []int{0}
}
func (m *ABTestGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ABTestGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ABTestGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ABTestGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ABTestGroup.Merge(dst, src)
}
func (m *ABTestGroup) XXX_Size() int {
	return m.Size()
}
func (m *ABTestGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ABTestGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ABTestGroup proto.InternalMessageInfo

type ABDisableReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AppId                string   `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ABDisableReq) Reset()         { *m = ABDisableReq{} }
func (m *ABDisableReq) String() string { return proto.CompactTextString(m) }
func (*ABDisableReq) ProtoMessage()    {}
func (*ABDisableReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab_3702268ee43a7ae3, []int{1}
}
func (m *ABDisableReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ABDisableReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ABDisableReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ABDisableReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ABDisableReq.Merge(dst, src)
}
func (m *ABDisableReq) XXX_Size() int {
	return m.Size()
}
func (m *ABDisableReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ABDisableReq.DiscardUnknown(m)
}

var xxx_messageInfo_ABDisableReq proto.InternalMessageInfo

type ListTestGroupReq struct {
	AppId                string   `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTestGroupReq) Reset()         { *m = ListTestGroupReq{} }
func (m *ListTestGroupReq) String() string { return proto.CompactTextString(m) }
func (*ListTestGroupReq) ProtoMessage()    {}
func (*ListTestGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab_3702268ee43a7ae3, []int{2}
}
func (m *ListTestGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTestGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTestGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListTestGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTestGroupReq.Merge(dst, src)
}
func (m *ListTestGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *ListTestGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTestGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListTestGroupReq proto.InternalMessageInfo

type AppTestingStatus struct {
	Version              int32          `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Tests                []*ABTestGroup `protobuf:"bytes,2,rep,name=tests" json:"tests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AppTestingStatus) Reset()         { *m = AppTestingStatus{} }
func (m *AppTestingStatus) String() string { return proto.CompactTextString(m) }
func (*AppTestingStatus) ProtoMessage()    {}
func (*AppTestingStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab_3702268ee43a7ae3, []int{3}
}
func (m *AppTestingStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppTestingStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppTestingStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppTestingStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppTestingStatus.Merge(dst, src)
}
func (m *AppTestingStatus) XXX_Size() int {
	return m.Size()
}
func (m *AppTestingStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AppTestingStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AppTestingStatus proto.InternalMessageInfo

type CheckUserStatusReq struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckUserStatusReq) Reset()         { *m = CheckUserStatusReq{} }
func (m *CheckUserStatusReq) String() string { return proto.CompactTextString(m) }
func (*CheckUserStatusReq) ProtoMessage()    {}
func (*CheckUserStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab_3702268ee43a7ae3, []int{4}
}
func (m *CheckUserStatusReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckUserStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckUserStatusReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckUserStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckUserStatusReq.Merge(dst, src)
}
func (m *CheckUserStatusReq) XXX_Size() int {
	return m.Size()
}
func (m *CheckUserStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckUserStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_CheckUserStatusReq proto.InternalMessageInfo

type ChangeUserTestGroupReq struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AppId  string `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// TestGroupName is empty for no testing group
	TestGroupName        string   `protobuf:"bytes,4,opt,name=test_group_name,json=testGroupName,proto3" json:"test_group_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeUserTestGroupReq) Reset()         { *m = ChangeUserTestGroupReq{} }
func (m *ChangeUserTestGroupReq) String() string { return proto.CompactTextString(m) }
func (*ChangeUserTestGroupReq) ProtoMessage()    {}
func (*ChangeUserTestGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab_3702268ee43a7ae3, []int{5}
}
func (m *ChangeUserTestGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeUserTestGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeUserTestGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangeUserTestGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeUserTestGroupReq.Merge(dst, src)
}
func (m *ChangeUserTestGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *ChangeUserTestGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeUserTestGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeUserTestGroupReq proto.InternalMessageInfo

type UserTestGroupStatus struct {
	UserId               string                          `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Apps                 []*UserTestGroupStatus_AppGroup `protobuf:"bytes,2,rep,name=apps" json:"apps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *UserTestGroupStatus) Reset()         { *m = UserTestGroupStatus{} }
func (m *UserTestGroupStatus) String() string { return proto.CompactTextString(m) }
func (*UserTestGroupStatus) ProtoMessage()    {}
func (*UserTestGroupStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab_3702268ee43a7ae3, []int{6}
}
func (m *UserTestGroupStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTestGroupStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTestGroupStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserTestGroupStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTestGroupStatus.Merge(dst, src)
}
func (m *UserTestGroupStatus) XXX_Size() int {
	return m.Size()
}
func (m *UserTestGroupStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTestGroupStatus.DiscardUnknown(m)
}

var xxx_messageInfo_UserTestGroupStatus proto.InternalMessageInfo

type UserTestGroupStatus_AppGroup struct {
	AppId                string   `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	TestGroup            string   `protobuf:"bytes,2,opt,name=test_group,json=testGroup,proto3" json:"test_group,omitempty"`
	Version              int32    `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserTestGroupStatus_AppGroup) Reset()         { *m = UserTestGroupStatus_AppGroup{} }
func (m *UserTestGroupStatus_AppGroup) String() string { return proto.CompactTextString(m) }
func (*UserTestGroupStatus_AppGroup) ProtoMessage()    {}
func (*UserTestGroupStatus_AppGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab_3702268ee43a7ae3, []int{6, 0}
}
func (m *UserTestGroupStatus_AppGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTestGroupStatus_AppGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTestGroupStatus_AppGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserTestGroupStatus_AppGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTestGroupStatus_AppGroup.Merge(dst, src)
}
func (m *UserTestGroupStatus_AppGroup) XXX_Size() int {
	return m.Size()
}
func (m *UserTestGroupStatus_AppGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTestGroupStatus_AppGroup.DiscardUnknown(m)
}

var xxx_messageInfo_UserTestGroupStatus_AppGroup proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ABTestGroup)(nil), "otsimo.abtest.ABTestGroup")
	proto.RegisterType((*ABDisableReq)(nil), "otsimo.abtest.ABDisableReq")
	proto.RegisterType((*ListTestGroupReq)(nil), "otsimo.abtest.ListTestGroupReq")
	proto.RegisterType((*AppTestingStatus)(nil), "otsimo.abtest.AppTestingStatus")
	proto.RegisterType((*CheckUserStatusReq)(nil), "otsimo.abtest.CheckUserStatusReq")
	proto.RegisterType((*ChangeUserTestGroupReq)(nil), "otsimo.abtest.ChangeUserTestGroupReq")
	proto.RegisterType((*UserTestGroupStatus)(nil), "otsimo.abtest.UserTestGroupStatus")
	proto.RegisterType((*UserTestGroupStatus_AppGroup)(nil), "otsimo.abtest.UserTestGroupStatus.AppGroup")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ABTestClient is the client API for ABTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ABTestClient interface {
	// CreateTestGroup
	CreateTestGroup(ctx context.Context, in *ABTestGroup, opts ...grpc.CallOption) (*AppTestingStatus, error)
	// DisableTestGroup
	DisableTestGroup(ctx context.Context, in *ABDisableReq, opts ...grpc.CallOption) (*AppTestingStatus, error)
	// ListTestGroupsForApp
	ListTestGroupsForApp(ctx context.Context, in *ListTestGroupReq, opts ...grpc.CallOption) (*AppTestingStatus, error)
	CheckUserStatus(ctx context.Context, in *CheckUserStatusReq, opts ...grpc.CallOption) (*UserTestGroupStatus, error)
	ChangeUserTestGroup(ctx context.Context, in *ChangeUserTestGroupReq, opts ...grpc.CallOption) (*UserTestGroupStatus, error)
}

type aBTestClient struct {
	cc *grpc.ClientConn
}

func NewABTestClient(cc *grpc.ClientConn) ABTestClient {
	return &aBTestClient{cc}
}

func (c *aBTestClient) CreateTestGroup(ctx context.Context, in *ABTestGroup, opts ...grpc.CallOption) (*AppTestingStatus, error) {
	out := new(AppTestingStatus)
	err := c.cc.Invoke(ctx, "/otsimo.abtest.ABTest/CreateTestGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBTestClient) DisableTestGroup(ctx context.Context, in *ABDisableReq, opts ...grpc.CallOption) (*AppTestingStatus, error) {
	out := new(AppTestingStatus)
	err := c.cc.Invoke(ctx, "/otsimo.abtest.ABTest/DisableTestGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBTestClient) ListTestGroupsForApp(ctx context.Context, in *ListTestGroupReq, opts ...grpc.CallOption) (*AppTestingStatus, error) {
	out := new(AppTestingStatus)
	err := c.cc.Invoke(ctx, "/otsimo.abtest.ABTest/ListTestGroupsForApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBTestClient) CheckUserStatus(ctx context.Context, in *CheckUserStatusReq, opts ...grpc.CallOption) (*UserTestGroupStatus, error) {
	out := new(UserTestGroupStatus)
	err := c.cc.Invoke(ctx, "/otsimo.abtest.ABTest/CheckUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBTestClient) ChangeUserTestGroup(ctx context.Context, in *ChangeUserTestGroupReq, opts ...grpc.CallOption) (*UserTestGroupStatus, error) {
	out := new(UserTestGroupStatus)
	err := c.cc.Invoke(ctx, "/otsimo.abtest.ABTest/ChangeUserTestGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ABTestServer is the server API for ABTest service.
type ABTestServer interface {
	// CreateTestGroup
	CreateTestGroup(context.Context, *ABTestGroup) (*AppTestingStatus, error)
	// DisableTestGroup
	DisableTestGroup(context.Context, *ABDisableReq) (*AppTestingStatus, error)
	// ListTestGroupsForApp
	ListTestGroupsForApp(context.Context, *ListTestGroupReq) (*AppTestingStatus, error)
	CheckUserStatus(context.Context, *CheckUserStatusReq) (*UserTestGroupStatus, error)
	ChangeUserTestGroup(context.Context, *ChangeUserTestGroupReq) (*UserTestGroupStatus, error)
}

func RegisterABTestServer(s *grpc.Server, srv ABTestServer) {
	s.RegisterService(&_ABTest_serviceDesc, srv)
}

func _ABTest_CreateTestGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ABTestGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABTestServer).CreateTestGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.abtest.ABTest/CreateTestGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABTestServer).CreateTestGroup(ctx, req.(*ABTestGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABTest_DisableTestGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ABDisableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABTestServer).DisableTestGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.abtest.ABTest/DisableTestGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABTestServer).DisableTestGroup(ctx, req.(*ABDisableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABTest_ListTestGroupsForApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABTestServer).ListTestGroupsForApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.abtest.ABTest/ListTestGroupsForApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABTestServer).ListTestGroupsForApp(ctx, req.(*ListTestGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABTest_CheckUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABTestServer).CheckUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.abtest.ABTest/CheckUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABTestServer).CheckUserStatus(ctx, req.(*CheckUserStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABTest_ChangeUserTestGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserTestGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABTestServer).ChangeUserTestGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.abtest.ABTest/ChangeUserTestGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABTestServer).ChangeUserTestGroup(ctx, req.(*ChangeUserTestGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ABTest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "otsimo.abtest.ABTest",
	HandlerType: (*ABTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTestGroup",
			Handler:    _ABTest_CreateTestGroup_Handler,
		},
		{
			MethodName: "DisableTestGroup",
			Handler:    _ABTest_DisableTestGroup_Handler,
		},
		{
			MethodName: "ListTestGroupsForApp",
			Handler:    _ABTest_ListTestGroupsForApp_Handler,
		},
		{
			MethodName: "CheckUserStatus",
			Handler:    _ABTest_CheckUserStatus_Handler,
		},
		{
			MethodName: "ChangeUserTestGroup",
			Handler:    _ABTest_ChangeUserTestGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ab.proto",
}

func (m *ABTestGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ABTestGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.AppId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAb(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAb(dAtA, i, uint64(m.Weight))
	}
	if m.Active {
		dAtA[i] = 0x20
		i++
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ABDisableReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ABDisableReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.AppId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAb(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListTestGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTestGroupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAb(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AppTestingStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppTestingStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAb(dAtA, i, uint64(m.Version))
	}
	if len(m.Tests) > 0 {
		for _, msg := range m.Tests {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckUserStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserStatusReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAb(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChangeUserTestGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeUserTestGroupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAb(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.AppId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAb(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	if len(m.TestGroupName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAb(dAtA, i, uint64(len(m.TestGroupName)))
		i += copy(dAtA[i:], m.TestGroupName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserTestGroupStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTestGroupStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAb(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.Apps) > 0 {
		for _, msg := range m.Apps {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserTestGroupStatus_AppGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTestGroupStatus_AppGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAb(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	if len(m.TestGroup) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAb(dAtA, i, uint64(len(m.TestGroup)))
		i += copy(dAtA[i:], m.TestGroup)
	}
	if m.Version != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAb(dAtA, i, uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintAb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ABTestGroup) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAb(uint64(l))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovAb(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovAb(uint64(m.Weight))
	}
	if m.Active {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ABDisableReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAb(uint64(l))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovAb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTestGroupReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovAb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppTestingStatus) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovAb(uint64(m.Version))
	}
	if len(m.Tests) > 0 {
		for _, e := range m.Tests {
			l = e.Size()
			n += 1 + l + sovAb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckUserStatusReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovAb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangeUserTestGroupReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovAb(uint64(l))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovAb(uint64(l))
	}
	l = len(m.TestGroupName)
	if l > 0 {
		n += 1 + l + sovAb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserTestGroupStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovAb(uint64(l))
	}
	if len(m.Apps) > 0 {
		for _, e := range m.Apps {
			l = e.Size()
			n += 1 + l + sovAb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserTestGroupStatus_AppGroup) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovAb(uint64(l))
	}
	l = len(m.TestGroup)
	if l > 0 {
		n += 1 + l + sovAb(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovAb(uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAb(x uint64) (n int) {
	return sovAb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ABTestGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ABTestGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ABTestGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ABDisableReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ABDisableReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ABDisableReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTestGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTestGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTestGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppTestingStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppTestingStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppTestingStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tests = append(m.Tests, &ABTestGroup{})
			if err := m.Tests[len(m.Tests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeUserTestGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeUserTestGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeUserTestGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTestGroupStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTestGroupStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTestGroupStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apps = append(m.Apps, &UserTestGroupStatus_AppGroup{})
			if err := m.Apps[len(m.Apps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTestGroupStatus_AppGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ab.proto", fileDescriptor_ab_3702268ee43a7ae3) }

var fileDescriptor_ab_3702268ee43a7ae3 = []byte{
	// 518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xcd, 0xc4, 0x89, 0x9b, 0xde, 0x7e, 0x55, 0xa2, 0x69, 0xbf, 0x62, 0x19, 0x61, 0x82, 0x25,
	0x50, 0x10, 0xc2, 0xa0, 0xb2, 0x40, 0xac, 0x90, 0x13, 0x04, 0xaa, 0x84, 0x4a, 0xe5, 0x16, 0xa9,
	0xea, 0x82, 0x30, 0x4e, 0x46, 0x8e, 0x05, 0xc9, 0x0c, 0x9e, 0x49, 0x79, 0x15, 0xd6, 0x3c, 0x09,
	0xcb, 0x4a, 0x6c, 0x78, 0x04, 0x08, 0x2f, 0x82, 0xc6, 0x3f, 0xf5, 0x4f, 0x12, 0x5a, 0x76, 0xbe,
	0x33, 0xf7, 0x9e, 0x7b, 0xe6, 0x9c, 0x23, 0x43, 0x8b, 0xf8, 0x0e, 0x8f, 0x98, 0x64, 0x78, 0x9b,
	0x49, 0x11, 0x4e, 0x99, 0x43, 0x7c, 0x49, 0x85, 0x34, 0x77, 0x03, 0x16, 0xb0, 0xf8, 0xe6, 0x91,
	0xfa, 0x4a, 0x9a, 0xec, 0x09, 0x6c, 0xb9, 0xfd, 0x13, 0x2a, 0xe4, 0xab, 0x88, 0xcd, 0x39, 0xc6,
	0xd0, 0x98, 0x91, 0x29, 0x35, 0x50, 0x17, 0xf5, 0x36, 0xbd, 0xf8, 0x1b, 0xff, 0x0f, 0x3a, 0xe1,
	0x7c, 0x18, 0x8e, 0x8d, 0x7a, 0x7c, 0xda, 0x24, 0x9c, 0x1f, 0x8c, 0xf1, 0x1e, 0xe8, 0x9f, 0x69,
	0x18, 0x4c, 0xa4, 0xa1, 0x75, 0x51, 0xaf, 0xe9, 0xa5, 0x95, 0x3a, 0x27, 0x23, 0x19, 0x9e, 0x53,
	0xa3, 0xd1, 0x45, 0xbd, 0x96, 0x97, 0x56, 0xf6, 0x33, 0xf8, 0xcf, 0xed, 0xbf, 0x08, 0x05, 0xf1,
	0x3f, 0x52, 0x8f, 0x7e, 0xfa, 0x87, 0x55, 0xf6, 0x7d, 0xe8, 0xbc, 0x0e, 0x85, 0xbc, 0xa4, 0xa9,
	0xc6, 0xf3, 0x56, 0x54, 0x6c, 0x7d, 0x07, 0x1d, 0x97, 0x73, 0xd5, 0x19, 0xce, 0x82, 0x63, 0x49,
	0xe4, 0x5c, 0x60, 0x03, 0x36, 0xce, 0x69, 0x24, 0x42, 0x36, 0x8b, 0x7b, 0x9b, 0x5e, 0x56, 0xe2,
	0xc7, 0xd0, 0x54, 0xda, 0x08, 0xa3, 0xde, 0xd5, 0x7a, 0x5b, 0xfb, 0xa6, 0x53, 0x92, 0xcc, 0x29,
	0x28, 0xe3, 0x25, 0x8d, 0xf6, 0x43, 0xc0, 0x83, 0x09, 0x1d, 0x7d, 0x78, 0x2b, 0x68, 0x94, 0xc0,
	0x2b, 0x32, 0x37, 0x60, 0x63, 0x2e, 0x68, 0x94, 0xb3, 0xd1, 0x55, 0x79, 0x30, 0xb6, 0x39, 0xec,
	0x0d, 0x26, 0x64, 0x16, 0x50, 0xd5, 0x5f, 0xe2, 0xbf, 0x6e, 0xa4, 0xf0, 0x30, 0xad, 0x28, 0xf7,
	0x3d, 0x68, 0x2b, 0x06, 0xc3, 0x40, 0x01, 0x0c, 0x63, 0xe5, 0x1a, 0xf1, 0xfd, 0xb6, 0xcc, 0x60,
	0x0f, 0xc9, 0x94, 0xda, 0xdf, 0x11, 0xec, 0x94, 0x96, 0xa5, 0x22, 0xac, 0xdd, 0xf7, 0x1c, 0x1a,
	0x84, 0xf3, 0x4c, 0x82, 0x07, 0x15, 0x09, 0x56, 0x40, 0x39, 0x2e, 0xe7, 0xc9, 0x33, 0xe2, 0x41,
	0xf3, 0x0c, 0x5a, 0xd9, 0xc9, 0x1a, 0x57, 0xf0, 0x2d, 0x80, 0x9c, 0x7c, 0xea, 0xed, 0xe6, 0x25,
	0xef, 0xa2, 0x41, 0x5a, 0xc9, 0xa0, 0xfd, 0x6f, 0x1a, 0xe8, 0x89, 0x0b, 0xf8, 0x10, 0xda, 0x83,
	0x88, 0x12, 0x49, 0xf3, 0xb4, 0xfe, 0xc5, 0x2f, 0xf3, 0x76, 0xf5, 0xae, 0x9a, 0x8a, 0x23, 0xe8,
	0xa4, 0x69, 0xcc, 0x01, 0x6f, 0x2e, 0x01, 0xe6, 0x81, 0xbd, 0x1a, 0xf1, 0x14, 0x76, 0x4b, 0x31,
	0x15, 0x2f, 0x59, 0xe4, 0x72, 0x8e, 0xab, 0x83, 0xd5, 0x2c, 0x5f, 0x07, 0xb9, 0x5d, 0x49, 0x1d,
	0xbe, 0x53, 0x99, 0x59, 0x4e, 0xa5, 0x69, 0x5f, 0xed, 0x25, 0x7e, 0x0f, 0x3b, 0x2b, 0x02, 0x8a,
	0xef, 0x2e, 0xa1, 0xaf, 0x0a, 0xf1, 0x75, 0x36, 0xf4, 0x9f, 0x5e, 0xfc, 0xb2, 0x6a, 0x17, 0x0b,
	0x0b, 0xfd, 0x58, 0x58, 0xe8, 0xe7, 0xc2, 0x42, 0x5f, 0x7e, 0x5b, 0x35, 0x68, 0x8f, 0xd8, 0x34,
	0x1b, 0x0e, 0x22, 0x3e, 0x3a, 0x42, 0x67, 0xad, 0xa4, 0xe4, 0xfe, 0xd7, 0xba, 0xf6, 0xe6, 0xe4,
	0xf8, 0xb4, 0xe6, 0xeb, 0xf1, 0x3f, 0xea, 0xc9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd0, 0xaa,
	0x48, 0xf8, 0xd4, 0x04, 0x00, 0x00,
}

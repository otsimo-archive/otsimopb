// Code generated by protoc-gen-js-fetch.
// DO NOT EDIT!


export type Gender =  "UNKNOWN"  | "MALE"  | "FEMALE" ;
export const Gender_UNKNOWN: Gender = "UNKNOWN";
export const Gender_MALE: Gender = "MALE";
export const Gender_FEMALE: Gender = "FEMALE";

export const ALL_Gender_VALUES: Gender[] = [Gender_UNKNOWN,Gender_MALE,Gender_FEMALE];

export type GameVideoSize =  "SMALL"  | "MEDIUM"  | "BIG" ;
export const GameVideoSize_SMALL: GameVideoSize = "SMALL";
export const GameVideoSize_MEDIUM: GameVideoSize = "MEDIUM";
export const GameVideoSize_BIG: GameVideoSize = "BIG";

export const ALL_GameVideoSize_VALUES: GameVideoSize[] = [GameVideoSize_SMALL,GameVideoSize_MEDIUM,GameVideoSize_BIG];

export type ReleaseState =  "CREATED"  | "DEVELOPMENT"  | "WAITING"  | "REJECTED"  | "VALIDATED"  | "PRODUCTION" ;
export const ReleaseState_CREATED: ReleaseState = "CREATED";
export const ReleaseState_DEVELOPMENT: ReleaseState = "DEVELOPMENT";
export const ReleaseState_WAITING: ReleaseState = "WAITING";
export const ReleaseState_REJECTED: ReleaseState = "REJECTED";
export const ReleaseState_VALIDATED: ReleaseState = "VALIDATED";
export const ReleaseState_PRODUCTION: ReleaseState = "PRODUCTION";

export const ALL_ReleaseState_VALUES: ReleaseState[] = [ReleaseState_CREATED,ReleaseState_DEVELOPMENT,ReleaseState_WAITING,ReleaseState_REJECTED,ReleaseState_VALIDATED,ReleaseState_PRODUCTION];

export interface Address {
  streetAddress?: string;
  city?: string;
  state?: string;
  zipCode?: string;
  countryCode?: string;
}

export const Address_streetAddress = "street_address";
export const Address_city = "city";
export const Address_state = "state";
export const Address_zipCode = "zip_code";
export const Address_countryCode = "country_code";
export interface Profile {
  id?: string;
  email?: string;
  firstName?: string;
  lastName?: string;
  language?: string;
  mobilePhone?: string;
  address?: Address;
  createdAt?: string|number;
  lastUpdated?: string|number;
  locale?: string;
  timezone?: number;
  country?: string;
  labels?: { [key: string]: string };
		}

export const Profile_id = "id";
export const Profile_email = "email";
export const Profile_firstName = "first_name";
export const Profile_lastName = "last_name";
export const Profile_language = "language";
export const Profile_mobilePhone = "mobile_phone";
export const Profile_address = "address";
export const Profile_createdAt = "created_at";
export const Profile_lastUpdated = "last_updated";
export const Profile_locale = "locale";
export const Profile_timezone = "timezone";
export const Profile_country = "country";
export const Profile_labels = "labels";
export interface ChildGameEntry {
  id?: string;
  active?: boolean;
  dashboardIndex?: number;
  settings?: string;
  addedAt?: string|number;
  activationChangedAt?: string|number;
  updatedAt?: string|number;
  localSettings?: string;
  localSettingsVersion?: string|number;
/**
LimitAccess permits user to access to game only if on of the contitions
match
*/
  limitAccess?: string[];
}

export const ChildGameEntry_id = "id";
export const ChildGameEntry_active = "active";
export const ChildGameEntry_dashboardIndex = "dashboard_index";
export const ChildGameEntry_settings = "settings";
export const ChildGameEntry_addedAt = "added_at";
export const ChildGameEntry_activationChangedAt = "activation_changed_at";
export const ChildGameEntry_updatedAt = "updated_at";
export const ChildGameEntry_localSettings = "local_settings";
export const ChildGameEntry_localSettingsVersion = "local_settings_version";
export const ChildGameEntry_limitAccess = "limit_access";
export interface Child {
  id?: string;
  parentId?: string;
  firstName?: string;
  lastName?: string;
  birthDay?: string|number;
  gender?: Gender;
  language?: string;
  games?: ChildGameEntry[];
  active?: boolean;
  loggedIn?: boolean;
  soundsEnabled?: boolean;
  locale?: string;
  createdAt?: string|number;
  lastUpdated?: string|number;
  childInfo?: { [key: string]: string };
		  totalStarCount?: number;
  levelStarCount?: number;
  level?: number;
  badges?: Badge[];
}

export const Child_id = "id";
export const Child_parentId = "parent_id";
export const Child_firstName = "first_name";
export const Child_lastName = "last_name";
export const Child_birthDay = "birth_day";
export const Child_gender = "gender";
export const Child_language = "language";
export const Child_games = "games";
export const Child_active = "active";
export const Child_loggedIn = "logged_in";
export const Child_soundsEnabled = "sounds_enabled";
export const Child_locale = "locale";
export const Child_createdAt = "created_at";
export const Child_lastUpdated = "last_updated";
export const Child_childInfo = "child_info";
export const Child_totalStarCount = "total_star_count";
export const Child_levelStarCount = "level_star_count";
export const Child_level = "level";
export const Child_badges = "badges";
export interface Badge {
  name?: string;
  createdAt?: string|number;
  level?: number;
}

export const Badge_name = "name";
export const Badge_createdAt = "created_at";
export const Badge_level = "level";
export interface Author {
  name?: string;
  email?: string;
}

export const Author_name = "name";
export const Author_email = "email";
export interface GameMetadata {
  language?: string;
/**
Visible Name
*/
  visibleName?: string;
/**
Summary is summary of game
*/
  summary?: string;
/**
Description
*/
  description?: string;
/**
Logo is a rectangle image
*/
  logo?: string;
/**
Icon is a square image
*/
  icon?: string;
/**
Keywords
*/
  keywords?: string[];
/**
Images are image files that show on market
*/
  images?: string[];
/**
InfoSlug is the id of the content which describes how to play this game
*/
  infoSlug?: string;
/**
Assets are asset folders or paths for this language
*/
  assets?: string[];
/**
Localized Annotations
*/
  annotations?: { [key: string]: string };
		/**
Videos are preview videos that show on market
*/
  videos?: GameVideo[];
}

export const GameMetadata_language = "language";
export const GameMetadata_visibleName = "visible_name";
export const GameMetadata_summary = "summary";
export const GameMetadata_description = "description";
export const GameMetadata_logo = "logo";
export const GameMetadata_icon = "icon";
export const GameMetadata_keywords = "keywords";
export const GameMetadata_images = "images";
export const GameMetadata_infoSlug = "info_slug";
export const GameMetadata_assets = "assets";
export const GameMetadata_annotations = "annotations";
export const GameMetadata_videos = "videos";
export interface GameVideoURL {
  url?: string;
  size?: GameVideoSize;
}

export const GameVideoURL_url = "url";
export const GameVideoURL_size = "size";
export interface GameVideo {
  tags?: string[];
  urls?: GameVideoURL[];
}

export const GameVideo_tags = "tags";
export const GameVideo_urls = "urls";
export interface GameManifest {
/**
Unique Name of game
*/
  uniqueName?: string;
/**
Licence
*/
  licence?: string;
/**
Languages
*/
  languages?: string[];
/**
Homepage is the website of game
*/
  homepage?: string;
/**
Main points to index.html file
*/
  main?: string;
/**
Version is current version for using on manifest file
*/
  version?: string;
/**
Authors is for using at manifest file
*/
  authors?: Author[];
/**
Repository
*/
  repository?: string;
/**
SupportedOrientations are the orientations that can be used for this app
*/
  supportedOrientations?: string[];
/**
Metadata information for each languages
*/
  metadata?: GameMetadata[];
/**
Exclude directories when building
*/
  exclude?: string[];
/**
Settings.json path
*/
  settings?: string;
/**
KV directory path
*/
  kvPath?: string;
/**
DeveloperName is the visible developer name
*/
  developerName?: string;
/**
DefaultLanguage
*/
  defaultLanguage?: string;
/**
Loading Background Color of the Game
*/
  loadingColor?: string;
/**
Capabilities are required host app features. The most basic capability is
'sandbox'.
*/
  capabilities?: string[];
/**
AbTest determines whether or not this version is for ab testing
*/
  abTest?: string;
/**
Labels are string key value pairs
*/
  labels?: { [key: string]: string };
		/**
ManifestVersion
*/
  manifestVersion?: number;
  options?: { [key: string]: GameOption };
		  isMultiScene?: boolean;
  deviceFilter?: { [key: string]: FilterParams };
		}

export const GameManifest_uniqueName = "unique_name";
export const GameManifest_licence = "licence";
export const GameManifest_languages = "languages";
export const GameManifest_homepage = "homepage";
export const GameManifest_main = "main";
export const GameManifest_version = "version";
export const GameManifest_authors = "authors";
export const GameManifest_repository = "repository";
export const GameManifest_supportedOrientations = "supported_orientations";
export const GameManifest_metadata = "metadata";
export const GameManifest_exclude = "exclude";
export const GameManifest_settings = "settings";
export const GameManifest_kvPath = "kv_path";
export const GameManifest_developerName = "developer_name";
export const GameManifest_defaultLanguage = "default_language";
export const GameManifest_loadingColor = "loading_color";
export const GameManifest_capabilities = "capabilities";
export const GameManifest_abTest = "ab_test";
export const GameManifest_labels = "labels";
export const GameManifest_manifestVersion = "manifest_version";
export const GameManifest_options = "options";
export const GameManifest_isMultiScene = "is_multi_scene";
export const GameManifest_deviceFilter = "device_filter";
export interface GameEnumGroup {
  key?: string;
  defaultValue?: string;
  values?: string[];
}

export const GameEnumGroup_key = "key";
export const GameEnumGroup_defaultValue = "default_value";
export const GameEnumGroup_values = "values";
export interface FilterParams {
  exclude?: string[];
  include?: string[];
}

export const FilterParams_exclude = "exclude";
export const FilterParams_include = "include";
export interface GameSceneProps {
/**
Index of the scene or category
*/
  index?: number;
/**
Languages of the
*/
  languages?: string[];
/**
ParentId of the scene. Can be empty or a category
*/
  parentId?: string;
/**
CanOverrideImage enables overriding scene image.
*/
  canOverrideImage?: boolean;
/**
ActiveAfter is a date YYYY-MM-DD formated string.
*/
  activeAfter?: string;
}

export const GameSceneProps_index = "index";
export const GameSceneProps_languages = "languages";
export const GameSceneProps_parentId = "parent_id";
export const GameSceneProps_canOverrideImage = "can_override_image";
export const GameSceneProps_activeAfter = "active_after";
export interface GameOption {
  id?: string;
/**
Type is determines what kind of option is this: string, number, boolean,
scene, category
*/
  type?: string;
/**
Description of the option
*/
  description?: string;
/**
Default value of option.
*/
  default?: string;
/**
Enum is limits of string values
*/
  enum?: string[];
/**
Format of the string
*/
  format?: string;
/**
MinValue can be used when type is number and limits number
*/
  minValue?: number;
/**
MaxValue can be used when type is number and limits number
*/
  maxValue?: number;
/**
Image of the option. It is available on material options
*/
  image?: string;
/**
SortKey is a key to use sort options. If it is empty id is used instead
*/
  sortKey?: string;
/**
EnumGroups further limits string enums.
*/
  enumGroups?: GameEnumGroup[];
/**
Scene is properties of game scene or category options.
*/
  scene?: GameSceneProps;
}

export const GameOption_id = "id";
export const GameOption_type = "type";
export const GameOption_description = "description";
export const GameOption_default = "default";
export const GameOption_enum = "enum";
export const GameOption_format = "format";
export const GameOption_minValue = "min_value";
export const GameOption_maxValue = "max_value";
export const GameOption_image = "image";
export const GameOption_sortKey = "sort_key";
export const GameOption_enumGroups = "enum_groups";
export const GameOption_scene = "scene";
export interface Game {
  id?: string;
  uniqueName?: string;
  ownerId?: string;
  productionVersion?: string;
  isOnProduction?: boolean;
  createdAt?: string|number;
  lastUpdated?: string|number;
  labels?: { [key: string]: string };
		}

export const Game_id = "id";
export const Game_uniqueName = "unique_name";
export const Game_ownerId = "owner_id";
export const Game_productionVersion = "production_version";
export const Game_isOnProduction = "is_on_production";
export const Game_createdAt = "created_at";
export const Game_lastUpdated = "last_updated";
export const Game_labels = "labels";
export interface GameRelease {
  releaseId?: string;
  gameId?: string;
  version?: string;
  gameManifest?: GameManifest;
  releasedAt?: string|number;
  releasedBy?: string;
  releaseState?: ReleaseState;
  validatedBy?: string;
  validatedAt?: string|number;
  intVersion?: string|number;
  storage?: string;
  archiveFormat?: string;
  packageUrl?: string;
  packages?: { [key: string]: string };
		}

export const GameRelease_releaseId = "release_id";
export const GameRelease_gameId = "game_id";
export const GameRelease_version = "version";
export const GameRelease_gameManifest = "game_manifest";
export const GameRelease_releasedAt = "released_at";
export const GameRelease_releasedBy = "released_by";
export const GameRelease_releaseState = "release_state";
export const GameRelease_validatedBy = "validated_by";
export const GameRelease_validatedAt = "validated_at";
export const GameRelease_intVersion = "int_version";
export const GameRelease_storage = "storage";
export const GameRelease_archiveFormat = "archive_format";
export const GameRelease_packageUrl = "package_url";
export const GameRelease_packages = "packages";
export interface UploadToken {
  token?: string;
  expiresAt?: string|number;
  userId?: string;
  gameId?: string;
  newVersion?: string;
  uploadTo?: string;
}

export const UploadToken_token = "token";
export const UploadToken_expiresAt = "expires_at";
export const UploadToken_userId = "user_id";
export const UploadToken_gameId = "game_id";
export const UploadToken_newVersion = "new_version";
export const UploadToken_uploadTo = "upload_to";
